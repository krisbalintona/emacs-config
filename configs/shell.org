#+TITLE: Shell configuration


* Eshell itself

#+BEGIN_SRC emacs-lisp
  (use-package esh-mode
    :straight nil
    :hook ((eshell-mode . (lambda () ; UI enhancements
                            (visual-line-mode +1)
                            (set-display-table-slot standard-display-table 0 ?\ )))
           (eshell-mode . (lambda () ; Text-wrap
                            (set-window-fringes nil 0 0)
                            (set-window-margins nil 1 nil)))
           (eshell-mode . (lambda () (setq-local scroll-margin 3))) ; Scroll-margin
           (eshell-mode . (lambda () ; Change default face size
                            (face-remap-add-relative 'default :height 127) 
                            ))
           )
    :custom
    (eshell-kill-processes-on-exit t)
    (eshell-hist-ignoredups t)
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-scroll-to-bottom-on-output 'all)
    (eshell-input-filter (lambda (input) (not (string-match-p "\\`\\s-+" input)))) ; Don't record command in history if prefixed with whitespace
    (eshell-glob-case-insensitive t)
    (eshell-error-if-no-glob t)
    (eshell-banner-message "Welcome to the shell, Onii-chan~ (◠﹏◠✿)\n")
    :config
    ;; Save history on eshell command
    (setq eshell-save-history-on-exit nil) ; Useless since only saves upon exiting eshell session
    (defun eshell-append-history ()
      "Call `eshell-write-history' with the `append' parameter set to `t'."
      (when eshell-history-ring
        (let ((newest-cmd-ring (make-ring 1)))
          (ring-insert newest-cmd-ring (car (ring-elements eshell-history-ring)))
          (let ((eshell-history-ring newest-cmd-ring))
            (eshell-write-history eshell-history-file-name t)))))
    (add-hook 'eshell-pre-command-hook #'eshell-append-history)

    ;; Modified version of counsel-esh-history
    (defun kb/esh-history ()
      "Interactive search eshell history."
      (interactive)
      (require 'em-hist)
      (save-excursion
        (let* ((start-pos (eshell-bol))
               (end-pos (point-at-eol))
               (input (buffer-substring-no-properties start-pos end-pos)))
          (let* ((command (ivy-read "Command: "
                                    (delete-dups
                                     (when (> (ring-size eshell-history-ring) 0)
                                       (ring-elements eshell-history-ring)))
                                    :preselect input
                                    :action #'ivy-completion-in-region-action))
                 (cursor-move (length command)))
            (kill-region (+ start-pos cursor-move) (+ end-pos cursor-move))
            )))
      ;; move cursor to eol
      (end-of-line)
      )

    (kb/leader-keys
      "oE" '(eshell :which-key "Open eshell")
      )

    (general-define-key
     :keymaps 'eshell-mode-map
     [remap evil-first-non-blank] 'eshell-bol ; Jump after the prompt
     [remap eshell-previous-matching-input] 'kb/esh-history ; Eshell history
     "<home>" 'eshell-bol
     )
    )
#+END_SRC

Make it fancy
#+BEGIN_SRC emacs-lisp
;; Go to https://github.com/daviwil/dotfiles/blob/master/Emacs.org#better-colors
#+END_SRC

* My own Eshell prompt

Entirely taken from [[http://www.modernemacs.com/post/custom-eshell/][Making eshell your own | Modern Emacs]]
#+BEGIN_SRC emacs-lisp
  (require 'dash)
  (require 's)

  (defmacro with-face (STR &rest PROPS)
    "Return STR propertized with PROPS."
    `(propertize ,STR 'face (list ,@PROPS)))

  (defmacro esh-section (NAME ICON FORM &rest PROPS)
    "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
    `(setq ,NAME
           (lambda () (when ,FORM
                        (-> ,ICON
                            (concat esh-section-delim ,FORM)
                            (with-face ,@PROPS))))))

  (defun esh-acc (acc x)
    "Accumulator for evaluating and concatenating esh-sections."
    (--if-let (funcall x)
        (if (s-blank? acc)
            it
          (concat acc esh-sep it))
      acc))

  (defun esh-prompt-func ()
    "Build `eshell-prompt-function'"
    (concat esh-header
            (-reduce-from 'esh-acc "" eshell-funcs)
            "\n"
            eshell-prompt-string))

  ;; Separator between esh-sections
  (setq esh-sep " | ")  ; or " | "

  ;; Separator between an esh-section icon and form
  (setq esh-section-delim " ")

  ;; Eshell prompt header
  (setq esh-header "\n┌─")  ; or "\n┌─"

  ;; Eshell prompt regexp and string. Unless you are varying the prompt by eg.
  ;; your login, these can be the same.
  (setq eshell-prompt-regexp "└─> λ ")   ; or "└─> "
  (setq eshell-prompt-string "└─> λ ")   ; or "└─> "

  (esh-section esh-dir
               " \xf07c "  ;  (faicon folder)
               (abbreviate-file-name (eshell/pwd))
               '(:foreground "gold" :weight bold))

  (esh-section esh-git
               "ᛦ"  ;  (git icon)
               (magit-get-current-branch)
               '(:foreground "pink"))

  ;; (esh-section esh-python
  ;;              "\xe928"  ;  (python icon)
  ;;              pyvenv-virtual-env-name)

  (esh-section esh-clock
               "\xf017 "  ;  (clock icon)
               (format-time-string "%H:%M" (current-time))
               '(:foreground "forest green"))

  ;; Below I implement a "prompt number" section
  (setq esh-prompt-num 0)
  (add-hook 'eshell-exit-hook (lambda () (setq esh-prompt-num 0)))
  (advice-add 'eshell-send-input :before
              (lambda (&rest args) (setq esh-prompt-num (incf esh-prompt-num))))

  (esh-section esh-num
               "\xf0c9 "  ;  (list icon)
               (number-to-string esh-prompt-num)
               '(:foreground "brown"))

  ;; Choose which eshell-funcs to enable
  (setq eshell-funcs (list esh-dir esh-git esh-clock esh-num))

  ;; Enable the new eshell prompt
  (setq eshell-prompt-function 'esh-prompt-func)
#+END_SRC

* Esh-opt

Not sure what esh-opt is yet
#+begin_src emacs-lisp
  (use-package esh-opt ; An eshell module that needs to be loaded
    :straight nil
    :config
    (setq eshell-history-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "nvim")) ; Commands to run in term buffer to properly display from eshell
    ) 
#+end_src

* Eshell-toggle

Toggle eshell window in bottom of current buffer
#+BEGIN_SRC emacs-lisp
  (use-package eshell-toggle
    :custom
    (eshell-toggle-size-fraction 3) ; How big is the window?
    ;; (eshell-toggle-use-projectile-root t)
    (eshell-toggle-use-git-root t)
    (eshell-toggle-init-function #'eshell-toggle-init-eshell) ; Terminal emulator to use
    (eshell-toggle-run-command nil) ; Command to run in new buffer
    (eshell-toggle-window-side 'above)
    :config

    (kb/leader-keys
      "oe" '(eshell-toggle :which-key "Toggle eshell")
      "oE" '(eshell :which-key "Open eshell")
      )
    )
#+END_SRC

* Smartparens

Autopairing parentheses
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook ((eshell-mode . smartparens-mode)
           (sh-mode . smartparens-mode)
           (lua-mode . smartparens-mode)
           (text-mode . smartparens-mode)
           (smartparens-mode . show-smartparens-mode)) ; Subtlely highlight matching parentheses
    :custom
    (sp-show-pair-from-inside t)
    :config
    (sp-pair "'" nil :actions :rem) ; Don't pair '
    )
#+END_SRC

* Eshell-up

Go up directories easily
#+BEGIN_SRC emacs-lisp
  (use-package eshell-up)
#+END_SRC

* Eshell-z

Better and quicker usage of cd
#+BEGIN_SRC emacs-lisp
  (use-package eshell-z)
#+END_SRC

* Eshell-help

See help doctrings for functions easlily via =M-x esh-help-run-help=
#+BEGIN_SRC emacs-lisp
  (use-package esh-help
    :config
    (setup-esh-help-eldoc)
    )
#+END_SRC

* Shrink-path

Truncate eshell directory path
- Only exmaple configuration exists in Emacs (so far)
#+BEGIN_SRC emacs-lisp
  (use-package shrink-path)
#+END_SRC

* Esh-autosuggest

#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :custom
    (esh-autosuggest-delay 0.5)
    :config
    (set-face-foreground 'company-preview-common "#4b5668")
    (set-face-background 'company-preview nil)
    )
#+END_SRC

* Fish-completion

Uses pcomplete completion framework with completion from fish (the shell)
#+BEGIN_SRC emacs-lisp
  (use-package fish-completion
    :disabled ; Doesn't work?
    :hook (eshell-mode . (lambda ()
                           (when (and (executable-find "fish")
                                      (require 'fish-completion nil t))
                             (fish-completion-mode))
                           ))
    )
#+END_SRC

* Eshell-syntax-highlighting

Zsh-esque syntax highlighting in eshell
#+BEGIN_SRC emacs-lisp
  (use-package eshell-syntax-highlighting
    :config
    (eshell-syntax-highlighting-global-mode t)
    )
#+END_SRC

* Other terminal emulators

** Vterm

Full-fledged terminal emulator
#+begin_src emacs-lisp
  ;; (straight-use-package ; This doesn't work, so I have to do this manually for now
  ;;  '(vterm :build '(("mkdir -p build")
  ;;                   ("cd build")
  ;;                   ("cmake ..")
  ;;                   ("make"))
  ;;          ))

  (use-package vterm
    :hook (vterm-mode . (lambda ()
                          (set (make-local-variable 'buffer-face-mode-face) 'fixed-pitch)
                          (buffer-face-mode t)))
    :custom
    (vterm-kill-buffer-on-exit nil)
    (vterm-copy-exclude-prompt t)
    (vterm-min-window-width 50)
    :config
    (add-hook 'vterm-mode-hook
              (lambda ()
                (face-remap-add-relative 'default :height 119) ; Change default face size
                ))
    )
#+end_src

** Vterm-toggle

Eshell-toggle but for vterm
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :config
    (kb/leader-keys
      :keymaps 'vterm-mode-map
      :states '(normal motion visual)
      "vp" '(vterm-toggle-backward :which-key "Prev vterm buffer")
      "vn" '(vterm-toggle-forward :which-key "Prev vterm buffer")
      "vd" '(vterm-toggle-insert-cd :which-key "Cd to current buffer dir")
      )

    (kb/leader-keys
      "ot" '(vterm-toggle :which-key "Vterm-toggle")
      "oT" '(vterm :which-key "Vterm in current window")
      )
    )
#+end_src

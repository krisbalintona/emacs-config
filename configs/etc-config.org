#+TITLE: Base Configuration Settings

* Display-fill-column-indicator-mode

Visually indicates where the fill-column is
#+begin_src emacs-lisp
  (use-package display-fill-column-indicator
    :disabled t ; Don't find it useful or pleasant to look at
    :straight nil
    :hook (prog-mode . display-fill-column-indicator-mode)
    :config
    (set-face-attribute 'fill-column-indicator nil :foreground "grey25") ; Change color of line
    )
#+end_src

* Recentf

Enable logging of recent files
#+begin_src emacs-lisp
  (use-package recentf
    :straight nil
    :custom
    (recentf-mode t)
    (recentf-max-saved-items 1000)
    (recentf-max-menu-items 15)
    )
#+end_src

* Golden-ratio

Auto-size window so current is largest
#+begin_src emacs-lisp
  (use-package golden-ratio
    :disabled ; Not good in all cases
    :after (evil evil-collection) ; Relies on evil-window commands
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-extra-commands ; Commands which trigger changing of window ratio
     '(evil-window-next evil-window-right evil-window-left evil-window-down evil-window-up))
    (golden-ratio-exclude-buffer-names '("*org-roam*")) ; still buggy
    :preface
    (defun pl/helm-alive-p ()
      "Detect if helm buffer is active. Taken from https://emacs.readthedocs.io/en/latest/completion_and_selection.html"
      (if (boundp 'helm-alive-p)
          (symbol-value 'helm-alive-p)))
    :config
    (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)
    )
#+end_src

* Savehist

Make history of certain things (e.g. minibuffer) persistent across sessions
#+begin_src emacs-lisp
  (use-package savehist
    :straight nil
    :hook (after-init . savehist-mode)
    :custom
    (savehist-autosave-interval 300)
    :config
    (add-to-list 'savehist-additional-variables 'recentf-list) ; Save recent files
    (add-to-list 'savehist-additional-variables 'kill-ring) ; Save kill ring
    )
#+end_src

* Keep tags on right-hand side

Taken from [[https://orgmode.org/worg/org-hacks.html#archiving][Org ad hoc code, quick hacks and workarounds]]. May be slow in big files
#+begin_src emacs-lisp
  (setq ba/org-adjust-tags-column t)

  (defun ba/org-adjust-tags-column-reset-tags ()
    "In org-mode buffers it will reset tag position according to
    `org-tags-column'."
    (when (and
           (not (string= (buffer-name) "*Remember*"))
           (eql major-mode 'org-mode))
      (let ((b-m-p (buffer-modified-p)))
        (condition-case nil
            (save-excursion
              (goto-char (point-min))
              (command-execute 'outline-next-visible-heading)
              ;; disable (message) that org-set-tags generates
              (flet ((message (&rest ignored) nil))
                (org-set-tags 1 t))
              (set-buffer-modified-p b-m-p))
          (error nil)))))

  (defun ba/org-adjust-tags-column-now ()
    "Right-adjust `org-tags-column' value, then reset tag position."
    (set (make-local-variable 'org-tags-column)
         (- (- (window-width) (length org-ellipsis))))
    (ba/org-adjust-tags-column-reset-tags))

  (defun ba/org-adjust-tags-column-maybe ()
    "If `ba/org-adjust-tags-column' is set to non-nil, adjust tags."
    (when ba/org-adjust-tags-column
      (ba/org-adjust-tags-column-now)))

  (defun ba/org-adjust-tags-column-before-save ()
    "Tags need to be left-adjusted when saving."
    (when ba/org-adjust-tags-column
      (setq org-tags-column 1)
      (ba/org-adjust-tags-column-reset-tags)))

  (defun ba/org-adjust-tags-column-after-save ()
    "Revert left-adjusted tag position done by before-save hook."
    (ba/org-adjust-tags-column-maybe)
    (set-buffer-modified-p nil))

  ;; Automatically align tags on right-hand side
  (add-hook 'window-configuration-change-hook
            'ba/org-adjust-tags-column-maybe)
  (add-hook 'before-save-hook 'ba/org-adjust-tags-column-before-save)
  (add-hook 'after-save-hook 'ba/org-adjust-tags-column-after-save)
  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (setq org-agenda-tags-column (- (window-width)))))

  ;; Between invoking org-refile and
  ;; displaying the prompt (which triggers
  ;; window-configuration-change-hook)
  ;; tags might adjust, which invalidates
  ;; the org-refile cache
  (defadvice org-refile (around org-refile-disable-adjust-tags)
    "Disable dynamically adjusting tags"
    (let ((ba/org-adjust-tags-column nil))
      ad-do-it))
  (ad-activate 'org-refile)
#+end_src

* Flimenu

Turns tree-based imenu sorting into a flat hierarchy
#+begin_src emacs-lisp
  (use-package flimenu
    :hook (after-init . flimenu-global-mode)
    :custom
    (flimenu-ignore-modes-list nil) ; Igorned modes
    )
#+end_src

* File-name-shadow-mode

Properties given to the shadowed part of a filename in the minibuffer
#+begin_src emacs-lisp
  (use-package rfn-eshadow
    :straight nil
    :hook (after-init . file-name-shadow-mode)
    ;; :custom
    ;; (file-name-shadow-properties '(invisible t)) ; Hide shadowed paths
    )
#+end_src

* Sudo-edit

Utilities to edit files as root
#+begin_src emacs-lisp
  (use-package sudo-edit
    :hook (after-init . sudo-edit-indicator-mode)
    :config
    (kb/leader-keys
      "fU" '(sudo-edit-find-file :which-key "Sudo find-file")
      "fu" '(sudo-edit-current-file :which-key "Sudo this file")
      )
    )
#+end_src

* Auto-sudoedit

Automatically sudo files you don't have write access to
#+begin_src emacs-lisp
  (use-package auto-sudoedit
    :disabled t ; Annoying for now
    :hook (after-init . auto-sudoedit-mode)
    )
#+end_src

* Transient-dwim

Using transient to display the pre-configured transient dispatcher for your situation (major-mode or installed packages)
+ Has in-built transient menus for =dired-mode=, =origami-mode=, =neotree-mode=, and =magit-mode=
#+begin_src emacs-lisp
  (use-package transient-dwim
    :config
    (general-define-key
     "M-," 'transient-dwim-dispatch
     )
    )
#+end_src

* Markdown-mode

Taken from [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#markdown][dotemacs/dotemacs.org at master · angrybacon/dotemacs · GitHub]]
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("INSTALL\\'" "CONTRIBUTORS\\'" "LICENSE\\'" "README\\'")
    :custom
    ;; (markdown-asymmetric-header t) ; Not sure what this does yet
    (markdown-split-window-direction 'right)
    :config
    ;; (general-unbind
    ;;   :keymaps 'markdown-mode-map
    ;;   "M-<down>"
    ;;   "M-<up>"
    ;;   )
    )
#+end_src

* Abbrev-mode

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'abbrev-mode)
#+end_src

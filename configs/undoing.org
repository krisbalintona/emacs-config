#+TITLE: Undo and revert capacity

* Undo-fu

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :demand t
    :hook (text-mode . undo-fu-mode)
    :custom
    ;; Store more undo history to prevent loss of data
    (undo-limit (* 100 1024))
    (undo-strong-limit 3000000)
    (undo-outer-limit 3000000)
    :config

    (define-minor-mode undo-fu-mode
      "Enables `undo-fu' for the current session."
      :keymap (let ((map (make-sparse-keymap)))
                (define-key map [remap undo]    #'undo-fu-only-undo)
                (define-key map [remap redo]    #'undo-fu-only-redo)
                (define-key map (kbd "C-_")     #'undo-fu-only-undo)
                (define-key map (kbd "M-_")     #'undo-fu-only-redo)
                (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
                (define-key map (kbd "C-x r u") #'undo-fu-session-save)
                (define-key map (kbd "C-x r U") #'undo-fu-session-recover)
                map)
      :init-value nil
      :global t)
    )
#+END_SRC
* Undo-fu-session

Keep undo history between sessions
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu-session
    :hook (undo-fu-mode . global-undo-fu-session-mode)
    :preface
    (setq undo-fu-session-directory (concat user-emacs-directory "undo-fu-session/")
          undo-fu-session-incompatible-files '("\\.gpg$" "/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
    :config
    ;; (global-undo-tree-mode -1) ; Incompatible - make sure it's off
    )
#+END_SRC
* Winner-mode

Reverting and traversing window configurations across time
#+begin_src emacs-lisp
  (use-package winner
    :custom
    (winner-dont-bind-my-keys t) ; Don't bind keys because I bind them myself
    :config
    (winner-mode)

    (general-define-key
     "C-<left>" 'winner-undo
     "C-<right>" 'winner-redo
     )
    )
#+end_src

#+TITLE: Basic Org packages


* Org-mode

** Org-mode itself

Styling (called in org-superstar)
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook (org-mode . kb/org-visual-setup)
    :custom
    ;; (org-ellipsis " ⛛") ; Specifically for org-mode headlines ; Doesn't work?
    (org-startup-indented t)
    (org-startup-folded 'nofold)
    (org-pretty-entities t) ; Show as UTF-8 characters (useful for math)
    (org-hide-emphasis-markers t) ; Remove org-mode markup characters
    (org-fontify-whole-heading-line t)
    (org-fontify-quote-and-verse-blocks t) ; Have these blocks look pretty
    (org-pretty-entities t) ; Prettify things
    (org-pretty-entities-include-sub-superscripts nil) ; Don't show super- and sunbscripts
  
    ;; For programming
    (org-src-tab-acts-natively t) ; Treat tabs in src blocks the same as if it 
    (org-src-window-setup 'current-window) ; Open src block window on current buffer were in the language's major mode
    :preface
    (defun kb/org-visual-setup () ; Modes only for org-mode
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1)
      )
  
    :config
    (kb/leader-keys
      "nn" '(org-capture :which-key "Org-capture")
      "mg" '(org-mark-ring-goto :which-key "Goto last mark")
      "ma" '(org-mark-ring-push :which-key "Push to mark-ring")
      )
    )
#+END_SRC

** Custom functions

Better C-ret functionality
#+BEGIN_SRC emacs-lisp
  (defun +org--insert-item (direction)
    (let ((context (org-element-lineage
                    (org-element-context)
                    '(table table-row headline inlinetask item plain-list)
                    t)))
      (pcase (org-element-type context)
        ;; Add a new list item (carrying over checkboxes if necessary)
        ((or `item `plain-list)
         ;; Position determines where org-insert-todo-heading and org-insert-item
         ;; insert the new list item.
         (if (eq direction 'above)
             (org-beginning-of-item)
           (org-end-of-item)
           (backward-char))
         (org-insert-item (org-element-property :checkbox context))
         ;; Handle edge case where current item is empty and bottom of list is
         ;; flush against a new heading.
         (when (and (eq direction 'below)
                    (eq (org-element-property :contents-begin context)
                        (org-element-property :contents-end context)))
           (org-end-of-item)
           (org-end-of-line)))

        ;; Add a new table row
        ((or `table `table-row)
         (pcase direction
           ('below (save-excursion (org-table-insert-row t))
                   (org-table-next-row))
           ('above (save-excursion (org-shiftmetadown))
                   (+org/table-previous-row))))

        ;; Otherwise, add a new heading, carrying over any todo state, if
        ;; necessary.
        (_
         (let ((level (or (org-current-level) 1)))
           ;; I intentionally avoid `org-insert-heading' and the like because they
           ;; impose unpredictable whitespace rules depending on the cursor
           ;; position. It's simpler to express this command's responsibility at a
           ;; lower level than work around all the quirks in org's API.
           (pcase direction
             (`below
              (let (org-insert-heading-respect-content)
                (goto-char (line-end-position))
                (org-end-of-subtree)
                (insert "\n" (make-string level ?*) " ")))
             (`above
              (org-back-to-heading)
              (insert (make-string level ?*) " ")
              (save-excursion (insert "\n"))))
           (when-let* ((todo-keyword (org-element-property :todo-keyword context))
                       (todo-type    (org-element-property :todo-type context)))
             (org-todo
              (cond ((eq todo-type 'done)
                     ;; Doesn't make sense to create more "DONE" headings
                     (car (+org-get-todo-keywords-for todo-keyword)))
                    (todo-keyword)
                    ('todo)))))))

      (when (org-invisible-p)
        (org-show-hidden-entry))
      (when (and (bound-and-true-p evil-local-mode)
                 (not (evil-emacs-state-p)))
        (evil-insert 1))))


  (defun +org/insert-item-below (count)
    "Inserts a new heading, table cell or item below the current one."
    (interactive "p")
    (dotimes (_ count) (+org--insert-item 'below)))

  (define-key org-mode-map (kbd "<C-return>") '+org/insert-item-below)
  (evil-define-key '(normal visual) 'global (kbd "<C-return>") '+org/insert-item-below)
#+END_SRC

Alter RET to behave more usefully (like in Doom)
#+BEGIN_SRC emacs-lisp
(defun +org--toggle-inline-images-in-subtree (&optional beg end refresh)
  "Refresh inline image previews in the current heading/tree."
  (let ((beg (or beg
                 (if (org-before-first-heading-p)
                     (line-beginning-position)
                   (save-excursion (org-back-to-heading) (point)))))
        (end (or end
                 (if (org-before-first-heading-p)
                     (line-end-position)
                   (save-excursion (org-end-of-subtree) (point)))))
        (overlays (cl-remove-if-not (lambda (ov) (overlay-get ov 'org-image-overlay))
                                    (ignore-errors (overlays-in beg end)))))
    (dolist (ov overlays nil)
      (delete-overlay ov)
      (setq org-inline-image-overlays (delete ov org-inline-image-overlays)))
    (when (or refresh (not overlays))
      (org-display-inline-images t t beg end)
      t)))

  (defun +org/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.

  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
    subtree; update statistics cookies/checkboxes and ToCs.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: execute the source block
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
    (interactive "P")
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`headline
         (cond ((memq (bound-and-true-p org-goto-map)
                      (current-active-maps))
                (org-goto-ret))
               ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context)))))))


  (define-key evil-motion-state-map (kbd "RET") '+org/dwim-at-point)
#+END_SRC

** Org-superstar

Descendant of (and thus superior to) org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar  ;; Improved version of org-bullets
    :hook ((prog-mode . (lambda () (visual-line-mode 0)))
           (org-mode . (lambda () (org-superstar-mode t))))
    :custom
    (org-cycle-level-faces nil)
    (org-n-level-faces 5)

    (org-superstar-leading-bullet ?\s) ;; Render leading stars as spaces!
    (org-superstar-leading-fallback ?\s) ; Hide away leading stars on terminal.
    (org-hide-leading-stars t) ;; t means no character is there at all
    (org-superstar-cycle-headline-bullets nil) ; Don't repeat bullets in heirarchy
    (org-superstar-todo-bullet-alist
     '(("TODO" . 9744)
       ("[ ]"  . 9744)
       ("DONE" . 9745)
       ("[X]"  . 9745)))
    (org-superstar-headline-bullets-list
     '("⚝" "●" "◉" "○"))
    (org-superstar-first-inlinetask-bullet ?▶)
    ;; org-superstar-item-bullet-alist ; For plainlist bullets

    (org-hidden-keywords '(title)) ; hide #+TITLE:
    (inhibit-compacting-font-caches t) ; Stop slowdown
    )
#+END_SRC

** Org-fancy-priorities

Icons for org priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :hook (org-mode . org-fancy-priorities-mode)
    :custom
    (org-fancy-priorities-list '((?A . "💀")
                                 (?B . "🔥")
                                 (?C . "🌟")
                                 (?D . "🏃")
                                 (?E . "👍")
                                 (?F . "🧋")))
    )
#+END_SRC

** Visual-fill-column

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :hook ((org-mode . visual-fill-column-mode)
           (mu4e-view-mode . visual-fill-column-mode))
    :custom
    (visual-fill-column-width 120)
    (visual-fill-column-center-text t)
    :config
    (setq-default split-window-preferred-function 'visual-fill-column-split-window-sensibly) ; Be able to vertically split windows that have wide margins
    )
#+END_SRC

* Yanking

** Org-attach

#+BEGIN_SRC emacs-lisp
  (setq org-attach-id-dir "attachments/")
  (setq org-attach-dir-relative t) ; Use relative file paths
  (setq org-attach-method 'cp) ; Attach copies of files
  (setq org-attach-archive-delete 'query) ; If subtree is deleted or archived, ask user
#+END_SRC

** Org-download

Insert images and screenshots
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :hook (org-mode . org-download-enable)
    :custom
    (org-download-method 'attach)
    (org-download-screenshot-method "scrot -s %s") ; Use scrot
    (org-download-link-format "[[download:%s]]\n")
    (org-download-annotate-function (lambda (_link) ""))
    :config
    (setq-default org-download-image-dir (concat org-directory "resources/")
                  org-download-heading-lvl nil
                  org-download-timestamp "%Y-%m-%d_%H-%M-%S_") ; Default

    (kb/leader-keys
      "ii" '(org-download-clipboard :which-key "Paste image from clipboard")
      )
    )
#+END_SRC

** Org-cliplink

Paste https link with automatic description
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :config
    (kb/leader-keys
      "ib" '(org-cliplink :which-key "Paste https"))
    )
#+END_SRC

#+TITLE: Quality of life packages

* Helpful

Have more descriptive and helpful function and variable descriptions
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after (evil evil-collection)
    :demand t ; Don't wait for the binded keys
    :bind
    ;; Remap all default help commands to helpful
    ([remap describe-function] . helpful-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    :custom
    ;; Make counsel use helpful
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)

    :config
    (evil-define-key '(visual normal) 'global (kbd "K") 'helpful-at-point)

    (kb/leader-keys
      "hk" '(helpful-key :which-key "Desc key")
      )
    )
#+END_SRC


* Beacon

Cool version of nav-flash
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :custom
    (beacon-blink-when-focused t) ; Blink when Emacs comes into focus
    (beacon-blink-delay 0.04)
    (beacon-blink-duration 0.5)
    :config
    (beacon-mode)
    )
#+END_SRC

* Saveplace

Save and restore point in files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (save-place-mode)
    )
#+END_SRC

* Which-key

Show keybinds
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :hook (window-setup . which-key-mode)
    :preface
    ;; These variables should be set before which-key-mode is activated
    (setq which-key-idle-delay 1.2
          which-key-show-early-on-C-h t ; Show which-key immediately for C-h
          which-key-add-column-padding 0
          which-key-max-display-columns nil)
    :init
    (which-key-setup-side-window-right) ; Show which-key on the right
    :config
    ;; Don't display C-u, digit, and other numeric keybad bindings
    (push '(("^[0-9-]\\|kp-[0-9]\\|kp-subtract\\|C-u$" . nil) . ignore) 
          which-key-replacement-alist)
    )
#+END_SRC

* All-the-icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :custom
    (all-the-icons-scale-factor 1.1)
    )
#+END_SRC

* Hide-mode-line

Hide the modeline when you don't want to see it
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line)
#+END_SRC

* Super-save

Automatically save buffers when you do certain things
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :hook (after-init . super-save-mode)
    :custom
    (super-save-auto-save-when-idle t) ; Save buffer if Emacs is idle
    (super-save-idle-duration 10) ; Wait 10 seconds for idle trigger
    (super-save-remote-files t) ; Turn on saving of remote files (those pulled from git repo?)
    (super-save-exclude nil) ; Don't exclude anything from being saved
    :config
    (add-to-list 'super-save-triggers 'evil-window-next)
    (add-to-list 'super-save-hook-triggers 'eyebrowse-pre-window-switch-hook)
    )
#+END_SRC

* Autorevert

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :custom
    (auto-revert-interval 7)
    (auto-revert-check-vc-info t)
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose t)
    :config
    (global-auto-revert-mode t)
    )
#+END_SRC

* Whitespace

Remove whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :hook (before-save . whitespace-cleanup)
    :custom
    (whitespace-style '(face empty indentation::space tab))
    )
#+END_SRC

* Rainbow-delimiters

Color-code your parentheses
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+END_SRC

* Unicode-fonts

#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :preface
    (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
      "Taken from https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance"
      (let* ((block-idx (cl-position-if
                         (lambda (i) (string-equal (car i) block-name))
                         unicode-fonts-block-font-mapping))
             (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
             (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
        (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
              `(,updated-block))))
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :preface
    (defun kb/fix-unicode-fonts ()
      "Fix the font mappings to use the right emoji font"
      (mapcar
       (lambda (block-name)
         (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
       '("Dingbats"
         "Emoticons"
         "Miscellaneous Symbols and Pictographs"
         "Transport and Map Symbols"))

      (unicode-fonts-setup)
      )
    :config
    (if (daemonp) ; Hooks depending on daemon or not
        (add-hook 'server-after-make-frame-hook 'kb/fix-unicode-fonts)
      (add-hook 'window-setup-hook 'kb/fix-unicode-fonts))
    )
#+END_SRC

* Emojify

Show emojiis
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :custom
    (global-emojify-mode t)
    )
#+END_SRC

* Pinetry

Emacs can be prompted for the PIN of GPG private keys, we just need to set epa-pinentry-mode to accomplish that:
- Doom has this settings as well
#+BEGIN_SRC emacs-lisp
  (setq epg-pinentry-mode 'loopback)
  ;; (pinentry-start) ; This function doesn't exist?
#+END_SRC

* Anzu

Highlight indicators during replace and regexp
#+begin_src emacs-lisp
  (use-package anzu
    :hook (after-init . global-anzu-mode)
    :custom
    (anzu-cons-mode-line-p nil)

    (general-define-key [remap query-replace] 'anzu-query-replace-regexp)
    )
#+end_src

* Expand-region

Incrementally select a region outward
#+begin_src emacs-lisp
  (use-package expand-region
    :config
    (general-define-key
     :keymaps '(normal motion visaul)
     "ge" 'er/expand-region)
    )
#+end_src

* Default-text-scale

Text-scale-mode but Emacs-wide
#+begin_src emacs-lisp
  (use-package default-text-scale)
#+end_src

* Dimmer

Dim inactive buffers
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled ; Not sure if I should keep
    :hook (after-init . dimmer-mode)
    :custom
    (dimmer-fraction 0.27)
    :config
    (dimmer-configure-which-key) ; Exclude which-key buffer
    (add-to-list 'dimmer-buffer-exclusion-regexps "^ \\*org-roam\\*$") ; Exclude org-roam-buffer
    )
#+end_src

* Goto-line-preview

Preview line before you jump to it with =M-x goto-line=
#+begin_src emacs-lisp
  (use-package goto-line-preview
    :config
    (general-define-key [remap goto-line] 'goto-line-preview) ; Remap
    )
#+end_src

* Ace-link

Click links easier
#+begin_src emacs-lisp
  (use-package ace-link
    :config
    (general-define-key
     :kemaps '(Info-mode helpful-mode help-mode woman-mode eww-mode compilation-mode mu4e-view-mode custom-mode-map)
     "M-/" '(ace-link :which-key "Ace-link")
     )
    )
#+end_src

* Ace-jump

Quickly jump to characters
#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :custom
    (ace-jump-mode-gray-background nil) ; Don't make text's background gray
    (ace-jump-mode-scope 'window)
    (ace-jump-mode-case-fold t) ; Ignore case?
    ;; Priority of ace-jump selections - you can prefix with 1 or 2 universal
    ;; arguments to activate the second and third submode in the list,
    ;; respectively
    (ace-jump-mode-submode-list '(ace-jump-char-mode ace-jump-word-mode ace-jump-line-mode))  
    :config
    (general-define-key
     "M-a" '(ace-jump-mode :which-key "Ace-jump")
     )
    )
#+end_src

* Keyfreq

See a heatmap of your keypresses
#+begin_quote
Use =keyfreq-show= to see how many times you used a command. Use =keyfreq-html= to get the original rendered HTML page. Use =keyfreq-html-v2= to get the keyboard heat map.
#+end_quote
#+begin_src emacs-lisp
  (use-package keyfreq
    :straight (keyfreq :type git :host github :repo "KirmTwinty/keyfreq")
    :hook ((after-init . keyfreq-mode)
           (after-init . keyfreq-autosave-mode))
    :custom
    (keyfreq-folder (concat no-littering-var-directory "keyfreq"))
    ;; Commands not to be logged
    (keyfreq-excluded-commands '(self-insert-command 
                                 org-self-insert-command
                                 ;; forward-char
                                 ;; backward-char
                                 ;; previous-line
                                 ;; next-line
                                 ))
    )
#+end_src

* Git-timemachine

Enable in current buffer to iterate through git revision history
#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

* Better-jumper

Better version of evil-jump
#+begin_src emacs-lisp
  (use-package better-jumper
    :disabled t ; I don't use this
    :after evil
    :hook (evil-mode . better-jumper-mode)
    :custom
    (better-jumper-context 'window)
    (better-jumper-new-window-behavior 'copy)
    (better-jumper-max-length 200)
    (better-jumper-use-evil-jump-advice t)
    (better-jumper-use-savehist t)
    :config
    (general-define-key
     :keymaps 'evil-motion-state-map
     [remap evil-jump-backward] 'better-jumper-jump-backward
     [remap evil-jump-forward] 'better-jumper-jump-forward
     )
    )
#+end_src

* System package management

** System-packages

#+begin_src emacs-lisp
  (use-package system-packages
    :custom
    ;; (system-packages-package-manager )
    (system-packages-use-sudo t)
    )
#+end_src

** Helm-system-packages

#+begin_src emacs-lisp
  (use-package helm-system-packages
    :config
    ;; Workaround from INSERT LINK HERE
    (defun helm-system-packages ()
      "Helm user interface for system packages."
      (interactive)
      ;; Some package managgers do not have an executable bearing the same name,
      ;; hence the optional pair (EXECUTABLE PACKAGE-MANAGER).
      (let ((managers (seq-filter (lambda (p)
                                    (if (tramp-tramp-file-p default-directory)
                                        (tramp-find-executable (tramp-dissect-file-name default-directory) (car p) nil)
                                      (executable-find (car p))))
                                  '(("emerge" "portage") ("dnf") ("pacman") ("xbps-query" "xbps") ("brew")

  ;;; Fix
                                    ;; Removed ("dpkg") from the list
  ;;; Fix

                                    ;; Keep "guix" last because it can be installed
                                    ;; beside other package managers and we want to
                                    ;; give priority to the original package
                                    ;; manager.
                                    ("guix")))))
        (if (not managers)
            (message (if (eq system-type 'darwin)
                         "No supported package manager was found. Check your `exec-path'."
                       "No supported package manager was found."))
          (let ((manager (car (last (car managers)))))
            (require (intern (concat "helm-system-packages-" manager)))
            (if (boundp (intern (concat "helm-system-packages-" manager)))
                ;; New abstraction.
                (let ((current-manager
                       (symbol-value (intern (concat "helm-system-packages-" manager)))))
                  (unless (apply 'helm-system-packages-missing-dependencies-p
                                 (helm-system-packages-manager-dependencies current-manager))
                    (helm :sources (helm-system-packages-build-source current-manager)
                          :buffer (format "*helm %s*" (helm-system-packages-manager-name
                                                       current-manager))
                          :truncate-lines t
                          :input (when helm-system-packages-use-symbol-at-point-p
                                   (substring-no-properties (or (thing-at-point 'symbol) ""))))))
              ;; Old abstraction.
              (fset 'helm-system-packages-refresh (intern (concat "helm-system-packages-" manager "-refresh")))
              (funcall (intern (concat "helm-system-packages-" manager))))))))
    )
#+end_src

* Scratch.el

Easily create scratch buffers for different modes
#+begin_src emacs-lisp
  (use-package scratch
    :demand t ; Don't wait for deferred hook
    :hook (scratch-create-buffer . kb/scratch-buffer-setup)
    :preface
    (defun kb/scratch-buffer-setup ()
      "Add contents to `scratch' buffer and name it accordingly. Taken from https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/"
      (let* ((mode (format "%s" major-mode))
             (string (concat "Scratch buffer for: " mode "\n\n")))
        (when scratch-buffer
          (save-excursion
            (insert string)
            (goto-char (point-min))
            (comment-region (point-at-bol) (point-at-eol)))
          (forward-line 2))
        (rename-buffer (concat "*Scratch for " mode "*") t)))
    :config
    (general-define-key
     "C-c s" '(scratch :which-key "Create scratch") ; Choose major-mode if prefixed with universal-arg
     )
    )
#+end_src

* Exec-path-from-shell

Ensure eshell and system shell have same path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :hook (window-setup . exec-path-from-shell-initialize)
    )
#+end_src

* Disable-mouse

Disable mouse interaction within Emacs
#+begin_src emacs-lisp
  (use-package disable-mouse
    :hook (window-setup . global-disable-mouse-mode)
    :config
    ;; For evil states
    (mapc #'disable-mouse-in-keymap
          (list evil-motion-state-map
                evil-normal-state-map
                evil-visual-state-map
                evil-insert-state-map))
    )
#+end_src

#+TITLE: Quality of life packages

* Helpful

Have more descriptive and helpful function and variable descriptions
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after (evil evil-collection)
    :demand t ; Don't wait for the binded keys
    :bind
    ;; Counsel commands are already remapped in the counsel section
    ;; ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ;; ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)

    :config
    (evil-define-key '(visual normal) 'global (kbd "K") 'helpful-at-point)

    (kb/leader-keys
      "hk" '(helpful-key :which-key "Desc key"))
    )
#+END_SRC


* Beacon

Cool version of nav-flash
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :custom
    (beacon-blink-when-focused t) ; Blink when Emacs comes into focus
    (beacon-blink-delay 0.1)
    (beacon-blink-duration 0.5)
    :config
    (beacon-mode)
    )
#+END_SRC
* Smooth-scrolling

Scroll line-by-line rather than half-screens
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :custom
    (smooth-scroll-margin 9)
    :config
    (smooth-scrolling-mode t)

    (add-hook 'eshell-mode-hook (lambda () (smooth-scrolling-mode 0))) ; Turn off smooth scrolling in eshell
    )
#+END_SRC

* Saveplace

Save and restore point in files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (save-place-mode)
    )
#+END_SRC
* Which-key

Show keybinds
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :custom
    (which-key-idle-delay 0.85)
    (which-key-show-early-on-C-h t) ; Show which-key immediately for C-h
    (which-key-add-column-padding 0)
    (which-key-max-display-columns nil)
    :config
    (which-key-mode)
    (which-key-setup-side-window-right) ; Show which-key on the ritght
   )
#+END_SRC

* All-the-icons

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC
* Hide-mode-line

Hide the modeline when you don't want to see it
#+BEGIN_SRC emacs-lisp
  (use-package hide-mode-line)
#+END_SRC

* Super-save

Automatically save buffers when you do certain things
#+BEGIN_SRC emacs-lisp
  (use-package super-save
    :custom
    (super-save-auto-save-when-idle t) ; Save buffer if Emacs is idle
    (super-save-idle-duration 10) ; Wait 10 seconds for idle trigger
    (super-save-remote-files t) ; Turn on saving of remote files (those pulled from git repo?)
    (super-save-exclude nil) ; Don't exclude anything from being saved
    :config
    (add-to-list 'super-save-triggers 'evil-window-next)

    (super-save-mode t)
    )
#+END_SRC

* Autorevert

#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :custom
    (auto-revert-interval 7)
    (auto-revert-check-vc-info t)
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose t)
    :config
    (global-auto-revert-mode t)
    )
#+END_SRC

* Whitespace

Remove whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :hook (before-save . whitespace-cleanup)
    )
#+END_SRC

* Rainbow-delimiters

Color-code your parentheses
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+END_SRC
* Unicode-fonts

#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :preface
    (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
      "Taken from https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance"
      (let* ((block-idx (cl-position-if
                         (lambda (i) (string-equal (car i) block-name))
                         unicode-fonts-block-font-mapping))
             (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
             (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
        (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
              `(,updated-block))))
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :preface
    (defun kb/fix-unicode-fonts ()
      "Fix the font mappings to use the right emoji font"
      (mapcar
       (lambda (block-name)
         (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
       '("Dingbats"
         "Emoticons"
         "Miscellaneous Symbols and Pictographs"
         "Transport and Map Symbols"))

      (unicode-fonts-setup)
      )
    :config
    (if (daemonp) ; Hooks depending on daemon or not
        (add-hook 'server-after-make-frame-hook 'kb/fix-unicode-fonts)
      (add-hook 'window-setup-hook 'kb/fix-unicode-fonts))
    )
#+END_SRC

* Emojify

Show emojiis
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :custom
    (global-emojify-mode t)
    )
#+END_SRC
* Pinetry

Emacs can be prompted for the PIN of GPG private keys, we just need to set epa-pinentry-mode to accomplish that:
- Doom has this settings as well
#+BEGIN_SRC emacs-lisp
  (setq epg-pinentry-mode 'loopback)
  ;; (pinentry-start) ; This function doesn't exist?
#+END_SRC
* Sublimity

Minimap + smooth scroll + distraction-free
#+begin_src emacs-lisp
  (use-package sublimity
    :disabled
    :init
    (require 'sublimity-scroll)
    ;; (require 'sublimity-map) ;; experimental
    ;; (require 'sublimity-attractive)
    :custom
    (sublimity-scroll-weight 5)
    (sublimity-scroll-drift-length 10)
    :config
    (sublimity-mode)
    )
#+end_src

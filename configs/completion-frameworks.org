#+TITLE: Completion Frameworks

* Selectrum

** Embark

Allow an equivalent to =ivy-actions= to regular =comlete-read= minibuffers
#+begin_src emacs-lisp
  (use-package embark
    :disabled ; For now until I learn more about it
    :straight (embark :type git :host github :repo "oantolin/embark")
    :config

    (general-define-key
     :kemaps 'minibuffer-local-map
     "M-o" '(embark-act :which-key "Embark-act")
     ;; "?" '(embark-act-noexit :which-key "Embark-act-noexit")
     ;; "?" '(embark-export :which-key "Embark-export")
     )
    )
#+end_src

For Selectrum
#+begin_src emacs-lisp
  (add-hook 'embark-target-finders 'selectrum-get-current-candidate)
  (add-hook 'embark-candidate-collectors
            (defun embark-selectrum-candidates+ ()
              (when selectrum-active-p
                (selectrum-get-current-candidates
                 ;; Pass relative file names for dired.
                 minibuffer-completing-file-name))))
  (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate) ; No unnecessary computation delay after injection.
  (add-hook 'embark-input-getters
            (defun embark-selectrum-input-getter+ ()
              (when selectrum-active-p
                (let ((input (selectrum-get-current-input)))
                  (if minibuffer-completing-file-name
                      ;; Only get the input used for matching.
                      (file-name-nondirectory input)
                    input)))))

  ;; The following is not selectrum specific but included here for convenience.
  ;; If you don't want to use which-key as a key prompter skip the following code.

  (setq which-key-show-transient-maps t) ; Necessary so show embark keybinds with which-key
  (setq embark-action-indicator
        (defun embark-which-key-setup+ ()
          (let ((help-char nil)
                (which-key-show-transient-maps t)
                (which-key-replacement-alist
                 (cons '(("^[0-9-]\\|kp-[0-9]\\|kp-subtract\\|C-u$" . nil) . ignore)
                       which-key-replacement-alist)))
            (setq-local which-key-show-prefix nil)
            (setq-local which-key-persistent-popup t)
            (which-key--update)))
        embark-become-indicator embark-action-indicator)

  (add-hook 'embark-pre-action-hook
            (defun embark-which-key-tear-down+ ()
              (kill-local-variable 'which-key-persistent-popup)
              (kill-local-variable 'which-key-show-prefix)
              (unless which-key-persistent-popup
                (which-key--hide-popup-ignore-command))))
#+end_src



* Helm

** Helm itself

Feature-rich version of Ivy completion
- *NOTE:* With the experimental minor mode =selectrum-helm-mode=, Helm defaults to using =complete-read= (and thus Selectrum when =selectrum-mode= is active)
#+begin_src emacs-lisp
  (use-package helm
    :custom
    ;; Fuzzy matching
    (helm-buffers-fuzzy-matching t)
    (helm-recentf-fuzzy-match t)
    (helm-apropos-fuzzy-match t)
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-M-x-fuzzy-match t) 

    (helm-autoresize-mode t)
    :config
    (general-unbind "C-x c") ; Unbind original helm-prefix

    (general-define-key
     :keymaps 'helm-map
     "<tab>" 'helm-execute-persistent-action ; Run persistent action
     "M-o"  'helm-select-action) ; List actions

    (kb/leader-keys
      "oh" '(helm-command-prefix :which-key "Helm prefix")
      "oha" '(helm-apropos :which-key "Helm-apropos")

      ;; "bb" 'helm-mini
      ;; "ff" 'helm-find-files
      )
    )
#+end_src

** Helm swoop

#+begin_src emacs-lisp
  (use-package helm-swoop
    :disabled ; Conflicting bingings within PDF
    :custom
    (helm-swoop-split-with-multiple-windows nil) ; If this value is t, split window inside the current window
    (helm-swoop-split-direction 'split-window-vertically) ; Split direcion. 'split-window-vertically or 'split-window-horizontally
    (helm-swoop-speed-or-color t) ; If nil, you can slightly boost invoke speed in exchange for text color
    (helm-multi-swoop-edit-save t) ; Save buffer when helm-multi-swoop-edit complete
    :config
    (general-define-key ; From helm-swoop to helm-multi-swoop-all
     :keymaps 'helm-swoop-map
     "M-i" 'helm-multi-swoop-all-from-helm-swoop)

    (general-define-key ; Helm-swoop when in isearch
     :keymaps 'isearchp-mode-map
     "M-i" 'helm-swoop-from-isearch)

    (general-define-key ; When doing evil-search, hand the word over to helm-swoop
     :keymaps 'evil-motion-state-map
     "M-i" 'helm-swoop-from-evil-search)

    (general-define-key
     :keymaps '(helm-find-files-map helm-read-file-map)
     "C-<backspace>" 'helm-find-files-up-one-level) ; This overwrites auto expansion toggle?

    (kb/leader-keys
      "shs" '(helm-swoop :which-key "Helm-swoop")
      )
    )
#+end_src

** Helm-projectile

Projectile with Helm
#+begin_src emacs-lisp
  (use-package helm-projectile
    :after (helm projectile)
    ;; :hook (projectile-mode . helm-projectile-on)
    :custom
    (projectile-completion-system 'helm)
    (projectile-switch-project-action 'helm-projectile)
    )
#+end_src

** Helm-rg

Required for =helm-projectile-rg=
#+begin_src emacs-lisp
  (use-package helm-rg)
#+end_src

#+TITLE: Completion Frameworks


* Company
** Company itself

Point autocompletion backend
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook ((after-init . (lambda () ; Adds to appropriate hook depending on if called from emacsclient
                           (if (daemonp)
                               (add-hook 'server-after-make-frame-hook 'global-company-mode)
                             (add-hook 'after-init-hook 'global-company-mode))
                           ))
           (company-mode . company-tng-mode)
           (company-mode . evil-normalize-keymaps))
    :custom
    (company-show-numbers t) ; Number the candidates (use M-1, M-2 etc to select completions).
    (company-tooltip-offset-display nil)
    (company-tooltip-width-grow-only t)
    ;; (company-idle-delay 0.8) ; Trigger completion in a second
    (company-idle-delay 0.12) ; Trigger completion in a second
    (company-tooltip-delay 1) ; Wait a little until the tooltip shows
    ;; (company-minimum-prefix-length 2)
    (company-minimum-prefix-length 1)
    (company-require-match 'never)
    (company-selection-wrap-around t) ; Wrap when selecting canditates
    (company-tooltip-flip-when-above t)
    (company-tooltip-align-annotations t)
    (company-global-modes '(not erc-mode message-mode help-mode gud-mode))

    (company-dabbrev-other-buffers nil)
    (company-dabbrev-ignore-case nil)
    (company-dabbrev-downcase nil)
    ;; ;; These are the backends that Doom has active
    (company-backends '(company-dabbrev company-yasnippet company-ispell))
    :config
    (add-to-list 'company-backends 'company-capf) ; For org-roam
    ;; (setq company-backends '(company-capf))
    (add-to-list 'company-frontends 'company-tng-frontend) ; Company-tng to use tab to cycle through suggestions

    ;; (define-key company-active-map (kbd "RET") 'nil)
    ;; (define-key company-active-map [return] 'nil)
    ;; (define-key company-active-map (kbd "TAB") #'company-select-next)
    ;; (define-key company-active-map [tab] #'company-select-next)
    ;; (define-key company-active-map [backtab] #'company-select-previous)
    )
#+END_SRC

** Company-box

A pretty company autocomplete frontend.
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode)
    :custom
    (company-box-show-single-candidate 'always)
    (company-box-backends-colors nil)
    (company-box-max-candidates 50)
    (company-box-icons-alist 'company-box-icons-all-the-icons)
    (company-box-icons-all-the-icons
     (let ((all-the-icons-scale-factor 0.8))
       `((Unknown       . ,(all-the-icons-material "find_in_page"             :face 'all-the-icons-purple))
         (Text          . ,(all-the-icons-material "text_fields"              :face 'all-the-icons-green))
         (Method        . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
         (Function      . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
         (Constructor   . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
         (Field         . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
         (Variable      . ,(all-the-icons-material "adjust"                   :face 'all-the-icons-blue))
         (Class         . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
         (Interface     . ,(all-the-icons-material "settings_input_component" :face 'all-the-icons-red))
         (Module        . ,(all-the-icons-material "view_module"              :face 'all-the-icons-red))
         (Property      . ,(all-the-icons-material "settings"                 :face 'all-the-icons-red))
         (Unit          . ,(all-the-icons-material "straighten"               :face 'all-the-icons-red))
         (Value         . ,(all-the-icons-material "filter_1"                 :face 'all-the-icons-red))
         (Enum          . ,(all-the-icons-material "plus_one"                 :face 'all-the-icons-red))
         (Keyword       . ,(all-the-icons-material "filter_center_focus"      :face 'all-the-icons-red))
         (Snippet       . ,(all-the-icons-material "short_text"               :face 'all-the-icons-red))
         (Color         . ,(all-the-icons-material "color_lens"               :face 'all-the-icons-red))
         (File          . ,(all-the-icons-material "insert_drive_file"        :face 'all-the-icons-red))
         (Reference     . ,(all-the-icons-material "collections_bookmark"     :face 'all-the-icons-red))
         (Folder        . ,(all-the-icons-material "folder"                   :face 'all-the-icons-red))
         (EnumMember    . ,(all-the-icons-material "people"                   :face 'all-the-icons-red))
         (Constant      . ,(all-the-icons-material "pause_circle_filled"      :face 'all-the-icons-red))
         (Struct        . ,(all-the-icons-material "streetview"               :face 'all-the-icons-red))
         (Event         . ,(all-the-icons-material "event"                    :face 'all-the-icons-red))
         (Operator      . ,(all-the-icons-material "control_point"            :face 'all-the-icons-red))
         (TypeParameter . ,(all-the-icons-material "class"                    :face 'all-the-icons-red))
         (Template      . ,(all-the-icons-material "short_text"               :face 'all-the-icons-green))
         (ElispFunction . ,(all-the-icons-material "functions"                :face 'all-the-icons-red))
         (ElispVariable . ,(all-the-icons-material "check_circle"             :face 'all-the-icons-blue))
         (ElispFeature  . ,(all-the-icons-material "stars"                    :face 'all-the-icons-orange))
         (ElispFace     . ,(all-the-icons-material "format_paint"             :face 'all-the-icons-pink)))))
    )
#+END_SRC

** Company-dict

#+BEGIN_SRC emacs-lisp
  (use-package company-dict
    :custom
    (company-dict-dir (concat user-emacs-directory "dict/")) ; Where to look for dictionary files
    :config
    ;; Make company-dict aware of other minor modes' dictionaries by adding minor
    ;; mode symbols to company-dict-minor-mode-list
    (add-to-list 'company-backends 'company-dict)
    )
#+END_SRC
* Prescient

#+begin_src emacs-lisp
  (use-package prescient
    :after (ivy counsel swiper) ; Needs to be called after counsel so that counsel doesn't overwrite stuff
    :config
    (prescient-persist-mode)
    )
#+end_src
* Ivy
** Ivy itself

Some Ivy tips, taken from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][dotfiles/Emacs.org at master · daviwil/dotfiles · GitHub]]:
#+BEGIN_QUOTE
+ While in an Ivy minibuffer, you can search within the current results by using S-Space.
+ To quickly jump to an item in the minibuffer, use =C-‘= to get Avy line jump keys.
+ To see actions for the selected minibuffer item, use M-o and then press the action’s key.
+ Super useful: Use C-c C-o to open ivy-occur to open the search results in a separate buffer. From there you can click any item to perform the ivy action.
#+END_QUOTE

Ido but more powerful and eye-pleasing
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    ;; :hook (after-init . ivy-mode)
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("C-l" . ivy-alt-done)
                :map ivy-switch-buffer-map
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-d" . ivy-reverse-i-search-kill))
    :custom
    (ivy-extra-directories nil) ; Remove ./ and ../
    (ivy-use-virtual-buffers nil) ; Bookmarks and recent files in completion buffer
    (ivy-count-format "(%d/%d) ")
    (ivy-use-selectable-prompt t) ; Make prompt line selectable (as a candidate)
    (enable-recursive-minibuffers t) ; Allow minibuffer commands in minibuffer
    (ivy-height 17)
    (ivy-wrap t)
    (ivy-fixed-height-minibuffer t)
    (ivy-magic-slash-non-match-action nil) ; disable magic slash on non-match
    (ivy-virtual-abbreviate 'abbreviate)
    (ivy-on-del-error-function #'ignore) ; don't quit minibuffer on delete-error
    (ivy-sort-max-size 7500) ; Default is wayy too high - slows down in big projects
    (ivy-re-builders-alist
     '((counsel-esh-history . ivy--regex-fuzzy) ; Fuzzy findings for counsel-esh-history
       (t . ivy--regex-ignore-order))) ; Default
    :config
    (setf (alist-get 't ivy-format-functions-alist) #'ivy-format-function-line)

    ;; Faces
    (set-face-attribute 'ivy-minibuffer-match-face-1 nil :height 136)

    ;; Counsel changes a lot of ivy's state at startup; to control for that, we
    ;; need to load it as early as possible. Some packages (like `ivy-prescient')
    ;; require this.
    (require 'counsel nil t)
    )
#+END_SRC
** Ivy-prescient

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode)
    )
#+end_src
** Swiper

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :disabled ; Now use selectrum-swiper
    :custom
    (swiper-goto-start-of-match t)
    :config
    (general-define-key (kbd "C-s") 'counsel-grep-or-swiper) ; Depending on length of file
    )
#+END_SRC

** Counsel

Remapping original commands to an Ivy-esque version
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :demand t
    :after ivy
    :bind (("M-x" . 'counsel-M-x)
           ("C-x C-f" . 'counsel-find-file)
           ("C-x b" . 'counsel-switch-buffer)
           ("C-x b" . 'counsel-switch-buffer)
           ("C-h t" . 'counsel-load-theme) ; Replace help-with-tutorial
           ("C-c g" . 'counsel-git)
           ("C-c j" . 'counsel-git-grep)
           ("C-c k" . 'counsel-ag)
           ("C-x l" . 'counsel-locate)
           ;; ("C-h f" . 'counsel-describe-function)
           ;; ("C-h v" . 'counsel-describe-variable)
           ("C-h o" . 'counsel-describe-symbol)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           )
    :custom
    (counsel-describe-function-function #'helpful-function)
    (counsel-describe-symbol-function #'helpful-symbol)
    (counsel-describe-variable-function #'helpful-variable)
    (ivy-initial-inputs-alist nil)         ; Remove "^" when entering a ivy completion buffer
    (counsel-outline-face-style 'org)      ; Have faces match org's
    (counsel-outline-path-separator " / ") ; More distinct outline paths
    :config

    (kb/leader-keys
      "ff" '(counsel-find-file :which-key "Find file")
      "fF" '(counsel-file-jump :which-key "Fuzzy find file")
      "fr" '(counsel-recentf :which-key "Recent files")

      "hf" '(counsel-describe-function :which-key "Desc func")
      "hv" '(counsel-describe-variable :which-key "Desc var")
      "ho" '(counsel-describe-symbol :which-key "Desc sym")
      "ht" '(counsel-load-theme :which-key "Change theme")

      "bc" '(counsel-switch-buffer :which-key "Counsel switch")

      "mm" '(counsel-bookmark :which-key "Go to bookmark")
      "ms" '(bookmark-set :which-key "Set bookmark")

      "iy" '(counsel-yank-pop :which-key "Paste")
      )
    )
#+END_SRC

** Counsel-projectile

Use Ivy/Counsel with projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :after (counsel projectile)
    :hook (counsel-mode . counsel-projectile-mode)
    :config

    ;; ;; Hydra menu
    ;; (pretty-hydra-define hydra:counsel-projectile
    ;;   (:color blue :hint t :foreign-keys run :quit-key "q" :exit t)
    ;;   ("Projectile"
    ;;    (("i" projectile-invalidate-cache :color red)
    ;;     ("n" projectile-add-known-project))
    ;;    "Buffers"
    ;;    (("b" counsel-projectile-switch-to-buffer)
    ;;     ("K" projectile-kill-buffers)
    ;;     ("S" projectile-save-project-buffers))
    ;;    "Find"
    ;;    (("d" counsel-projectile-find-dir)
    ;;     ("D" projectile-dired)
    ;;     ("f" counsel-projectile-find-file)
    ;;     ("p" counsel-projectile-switch-project))
    ;;    "Search"
    ;;    (("r" projectile-replace)
    ;;     ("R" projectile-replace-regexp)
    ;;     ("s" counsel-projectile-rg))
    ;;    ))

    ;; (kb/leader-keys
    ;;   "p" '(:ignore t :which-key "Projectile")
    ;;   "p?" '(hydra:counsel-projectile/body :which-key "Help menu")
    ;;   "pf"  'counsel-projectile-find-file
    ;;   "pp"  'counsel-projectile-switch-project
    ;;   "ps"  'counsel-projectile-rg
    ;;   "pb"  'counsel-projectile-switch-to-buffer
    ;;   "pD"  'projectile-dired
    ;;   ;; "pc"  'projectile-compile-project
    ;;   )
    )
#+END_SRC
** Flx

Allow for fuzzy searching (if in =ivy-re-builders-alist=)
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :defer t  ; Ivy loads this when needed
    :custom
    (ivy-flx-limit 10000)
    )
#+END_SRC
** Ivy-rich

Better Ivy-interface
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after ivy
    :requires ivy
    :hook (after-init . ivy-rich-mode)
    :preface
    ;; Taken from https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#ivy
    (defun kb/ivy-rich-describe-variable-value (candidate)
      "Return the value of the variable in a `counsel-describe-variable' session."
      (let* ((symbol (intern candidate))
             (value (and (boundp symbol) (symbol-value symbol)))
             (print-level 3))
        (replace-regexp-in-string
         "[\n\t\^[\^M\^@\^G]" " "
         (cond ((booleanp value)
                (propertize (format "%s" value) 'face (if (null value) 'shadow 'success)))
               ((keymapp value)
                (propertize "<keymap>" 'face 'font-lock-type-face))
               ((listp value)
                (prin1-to-string value))
               ((stringp value)
                (propertize (format "%S" value) 'face 'font-lock-string-face))
               ((symbolp value)
                (propertize (format "'%s" value) 'face 'font-lock-function-name-face))
               ((format "%s" value)))
         t)))
    (defun kb/ivy-rich-switch-buffer-size (candidate)
      "Return the buffer size in a `ivy-switch-buffer' session."
      (with-current-buffer
          (get-buffer candidate)
        (let ((size (buffer-size)))
          (cond
           ((> size 1000000) (format "%.1fM" (/ size 1000000.0)))
           ((> size 1000) (format "%.1fk" (/ size 1000.0)))
           (t (format "%d" size))))))
    :custom
    (ivy-rich-path-style 'abbrev) ; Abbreviate file names

    :config
    ;; Change transformer to show variable values
    (setq-default
     ivy-rich-display-transformers-list
     (plist-put ivy-rich-display-transformers-list
                'counsel-M-x
                '(:columns
                  ((counsel-M-x-transformer (:width .2))
                   (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
                  :delimiter "  "))
     ivy-rich-display-transformers-list
     (plist-put ivy-rich-display-transformers-list
                'counsel-describe-function
                '(:columns
                  ((counsel-describe-function-transformer (:width .2))
                   (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
                  :delimiter "  "))
     ivy-rich-display-transformers-list
     (plist-put ivy-rich-display-transformers-list
                'counsel-describe-variable
                '(:columns
                  ((counsel-describe-variable-transformer (:width .2))
                   (kb/ivy-rich-describe-variable-value (:width .2))
                   (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face)))
                  :delimiter "  "))
     ivy-rich-display-transformers-list
     (plist-put ivy-rich-display-transformers-list
                'ivy-switch-buffer
                '(:columns
                  ((ivy-switch-buffer-transformer (:width .2))
                   (kb/ivy-rich-switch-buffer-size (:align left :face shadow :width 8))
                   (ivy-rich-switch-buffer-major-mode (:face warning :width 22))
                   (ivy-rich-switch-buffer-project (:face success :width 34))
                   (ivy-rich-switch-buffer-path))
                  :delimiter "  "
                  :predicate (lambda (cand) (get-buffer cand))))
     ivy-rich-display-transformers-list
     (plist-put ivy-rich-display-transformers-list
                'package-install
                '(:columns
                  ((ivy-rich-candidate (:width .2))
                   (ivy-rich-package-version (:face shadow :width 13))
                   (ivy-rich-package-archive-summary (:face font-lock-builtin-face :width 5))
                   (ivy-rich-package-install-summary (:face font-lock-doc-face)))
                  :delimiter "  ")))

    (ivy-rich-set-display-transformer)
    )
#+END_SRC
** Amx

Show keybinds in M-x
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :config
    (amx-mode)
    )
#+END_SRC

** Flx

Fuzzy finding in Ivy. /Incompatible with presient/ (other Doom flag)
 - Set from setting ivy-re-builders-alist to ivy--regex-fuzzy
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :custom
    (ivy-flx-limit 10000)
    )
#+END_SRC

** All-the-icons-ivy-rich

A version of all-the-icons but compatible with ivy-rich
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
    :after (ivy-rich)
    :custom
    (all-the-icons-ivy-rich-icon-size 0.9) ; The icon size
    ;; Slow Rendering
    ;; If you experience a slow down in performance when rendering multiple icons simultaneously,
    ;; you can try setting the following variable
    (inhibit-compacting-font-caches t)
    :config
    (all-the-icons-ivy-rich-mode t)
    )
#+END_SRC

* Trying out selectrum
** Selectrum

#+begin_src emacs-lisp
  (use-package selectrum
    :custom
    ;; Change backends
    (amx-backend 'selectrum)
    (projectile-completion-system 'default)
    (org-roam-completion-system 'default)
    :config
    (selectrum-mode)
    )
#+end_src
** Selectrum-presient

#+begin_src emacs-lisp
  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode)
    )
#+end_src
** Selectrum custom functions
*** Helper functions

Helper function to add action support
#+begin_src emacs-lisp
  (cl-defmacro selectrum-make-action ((&rest args) &body body)
    (declare (indent 1))
    `(lambda ()
       (interactive)
       (put 'quit 'error-message "")
       (run-at-time nil nil
                    (lambda (,@args)
                      (put 'quit 'error-message "Quit")
                      (with-demoted-errors "Error: %S"
                        ,@body))
                    ,@(seq-take
                       `((if selectrum--refined-candidates (nth selectrum--current-candidate-index selectrum--refined-candidates))
                         selectrum--refined-candidates
                         (selectrum-get-current-input)
                         selectrum--current-candidate-index)
                       (length args)))
       (abort-recursive-edit)))
#+end_src
*** Selectrum-swiper

#+begin_src emacs-lisp
  (defvar selectrum-swiper-history nil "Submission history for `selectrum-swiper'.")
  (autoload 'selectrum-read "selectrum")

  (defun selectrum-swiper ()
    "Search for a matching line and jump to the beginning of its text.  Obeys narrowing."
    (interactive)
    (let* ((selectrum-should-sort-p nil)
           ;; Get the current line number for determining the travel distance.
           (current-line-number (line-number-at-pos (point) t))

           (default-cand-and-line-choices
             (cl-loop
              with minimum-line-number = (line-number-at-pos (point-min) t)
              with buffer-text-lines = (split-string (buffer-string) "\n")
              with number-format = (concat
                                    "L%0"
                                    (number-to-string
                                     (length (number-to-string
                                              (length buffer-text-lines))))
                                    "d: ")

              with closest-candidate = nil
              with distance-to-current-line = nil
              with smallest-distance-to-current-line = most-positive-fixnum

              with formatted-line = nil
              with formatted-lines = nil

              for txt in buffer-text-lines
              for num = minimum-line-number then (1+ num)
              unless (string-empty-p txt) ; Just skip empty lines.
              do
              (setq formatted-line (propertize
                                    txt
                                    'selectrum-candidate-display-prefix
                                    (propertize
                                     (format number-format num)
                                     'face 'completions-annotations)
                                    'line-num num)
                    distance-to-current-line (abs (- current-line-number num)))
              (push formatted-line formatted-lines)
              (when (< distance-to-current-line
                       smallest-distance-to-current-line)
                (setq smallest-distance-to-current-line distance-to-current-line
                      closest-candidate formatted-line))
              finally return (cons closest-candidate
                                   (nreverse formatted-lines))))
           (default-cand (car default-cand-and-line-choices))
           (line-choices (cdr default-cand-and-line-choices))

           ;; Get the matching line.
           (chosen-line (selectrum-read "Jump to matching line: "
                                        line-choices
                                        :default-candidate default-cand
                                        :history 'selectrum-swiper-history
                                        :require-match t
                                        :no-move-default-candidate t))

           (chosen-line-number (get-text-property 0 'line-num chosen-line)))

      (push-mark (point) t)
      (forward-line (- chosen-line-number current-line-number))
      (beginning-of-line-text 1))
    )
#+end_src

Unfold headlines when searching with selectrum-swiper
#+begin_src emacs-lisp
  (defun org:show-subtree-headlines ()
    "Show headlines surrounding point."
    (save-excursion
      (let ((points nil) (count 0))
        (unless (org-at-heading-p) (org-back-to-heading t))
        (push (point) points)
        (while (org-up-heading-safe)
          (push (point) points))
        (dolist (point points)
          (goto-char point)
          (when (org:heading-folded-p)
            (outline-toggle-children))))))

  (defun selectrum:reveal-if-in-org-folds (orig-fn &rest args)
    (prog1 (apply orig-fn args)
      (when (eq major-mode 'org-mode)
        (org:show-subtree-headlines))))

  (advice-add #'selectrum-swiper :around #'selectrum:reveal-if-in-org-folds)
#+end_src
*** Selectrum-imenu

#+begin_src emacs-lisp
  (defvar selectrum-imenu+ nil)

  (defun selectrum-imenu ()
    "Choose from `imenu' just like `counsel-imenu'."
    (interactive)
    (require 'imenu)
    (let* ((selectrum-should-sort-p nil)
           (candidates (let* ((imenu-auto-rescan t)
                              (items (imenu--make-index-alist t)))
                         ;; remove *Rescan*
                         (setq items (delete (assoc "*Rescan*" items) items))
                         ;; special mode
                         (when (eq major-mode 'emacs-lisp-mode)
                           (let ((fns (cl-remove-if #'listp items :key #'cdr)))
                             (if fns (setq items (nconc (cl-remove-if #'nlistp items :key #'cdr) `(("Functions" ,@fns)))))))
                         ;; refine
                         (cl-labels ((get-candidates (alist &optional prefix)
                                                     (cl-mapcan
                                                      (lambda (elm)
                                                        (if (imenu--subalist-p elm)
                                                            (get-candidates
                                                             (cl-loop for (e . v) in (cdr elm)
                                                                      collect (cons e (if (integerp v) (copy-marker v) v)))
                                                             (concat prefix (if prefix ".") (car elm)))
                                                          (let ((key (concat (if prefix (concat (propertize prefix 'face 'font-lock-keyword-face) ": "))
                                                                             (car elm))))
                                                            (list (cons key (cons key (if (overlayp (cdr elm)) (overlay-start (cdr elm)) (cdr elm))))))))
                                                      alist)))
                           (setq items (get-candidates items)))
                         ;; sort
                         (cl-sort items #'string< :key #'car)))
           (cand (completing-read "Imenu: " (mapcar #'car candidates) nil t nil selectrum-imenu+)))
      (imenu (cdr (cl-find cand candidates :test #'string= :key #'car)))))
#+end_src
*** Selectrum-rg

#+begin_src emacs-lisp
  (defvar selectrum-rg-history nil)

  (defun selectrum-rg ()
    "Search like 'counsel-rg'.

  Default, search for current directory, if the input begin with 'p ' then
  will search current project, if begin with 'o ' then will search org-directory.

  'C-c C-o' to pop the rg.el's Occur view, make sure package `rg' is installed."
    (interactive)
    (unless (executable-find "rg")
      (user-error "ripgrep must be installed."))
    (let* (type
           input
           (dir default-directory)
           (word (if (use-region-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (let* ((sym (symbol-at-point)) (symn (symbol-name sym)))
                     (if (and sym (> 50 (length symn) 3)) symn nil))))
           (command (if (memq system-type '(ms-dos windows-nt))
                        "rg -M 240 --with-filename --no-heading --line-number --color never -S -e <R> ."
                      "rg -M 240 --with-filename --no-heading --line-number --color never -S -e <R>"))
           (cands (lambda (in)
                    (let ((msg)
                          (prop (lambda (cs)
                                  (mapcar (lambda (c)
                                            (when (string-match "\\`\\([^:]+\\):\\([^:]+\\):" c)
                                              (add-face-text-property (match-beginning 1) (match-end 1) 'compilation-info nil c)
                                              (add-face-text-property (match-beginning 2) (match-end 2) '(:underline t :inherit compilation-line-number) nil c))
                                            c)
                                          cs))))
                      (cond
                       ;; search current project
                       ((string-prefix-p "p " in)
                        (cond ((not (project-current))
                               (setq msg "This is not in a project."))
                              ((< (length in) 5)
                               (setq msg "Search in current project, input should more than 3."))
                              (t
                               (setq type 'project)
                               (setq dir (cdr (project-current)))
                               (setq in (cl-subseq in 2)))))
                       ;; search org-directory
                       ((string-prefix-p "o " in)
                        (cond ((not (file-exists-p org-directory))
                               (setq msg "Org Directory not exist?"))
                              ((< (length in) 5)
                               (setq msg "Search in org-directory, input should more than 3."))
                              (t
                               (setq type 'org)
                               (setq dir org-directory)
                               (setq in (cl-subseq in 2)))))
                       ;; search current directory
                       (t (if (< (length in) 3)
                              (setq msg "Input should more than 3."))
                          (setq type nil)
                          (setq dir default-directory)))
                      ;; take space in INPUT as .*?
                      ;; take m-space as [[:blank:]]
                      (setq input
                            (replace-regexp-in-string
                             " +" "[[:blank:]]"
                             (replace-regexp-in-string
                              "\\([^ ]\\) \\([^ ]\\)" "\\1.+?\\2"
                              (string-trim in))))
                      (if msg
                          (prog1 nil
                            (setq-local selectrum-refine-candidates-function
                                        (lambda (_ __) (list msg))))
                        (kill-local-variable 'selectrum-refine-candidates-function)
                        (let* ((default-directory dir)
                               (cs (split-string
                                    (shell-command-to-string (grep-expand-template command input)) "\n")))
                          `((candidates . ,(funcall prop cs))
                            (input . ,input)))))))
           (cand (let ((selectrum-should-sort-p nil)
                       (selectrum-minibuffer-bindings
                        (append
                         selectrum-minibuffer-bindings
                         `(("C-c C-o" . ,(selectrum-make-action (c)
                                           ;; use rg.el to show the results in Occur buffer
                                           (require 'rg)
                                           (require 'compile)
                                           ;; jump to current candidate in the *rg* buffer.
                                           ;; rg implemented with `compile', so I make it work like below.
                                           ;; let-bound method not working, unkown reason.
                                           (let ((old-compilation-finish-functions compilation-finish-functions))
                                             (setq compilation-finish-functions
                                                   (list
                                                    (lambda (_a _b)
                                                      (unwind-protect
                                                          (progn
                                                            (pop-to-buffer (current-buffer))
                                                            (when (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" c)
                                                              (let ((file-name (match-string-no-properties 1 c))
                                                                    (line-number (match-string-no-properties 2 c)))
                                                                (if rg-group-result
                                                                    (progn
                                                                      (re-search-forward (format "^File: %s" file-name) nil t)
                                                                      (re-search-forward (format "^ *%s" line-number) nil t)
                                                                      (re-search-forward input (point-at-eol) t))
                                                                  (re-search-forward (format "%s:%s:" file-name line-number) nil t)
                                                                  (re-search-forward input (point-at-eol) t)))))
                                                        (setq compilation-finish-functions old-compilation-finish-functions)))))
                                             ;; dispatch to rg.el search.
                                             (cond ((eq type 'project) (rg-project input "*"))
                                                   (t                  (rg input "*" dir))))))))))
                   (selectrum-read "rg: " cands
                                   :initial-input word
                                   :may-modify-candidates t
                                   :history 'selectrum-rg-history
                                   :require-match t))))
      (if (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" cand)
          (let ((file-name (match-string-no-properties 1 cand))
                (line-number (match-string-no-properties 2 cand)))
            (xref-push-marker-stack) ; use M-, to go back!
            (find-file (expand-file-name file-name dir))
            (goto-char (point-min))
            (forward-line (1- (string-to-number line-number)))
            (re-search-forward input (point-at-eol) t)
            (recenter))
        (message "Bad candidate?"))))
#+end_src
*** Selectrum-yank-pop

#+begin_src emacs-lisp
  (defun selectrum-yank-pop (&optional arg)
    "Call `yank-pop' with ARG when appropriate, or offer completion."
    (interactive "*P")
    (if arg (yank-pop arg)
      (let* ((old-last-command last-command)
             (selectrum-should-sort-p nil)
             (enable-recursive-minibuffers t)
             (text (completing-read
                    "Yank: "
                    (cl-remove-duplicates
                     kill-ring :test #'string= :from-end t)
                    nil t nil nil))
             ;; Find `text' in `kill-ring'.
             (pos (cl-position text kill-ring :test #'string=))
             ;; Translate relative to `kill-ring-yank-pointer'.
             (n (+ pos (length kill-ring-yank-pointer))))
        (unless (string= text (current-kill n t))
          (error "Could not setup for `current-kill'"))
        ;; Restore `last-command' over Selectrum commands.
        (setq last-command old-last-command)
        ;; Delegate to `yank-pop' if appropriate or just insert.
        (if (eq last-command 'yank)
            (yank-pop n) (insert-for-yank text)))))
#+end_src
*** Selectrum-isearch-history

#+begin_src emacs-lisp
  (defun selectrum-isearch--switch-direction-on-fail ()
    (when (isearch-fail-pos)
      (isearch-repeat-backward)))

  (defun selectrum-isearch-history-from-isearch ()
    (interactive)
    (with-isearch-suspended
     (let* ((history (if isearch-regexp
                         regexp-search-ring
                       search-ring))
            (selectrum-should-sort-p nil)
            (x (completing-read "Isearch History: " history)))
       (setq isearch-new-string x)
       (setq isearch-new-message x)))
    (selectrum-isearch--switch-direction-on-fail))

  (defun selectrum-isearch-history ()
    (interactive)
    (let* ((history (append (list (car search-ring)
                                  (car regexp-search-ring))
                            (cdr search-ring)
                            (cdr regexp-search-ring)))
           (selectrum-should-sort-p nil)
           (x (completing-read "Isearch History: " history)))
      (isearch-forward (member x regexp-search-ring) t)
      (setq isearch-yank-flag t)
      (isearch-process-search-string
       x
       (mapconcat 'isearch-text-char-description x ""))
      (selectrum-isearch--switch-direction-on-fail)))
#+end_src
** Keybinds

#+begin_src emacs-lisp
  (general-define-key
   "C-s" 'selectrum-swiper

   "C-h f" 'describe-function
   "C-h v" 'describe-variable
   )

  (general-define-key
   :keymaps 'isearch-mode-map
   "C-c r" 'selectrum-isearch-history-from-isearch ; Drop back into isearch history menu
   )

  (kb/leader-keys
    "sr" 'selectrum-rg
    "fo" 'selectrum-imenu
    "fi" 'selectrum-isearch-history
    "iy" 'selectrum-yank-pop
    )
#+end_src

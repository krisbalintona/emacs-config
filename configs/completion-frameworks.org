#+TITLE: Completion Frameworks

* Selctrum

** Selectrum itself  

Advanced =complete-read=
#+begin_src emacs-lisp
  (use-package selectrum
    :hook (emacs-startup . selectrum-mode)
    :custom
    ;; Change backends
    (amx-backend 'selectrum)
    (projectile-completion-system 'default)
    (org-roam-completion-system 'default)
    :config
    ;; Selectrum minibuffer faces
    (set-face-attribute 'selectrum-current-candidate nil :inherit '(ivy-current-match all-the-icons-ivy-rich-icon-face))
    (set-face-attribute 'selectrum-primary-highlight nil :inherit 'ivy-minibuffer-match-face-2)
    (set-face-attribute 'selectrum-secondary-highlight nil :inherit 'ivy-minibuffer-match-face-3)
    )
#+end_src

*** Selectrum custom functions

**** Helper functions

Helper function to add action support
#+begin_src emacs-lisp
  (cl-defmacro selectrum-make-action ((&rest args) &body body)
    (declare (indent 1))
    `(lambda ()
       (interactive)
       (put 'quit 'error-message "")
       (run-at-time nil nil
                    (lambda (,@args)
                      (put 'quit 'error-message "Quit")
                      (with-demoted-errors "Error: %S"
                        ,@body))
                    ,@(seq-take
                       `((if selectrum--refined-candidates (nth selectrum--current-candidate-index selectrum--refined-candidates))
                         selectrum--refined-candidates
                         (selectrum-get-current-input)
                         selectrum--current-candidate-index)
                       (length args)))
       (abort-recursive-edit)))
#+end_src

**** Selectrum-swiper

#+begin_src emacs-lisp
  (defvar selectrum-swiper-history nil "Submission history for `selectrum-swiper'.")
  (autoload 'selectrum-read "selectrum")

  (defun selectrum-swiper ()
    "Search for a matching line and jump to the beginning of its text.  Obeys narrowing."
    (interactive)
    (let* ((selectrum-should-sort-p nil)
           ;; Get the current line number for determining the travel distance.
           (current-line-number (line-number-at-pos (point) t))

           (default-cand-and-line-choices
             (cl-loop
              with minimum-line-number = (line-number-at-pos (point-min) t)
              with buffer-text-lines = (split-string (buffer-string) "\n")
              with number-format = (concat
                                    "L%0"
                                    (number-to-string
                                     (length (number-to-string
                                              (length buffer-text-lines))))
                                    "d: ")

              with closest-candidate = nil
              with distance-to-current-line = nil
              with smallest-distance-to-current-line = most-positive-fixnum

              with formatted-line = nil
              with formatted-lines = nil

              for txt in buffer-text-lines
              for num = minimum-line-number then (1+ num)
              unless (string-empty-p txt) ; Just skip empty lines.
              do
              (setq formatted-line (propertize
                                    txt
                                    'selectrum-candidate-display-prefix
                                    (propertize
                                     (format number-format num)
                                     'face 'completions-annotations)
                                    'line-num num)
                    distance-to-current-line (abs (- current-line-number num)))
              (push formatted-line formatted-lines)
              (when (< distance-to-current-line
                       smallest-distance-to-current-line)
                (setq smallest-distance-to-current-line distance-to-current-line
                      closest-candidate formatted-line))
              finally return (cons closest-candidate
                                   (nreverse formatted-lines))))
           (default-cand (car default-cand-and-line-choices))
           (line-choices (cdr default-cand-and-line-choices))

           ;; Get the matching line.
           (chosen-line (selectrum-read "Jump to matching line: "
                                        line-choices
                                        :default-candidate default-cand
                                        :history 'selectrum-swiper-history
                                        :require-match t
                                        :no-move-default-candidate t))

           (chosen-line-number (get-text-property 0 'line-num chosen-line)))

      (push-mark (point) t)
      (forward-line (- chosen-line-number current-line-number))
      (beginning-of-line-text 1))
    )
#+end_src

Unfold headlines when searching with selectrum-swiper
#+begin_src emacs-lisp
  (defun org:show-subtree-headlines ()
    "Show headlines surrounding point."
    (save-excursion
      (let ((points nil) (count 0))
        (unless (org-at-heading-p) (org-back-to-heading t))
        (push (point) points)
        (while (org-up-heading-safe)
          (push (point) points))
        (dolist (point points)
          (goto-char point)
          (when (org:heading-folded-p)
            (outline-toggle-children))))))

  (defun selectrum:reveal-if-in-org-folds (orig-fn &rest args)
    (prog1 (apply orig-fn args)
      (when (eq major-mode 'org-mode)
        (org:show-subtree-headlines))))

  (advice-add #'selectrum-swiper :around #'selectrum:reveal-if-in-org-folds)
#+end_src

**** Selectrum-imenu

#+begin_src emacs-lisp
  (defvar selectrum-imenu+ nil)

  (defun selectrum-imenu ()
    "Choose from `imenu' just like `counsel-imenu'."
    (interactive)
    (require 'imenu)
    (let* ((selectrum-should-sort-p nil)
           (candidates (let* ((imenu-auto-rescan t)
                              (items (imenu--make-index-alist t)))
                         ;; remove *Rescan*
                         (setq items (delete (assoc "*Rescan*" items) items))
                         ;; special mode
                         (when (eq major-mode 'emacs-lisp-mode)
                           (let ((fns (cl-remove-if #'listp items :key #'cdr)))
                             (if fns (setq items (nconc (cl-remove-if #'nlistp items :key #'cdr) `(("Functions" ,@fns)))))))
                         ;; refine
                         (cl-labels ((get-candidates (alist &optional prefix)
                                                     (cl-mapcan
                                                      (lambda (elm)
                                                        (if (imenu--subalist-p elm)
                                                            (get-candidates
                                                             (cl-loop for (e . v) in (cdr elm)
                                                                      collect (cons e (if (integerp v) (copy-marker v) v)))
                                                             (concat prefix (if prefix ".") (car elm)))
                                                          (let ((key (concat (if prefix (concat (propertize prefix 'face 'font-lock-keyword-face) ": "))
                                                                             (car elm))))
                                                            (list (cons key (cons key (if (overlayp (cdr elm)) (overlay-start (cdr elm)) (cdr elm))))))))
                                                      alist)))
                           (setq items (get-candidates items)))
                         ;; sort
                         (cl-sort items #'string< :key #'car)))
           (cand (completing-read "Imenu: " (mapcar #'car candidates) nil t nil selectrum-imenu+)))
      (imenu (cdr (cl-find cand candidates :test #'string= :key #'car)))))
#+end_src

**** Selectrum-rg

#+begin_src emacs-lisp
  (defvar selectrum-rg-history nil)

  (defun selectrum-rg ()
    "Search like 'counsel-rg'.

  Default, search for current directory, if the input begin with 'p ' then
  will search current project, if begin with 'o ' then will search org-directory.

  'C-c C-o' to pop the rg.el's Occur view, make sure package `rg' is installed."
    (interactive)
    (unless (executable-find "rg")
      (user-error "ripgrep must be installed."))
    (let* (type
           input
           (dir default-directory)
           (word (if (use-region-p)
                     (buffer-substring-no-properties (region-beginning) (region-end))
                   (let* ((sym (symbol-at-point)) (symn (symbol-name sym)))
                     (if (and sym (> 50 (length symn) 3)) symn nil))))
           (command (if (memq system-type '(ms-dos windows-nt))
                        "rg -M 240 --with-filename --no-heading --line-number --color never -S -e <R> ."
                      "rg -M 240 --with-filename --no-heading --line-number --color never -S -e <R>"))
           (cands (lambda (in)
                    (let ((msg)
                          (prop (lambda (cs)
                                  (mapcar (lambda (c)
                                            (when (string-match "\\`\\([^:]+\\):\\([^:]+\\):" c)
                                              (add-face-text-property (match-beginning 1) (match-end 1) 'compilation-info nil c)
                                              (add-face-text-property (match-beginning 2) (match-end 2) '(:underline t :inherit compilation-line-number) nil c))
                                            c)
                                          cs))))
                      (cond
                       ;; search current project
                       ((string-prefix-p "p " in)
                        (cond ((not (project-current))
                               (setq msg "This is not in a project."))
                              ((< (length in) 5)
                               (setq msg "Search in current project, input should more than 3."))
                              (t
                               (setq type 'project)
                               (setq dir (cdr (project-current)))
                               (setq in (cl-subseq in 2)))))
                       ;; search org-directory
                       ((string-prefix-p "o " in)
                        (cond ((not (file-exists-p org-directory))
                               (setq msg "Org Directory not exist?"))
                              ((< (length in) 5)
                               (setq msg "Search in org-directory, input should more than 3."))
                              (t
                               (setq type 'org)
                               (setq dir org-directory)
                               (setq in (cl-subseq in 2)))))
                       ;; search current directory
                       (t (if (< (length in) 3)
                              (setq msg "Input should more than 3."))
                          (setq type nil)
                          (setq dir default-directory)))
                      ;; take space in INPUT as .*?
                      ;; take m-space as [[:blank:]]
                      (setq input
                            (replace-regexp-in-string
                             " +" "[[:blank:]]"
                             (replace-regexp-in-string
                              "\\([^ ]\\) \\([^ ]\\)" "\\1.+?\\2"
                              (string-trim in))))
                      (if msg
                          (prog1 nil
                            (setq-local selectrum-refine-candidates-function
                                        (lambda (_ __) (list msg))))
                        (kill-local-variable 'selectrum-refine-candidates-function)
                        (let* ((default-directory dir)
                               (cs (split-string
                                    (shell-command-to-string (grep-expand-template command input)) "\n")))
                          `((candidates . ,(funcall prop cs))
                            (input . ,input)))))))
           (cand (let ((selectrum-should-sort-p nil)
                       (selectrum-minibuffer-bindings
                        (append
                         selectrum-minibuffer-bindings
                         `(("C-c C-o" . ,(selectrum-make-action (c)
                                           ;; use rg.el to show the results in Occur buffer
                                           (require 'rg)
                                           (require 'compile)
                                           ;; jump to current candidate in the *rg* buffer.
                                           ;; rg implemented with `compile', so I make it work like below.
                                           ;; let-bound method not working, unkown reason.
                                           (let ((old-compilation-finish-functions compilation-finish-functions))
                                             (setq compilation-finish-functions
                                                   (list
                                                    (lambda (_a _b)
                                                      (unwind-protect
                                                          (progn
                                                            (pop-to-buffer (current-buffer))
                                                            (when (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" c)
                                                              (let ((file-name (match-string-no-properties 1 c))
                                                                    (line-number (match-string-no-properties 2 c)))
                                                                (if rg-group-result
                                                                    (progn
                                                                      (re-search-forward (format "^File: %s" file-name) nil t)
                                                                      (re-search-forward (format "^ *%s" line-number) nil t)
                                                                      (re-search-forward input (point-at-eol) t))
                                                                  (re-search-forward (format "%s:%s:" file-name line-number) nil t)
                                                                  (re-search-forward input (point-at-eol) t)))))
                                                        (setq compilation-finish-functions old-compilation-finish-functions)))))
                                             ;; dispatch to rg.el search.
                                             (cond ((eq type 'project) (rg-project input "*"))
                                                   (t                  (rg input "*" dir))))))))))
                   (selectrum-read "rg: " cands
                                   :initial-input word
                                   :may-modify-candidates t
                                   :history 'selectrum-rg-history
                                   :require-match t))))
      (if (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" cand)
          (let ((file-name (match-string-no-properties 1 cand))
                (line-number (match-string-no-properties 2 cand)))
            (xref-push-marker-stack) ; use M-, to go back!
            (find-file (expand-file-name file-name dir))
            (goto-char (point-min))
            (forward-line (1- (string-to-number line-number)))
            (re-search-forward input (point-at-eol) t)
            (recenter))
        (message "Bad candidate?"))))
#+end_src

**** Selectrum-yank-pop

#+begin_src emacs-lisp
  (defun selectrum-yank-pop (&optional arg)
    "Call `yank-pop' with ARG when appropriate, or offer completion."
    (interactive "*P")
    (if arg (yank-pop arg)
      (let* ((old-last-command last-command)
             (selectrum-should-sort-p nil)
             (enable-recursive-minibuffers t)
             (text (completing-read
                    "Yank: "
                    (cl-remove-duplicates
                     kill-ring :test #'string= :from-end t)
                    nil t nil nil))
             ;; Find `text' in `kill-ring'.
             (pos (cl-position text kill-ring :test #'string=))
             ;; Translate relative to `kill-ring-yank-pointer'.
             (n (+ pos (length kill-ring-yank-pointer))))
        (unless (string= text (current-kill n t))
          (error "Could not setup for `current-kill'"))
        ;; Restore `last-command' over Selectrum commands.
        (setq last-command old-last-command)
        ;; Delegate to `yank-pop' if appropriate or just insert.
        (if (eq last-command 'yank)
            (yank-pop n) (insert-for-yank text)))))
#+end_src

**** Selectrum-isearch-history

#+begin_src emacs-lisp
  (defun selectrum-isearch--switch-direction-on-fail ()
    (when (isearch-fail-pos)
      (isearch-repeat-backward)))

  (defun selectrum-isearch-history-from-isearch ()
    (interactive)
    (with-isearch-suspended
     (let* ((history (if isearch-regexp
                         regexp-search-ring
                       search-ring))
            (selectrum-should-sort-p nil)
            (x (completing-read "Isearch History: " history)))
       (setq isearch-new-string x)
       (setq isearch-new-message x)))
    (selectrum-isearch--switch-direction-on-fail))

  (defun selectrum-isearch-history ()
    (interactive)
    (let* ((history (append (list (car search-ring)
                                  (car regexp-search-ring))
                            (cdr search-ring)
                            (cdr regexp-search-ring)))
           (selectrum-should-sort-p nil)
           (x (completing-read "Isearch History: " history)))
      (isearch-forward (member x regexp-search-ring) t)
      (setq isearch-yank-flag t)
      (isearch-process-search-string
       x
       (mapconcat 'isearch-text-char-description x ""))
      (selectrum-isearch--switch-direction-on-fail)))
#+end_src

*** Keybinds

#+begin_src emacs-lisp
  (general-define-key
   "C-h f" 'describe-function
   "C-h v" 'describe-variable
   )

  (general-define-key
   :keymaps 'isearch-mode-map
   "C-c r" 'selectrum-isearch-history-from-isearch ; Drop back into isearch history menu
   )

  ;; Disabled now because I found consult.el!
  ;; (kb/leader-keys
  ;;   "sr" 'selectrum-rg
  ;;   "ss" 'selectrum-swiper
  ;;   "so" 'selectrum-imenu
  ;;   "si" 'selectrum-isearch-history

  ;;   "bb" 'switch-to-buffer

  ;;   "iy" 'selectrum-yank-pop
  ;;   )
#+end_src

** Selectrum-presient

#+begin_src emacs-lisp
  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode)
    )
#+end_src

** Embark

Allow an equivalent to =ivy-actions= to regular =comlete-read= minibuffers
#+begin_src emacs-lisp
  (use-package embark
    :disabled ; For now until I learn more about it
    :straight (embark :type git :host github :repo "oantolin/embark")
    :config

    (general-define-key
     :kemaps 'minibuffer-local-map
     "M-o" '(embark-act :which-key "Embark-act")
     ;; "?" '(embark-act-noexit :which-key "Embark-act-noexit")
     ;; "?" '(embark-export :which-key "Embark-export")
     )
    )
#+end_src

For Selectrum
#+begin_src emacs-lisp
  (add-hook 'embark-target-finders 'selectrum-get-current-candidate)
  (add-hook 'embark-candidate-collectors
            (defun embark-selectrum-candidates+ ()
              (when selectrum-active-p
                (selectrum-get-current-candidates
                 ;; Pass relative file names for dired.
                 minibuffer-completing-file-name))))
  (add-hook 'embark-setup-hook 'selectrum-set-selected-candidate) ; No unnecessary computation delay after injection.
  (add-hook 'embark-input-getters
            (defun embark-selectrum-input-getter+ ()
              (when selectrum-active-p
                (let ((input (selectrum-get-current-input)))
                  (if minibuffer-completing-file-name
                      ;; Only get the input used for matching.
                      (file-name-nondirectory input)
                    input)))))

  ;; The following is not selectrum specific but included here for convenience.
  ;; If you don't want to use which-key as a key prompter skip the following code.

  (setq which-key-show-transient-maps t) ; Necessary so show embark keybinds with which-key
  (setq embark-action-indicator
        (defun embark-which-key-setup+ ()
          (let ((help-char nil)
                (which-key-show-transient-maps t)
                (which-key-replacement-alist
                 (cons '(("^[0-9-]\\|kp-[0-9]\\|kp-subtract\\|C-u$" . nil) . ignore)
                       which-key-replacement-alist)))
            (setq-local which-key-show-prefix nil)
            (setq-local which-key-persistent-popup t)
            (which-key--update)))
        embark-become-indicator embark-action-indicator)

  (add-hook 'embark-pre-action-hook
            (defun embark-which-key-tear-down+ ()
              (kill-local-variable 'which-key-persistent-popup)
              (kill-local-variable 'which-key-show-prefix)
              (unless which-key-persistent-popup
                (which-key--hide-popup-ignore-command))))
#+end_src

** Consult.el

Essentially counsel but for default Emacs (and thus selectrum!)
#+begin_src emacs-lisp
  (use-package consult
    :after selectrum
    :straight (consult :type git :host github :repo "minad/consult")
    :hook (selectrum-mode . consult-preview-mode)
    :custom
    (consult-preview-outline nil) ; Annoying
    (consult-mode-histories ; What variable consult-history looks at for history
     '((eshell-mode . eshell-history-ring)
       (comint-mode . comint-input-ring)
       (term-mode . term-input-ring))
     )
  
    (consult-narrow-key [?<])
    (consult-widen-key [?< ?<])
  
    ;; Optional configure a "view" library to be used by `consult-buffer`.
    ;; The view library must provide two functions, one to open the view by name,
    ;; and one function which must return a list of views as strings.
    ;; Example: https://github.com/minad/bookmark-view/
    ;; (setq consult-view-open-function #'bookmark-jump
    ;;       consult-view-list-function #'bookmark-view-names)
    :config
    (general-define-key
     [remap apropos-command] '(consult-apropos :which-key "Consult apropos")
     )  

    (add-hook 'prog-mode-hook
              (lambda ()
                (kb/leader-keys
                 "le" '(consult-error :which-key "Consult error"))
                ))

    (kb/leader-keys
      "bb" '(consult-buffer :which-key "Consult buffer")
      ;; ("C-x 4 b" . consult-buffer-other-window)
      ;; ("C-x 5 b" . consult-buffer-other-frame)
      ;; ("C-x r x" . consult-register)
      "mm" '(counsel-bookmark :which-key "Consult bookmark")
      "mr" '(consult-mark :which-key "Consult mark-ring")
      "so" '(consult-outline :which-key "Consult outline")
      "ss" '(consult-line :which-key "Consult swiper")
      "si" '(consult-imenu :which-key "Consult imenu")
      ;; ("-s m" . consult-multi-occur)
      "ff" '(find-file :which-key "Find file")
      "iy" '(consult-yank-pop :which-key "Consult yank-pop")
      "ha" '(consult-apropos :which-key "Consult apropos")
      )
    )
#+end_src

** Consult-flycheck

List flycheck errors in minibuffer with consult
#+begin_src emacs-lisp
  (use-package consult-flycheck
    :after consult
    :hook (text-mode . (lambda ()
                         (kb/leader-keys
                          "le" '(consult-flycheck :which-key "Consult flycheck"))
                         ))
    )
#+end_src

** Marginalia

Enable richer annotations in minibuffer (companion package of consult.el)
#+begin_src emacs-lisp
  (use-package marginalia
    :straight (marginalia :type git :host github :repo "minad/marginalia")
    :hook (selectrum-mode . marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light)) ; Show as much information as possible
    )
#+end_src

* Helm

** Helm itself

Feature-rich version of Ivy completion
- *NOTE:* With the experimental minor mode =selectrum-helm-mode=, Helm defaults to using =complete-read= (and thus Selectrum when =selectrum-mode= is active)
#+begin_src emacs-lisp
  (use-package helm
    :custom
    ;; Fuzzy matching
    (helm-buffers-fuzzy-matching t)
    (helm-recentf-fuzzy-match t)
    (helm-apropos-fuzzy-match t)
    (helm-semantic-fuzzy-match t)
    (helm-imenu-fuzzy-match t)
    (helm-M-x-fuzzy-match t) 

    (helm-autoresize-mode t)
    :config
    (general-unbind "C-x c") ; Unbind original helm-prefix

    (general-define-key
     :keymaps 'helm-map
     "<tab>" 'helm-execute-persistent-action ; Run persistent action
     "M-o"  'helm-select-action) ; List actions

    (kb/leader-keys
      "oh" '(helm-command-prefix :which-key "Helm prefix")
      "oha" '(helm-apropos :which-key "Helm-apropos")

      ;; "bb" 'helm-mini
      ;; "ff" 'helm-find-files
      )
    )
#+end_src

** Helm swoop

#+begin_src emacs-lisp
  (use-package helm-swoop
    :disabled ; Conflicting bingings within PDF
    :custom
    (helm-swoop-split-with-multiple-windows nil) ; If this value is t, split window inside the current window
    (helm-swoop-split-direction 'split-window-vertically) ; Split direcion. 'split-window-vertically or 'split-window-horizontally
    (helm-swoop-speed-or-color t) ; If nil, you can slightly boost invoke speed in exchange for text color
    (helm-multi-swoop-edit-save t) ; Save buffer when helm-multi-swoop-edit complete
    :config
    (general-define-key ; From helm-swoop to helm-multi-swoop-all
     :keymaps 'helm-swoop-map
     "M-i" 'helm-multi-swoop-all-from-helm-swoop)

    (general-define-key ; Helm-swoop when in isearch
     :keymaps 'isearchp-mode-map
     "M-i" 'helm-swoop-from-isearch)

    (general-define-key ; When doing evil-search, hand the word over to helm-swoop
     :keymaps 'evil-motion-state-map
     "M-i" 'helm-swoop-from-evil-search)

    (general-define-key
     :keymaps '(helm-find-files-map helm-read-file-map)
     "C-<backspace>" 'helm-find-files-up-one-level) ; This overwrites auto expansion toggle?

    (kb/leader-keys
      "shs" '(helm-swoop :which-key "Helm-swoop")
      )
    )
#+end_src

** Helm-projectile

Projectile with Helm
#+begin_src emacs-lisp
  (use-package helm-projectile
    :after (helm projectile)
    ;; :hook (projectile-mode . helm-projectile-on)
    :custom
    (projectile-completion-system 'helm)
    (projectile-switch-project-action 'helm-projectile)
    )
#+end_src

** Helm-rg

Required for =helm-projectile-rg=
#+begin_src emacs-lisp
  (use-package helm-rg)
#+end_src

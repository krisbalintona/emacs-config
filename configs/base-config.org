#+TITLE: Base Configuration Settings

* Recentf

Enable logging of recent files
#+begin_src emacs-lisp
  (use-package recentf
    :straight nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 1000)
    (recentf-max-menu-items 15)
    )
#+end_src

* Golden-ratio

Auto-size window so current is largest
#+begin_src emacs-lisp
  (use-package golden-ratio
    :disabled ; Not good in all cases
    :after (evil evil-collection) ; Relies on evil-window commands
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-extra-commands ; Commands which trigger changing of window ratio
     '(evil-window-next evil-window-right evil-window-left evil-window-down evil-window-up))
    (golden-ratio-exclude-buffer-names '("*org-roam*")) ; still buggy
    :preface
    (defun pl/helm-alive-p ()
      "Detect if helm buffer is active. Taken from https://emacs.readthedocs.io/en/latest/completion_and_selection.html"
      (if (boundp 'helm-alive-p)
          (symbol-value 'helm-alive-p)))
    :config
    (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)
    )
#+end_src

* Savehist

Make history of certain things (e.g. minibuffer) persistent across sessions
#+begin_src emacs-lisp
  (use-package savehist
    :straight nil
    :hook (after-init . savehist-mode)
    :custom
    (savehist-autosave-interval 300)
    :config
    (add-to-list 'savehist-additional-variables 'recentf-list) ; Save recent files
    (add-to-list 'savehist-additional-variables 'kill-ring) ; Save kill ring
    )
#+end_src

* Company-org-block

Custom company-backend for org-block snippets. Also opens code block automatically (or prompted) after creating the snippet
- Found from [[https://www.reddit.com/r/emacs/comments/jf0jo1/org_block_company_complete_and_edit/][org block company complete and edit : emacs]]
#+begin_src emacs-lisp
  (use-package company-org-block ; Found in ~/main-emacs/elisp/company-org-block.el
    :disabled ; Doesn't seem to work well right now
    :straight nil
    :after (company company-box)
    :custom
    (company-org-block-edit-mode 'auto) ; Automatically enter if in an environment
    :config
    (add-to-list 'company-backends 'company-org-block)
    )
#+end_src

* Unpackaged.el

A bunch of functions taken from [[https://github.com/alphapapa/unpackaged.el#reload-a-packages-features][GitHub - alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that...]]. These are things which are useful but don't warrant an entire package.

** Reload-package

Simple function for reloading an entire package and all its features
+ Useful after upgrading
#+begin_src emacs-lisp
  (defun unpackaged/reload-package (package &optional allp)
    "Reload PACKAGE's features.
  If ALLP is non-nil (interactively, with prefix), load all of its
  features; otherwise only load ones that were already loaded.

  This is useful to reload a package after upgrading it.  Since a
  package may provide multiple features, to reload it properly
  would require either restarting Emacs or manually unloading and
  reloading each loaded feature.  This automates that process.

  Note that this unloads all of the package's symbols before
  reloading.  Any data stored in those symbols will be lost, so if
  the package would normally save that data, e.g. when a mode is
  deactivated or when Emacs exits, the user should do so before
  using this command."
    (interactive
     (list (intern (completing-read "Package: "
                                    (mapcar #'car package-alist) nil t))
           current-prefix-arg))
    ;; This finds features in the currently installed version of PACKAGE, so if
    ;; it provided other features in an older version, those are not unloaded.
    (when (yes-or-no-p (format "Unload all of %s's symbols and reload its features? " package))
      (let* ((package-name (symbol-name package))
             (package-dir (file-name-directory
                           (locate-file package-name load-path (get-load-suffixes))))
             (package-files (directory-files package-dir 'full (rx ".el" eos)))
             (package-features
              (cl-loop for file in package-files
                       when (with-temp-buffer
                              (insert-file-contents file)
                              (when (re-search-forward (rx bol "(provide" (1+ space)) nil t)
                                (goto-char (match-beginning 0))
                                (cadadr (read (current-buffer)))))
                       collect it)))
        (unless allp
          (setf package-features (seq-intersection package-features features)))
        (dolist (feature package-features)
          (ignore-errors
            ;; Ignore error in case it's not loaded.
            (unload-feature feature 'force)))
        (dolist (feature package-features)
          (require feature))
        (message "Reloaded: %s" (mapconcat #'symbol-name package-features " ")))))
#+end_src

** Font-compare

#+begin_src emacs-lisp
  (defvar lorem-ipsum-text)

  ;;;###autoload
  (defun unpackaged/font-compare (text fonts)
    "Compare TEXT displayed in FONTS.
  If TEXT is nil, use `lorem-ipsum' text. FONTS is a list of font
  family strings and/or font specs.

  Interactively, prompt for TEXT, using `lorem-ipsum' if left
  empty, and select FONTS with `x-select-font', pressing Cancel to
  stop selecting fonts."
    (interactive (list (pcase (read-string "Text: ")
                         ("" nil)
                         (else else))
                       ;; `x-select-font' calls quit() when Cancel is pressed, so we use
                       ;; `inhibit-quit', `with-local-quit', and `quit-flag' to avoid that.
                       (let ((inhibit-quit t))
                         (cl-loop for font = (with-local-quit
                                               (x-select-font))
                                  while font
                                  collect font into fonts
                                  finally do (setf quit-flag nil)
                                  finally return fonts))))
    (setq text (or text (s-word-wrap 80 (s-join " " (progn
                                                      (require 'lorem-ipsum)
                                                      (seq-random-elt lorem-ipsum-text))))))
    (with-current-buffer (get-buffer-create "*Font Compare*")
      (erase-buffer)
      (--each fonts
        (let ((family (cl-typecase it
                        (font (symbol-name (font-get it :family)))
                        (string it))))
          (insert family ": "
                  (propertize text
                              'face (list :family family))
                  "\n\n")))
      (pop-to-buffer (current-buffer))))
#+end_src

** Org-fix-blank-lines

Ensure that there are blank lines before and after org heading. Use with =universal-argument= to apply to whole buffer
#+begin_src emacs-lisp
  (defun unpackaged/org-fix-blank-lines (&optional prefix)
    "Ensure that blank lines exist between headings and between headings and their contents.
  With prefix, operate on whole buffer. Ensures that blank lines
  exist after each headings's drawers."
    (interactive "P")
    (org-map-entries (lambda ()
                       (org-with-wide-buffer
                        ;; `org-map-entries' narrows the buffer, which prevents us from seeing
                        ;; newlines before the current heading, so we do this part widened.
                        (while (not (looking-back "\n\n" nil))
                          ;; Insert blank lines before heading.
                          (insert "\n")))
                       (let ((end (org-entry-end-position)))
                         ;; Insert blank lines before entry content
                         (forward-line)
                         (while (and (org-at-planning-p)
                                     (< (point) (point-max)))
                           ;; Skip planning lines
                           (forward-line))
                         (while (re-search-forward org-drawer-regexp end t)
                           ;; Skip drawers. You might think that `org-at-drawer-p' would suffice, but
                           ;; for some reason it doesn't work correctly when operating on hidden text.
                           ;; This works, taken from `org-agenda-get-some-entry-text'.
                           (re-search-forward "^[ \t]*:END:.*\n?" end t)
                           (goto-char (match-end 0)))
                         (unless (or (= (point) (point-max))
                                     (org-at-heading-p)
                                     (looking-at-p "\n"))
                           (insert "\n"))))
                     t (if prefix
                           nil
                         'tree)))
#+end_src

Call this function before every save in an org file
+ Don't do this for org-agenda files - it makes it ugly
#+begin_src emacs-lisp
  (add-hook 'before-save-hook (lambda ()
                                (if (and
                                     (eq major-mode 'org-mode) ; Org-mode
                                     (not (string-equal default-directory (expand-file-name kb/agenda-dir))) ; Not agenda-dir
                                     (not (string-equal buffer-file-name (expand-file-name "seedbox.org" org-roam-directory)))) ; Not seedbox
                                    (let ((current-prefix-arg 4)) ; Emulate C-u
                                      (call-interactively 'unpackaged/org-fix-blank-lines)))
                                ))
#+end_src

** Magit-log date headers

Add dates to magit-logs
#+begin_src emacs-lisp
(use-package ov) ; Dependency
#+end_src

#+begin_src emacs-lisp
  (defun unpackaged/magit-log--add-date-headers (&rest _ignore)
    "Add date headers to Magit log buffers."
    (when (derived-mode-p 'magit-log-mode)
      (save-excursion
        (ov-clear 'date-header t)
        (goto-char (point-min))
        (cl-loop with last-age
                 for this-age = (-some--> (ov-in 'before-string 'any (line-beginning-position) (line-end-position))
                                  car
                                  (overlay-get it 'before-string)
                                  (get-text-property 0 'display it)
                                  cadr
                                  (s-match (rx (group (1+ digit) ; number
                                                      " "
                                                      (1+ (not blank))) ; unit
                                               (1+ blank) eos)
                                           it)
                                  cadr)
                 do (when (and this-age
                               (not (equal this-age last-age)))
                      (ov (line-beginning-position) (line-beginning-position)
                          'after-string (propertize (concat " " this-age "\n")
                                                    'face 'magit-section-heading)
                          'date-header t)
                      (setq last-age this-age))
                 do (forward-line 1)
                 until (eobp)))))

  (define-minor-mode unpackaged/magit-log-date-headers-mode
    "Display date/time headers in `magit-log' buffers."
    :global t
    (if unpackaged/magit-log-date-headers-mode
        (progn
          ;; Enable mode
          (add-hook 'magit-post-refresh-hook #'unpackaged/magit-log--add-date-headers)
          (advice-add #'magit-setup-buffer-internal :after #'unpackaged/magit-log--add-date-headers))
      ;; Disable mode
      (remove-hook 'magit-post-refresh-hook #'unpackaged/magit-log--add-date-headers)
      (advice-remove #'magit-setup-buffer-internal #'unpackaged/magit-log--add-date-headers)))

  (add-hook 'magit-mode-hook 'unpackaged/magit-log-date-headers-mode) ; Enable the minor mode
#+end_src

* Keep tags on right-hand side

Taken from [[https://orgmode.org/worg/org-hacks.html#archiving][Org ad hoc code, quick hacks and workarounds]]. May be slow in big files
#+begin_src emacs-lisp
  (setq ba/org-adjust-tags-column t)

  (defun ba/org-adjust-tags-column-reset-tags ()
    "In org-mode buffers it will reset tag position according to
    `org-tags-column'."
    (when (and
           (not (string= (buffer-name) "*Remember*"))
           (eql major-mode 'org-mode))
      (let ((b-m-p (buffer-modified-p)))
        (condition-case nil
            (save-excursion
              (goto-char (point-min))
              (command-execute 'outline-next-visible-heading)
              ;; disable (message) that org-set-tags generates
              (flet ((message (&rest ignored) nil))
                (org-set-tags 1 t))
              (set-buffer-modified-p b-m-p))
          (error nil)))))

  (defun ba/org-adjust-tags-column-now ()
    "Right-adjust `org-tags-column' value, then reset tag position."
    (set (make-local-variable 'org-tags-column)
         (- (- (window-width) (length org-ellipsis))))
    (ba/org-adjust-tags-column-reset-tags))

  (defun ba/org-adjust-tags-column-maybe ()
    "If `ba/org-adjust-tags-column' is set to non-nil, adjust tags."
    (when ba/org-adjust-tags-column
      (ba/org-adjust-tags-column-now)))

  (defun ba/org-adjust-tags-column-before-save ()
    "Tags need to be left-adjusted when saving."
    (when ba/org-adjust-tags-column
      (setq org-tags-column 1)
      (ba/org-adjust-tags-column-reset-tags)))

  (defun ba/org-adjust-tags-column-after-save ()
    "Revert left-adjusted tag position done by before-save hook."
    (ba/org-adjust-tags-column-maybe)
    (set-buffer-modified-p nil))

  ;; Automatically align tags on right-hand side
  (add-hook 'window-configuration-change-hook
            'ba/org-adjust-tags-column-maybe)
  (add-hook 'before-save-hook 'ba/org-adjust-tags-column-before-save)
  (add-hook 'after-save-hook 'ba/org-adjust-tags-column-after-save)
  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (setq org-agenda-tags-column (- (window-width)))))

  ;; Between invoking org-refile and
  ;; displaying the prompt (which triggers
  ;; window-configuration-change-hook)
  ;; tags might adjust, which invalidates
  ;; the org-refile cache
  (defadvice org-refile (around org-refile-disable-adjust-tags)
    "Disable dynamically adjusting tags"
    (let ((ba/org-adjust-tags-column nil))
      ad-do-it))
  (ad-activate 'org-refile)
#+end_src

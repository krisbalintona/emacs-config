#+TITLE: Base Configuration Settings

* Faces

*** Set default fonts

*Potential Fonts:*
/Default:/
+ =RobotoMono Nerd Font=
+ =Iosevka Fixed Slab=
+ =Iosevka Term SS04=
/Fixed-Pitch:/
+ =FiraCode Nerd Font=
+ =Hack Nerd Font Mono=
/Variable-Pitch:/
+ =Noto Sans=
+ =IBM Plex Sans KR= (Note: This doesn't have italics available)
+ =IBM Plex Sans Condensed=
#+BEGIN_SRC emacs-lisp
  (defvar kb/default-font "Iosevka Term SS04")
  (defvar kb/fixed-pitch-font "Hack Nerd Font Mono")
  (defvar kb/variable-pitch-font "ETBembo")
  (defvar kb/modeline-font "Noto Sans")

  (defun kb/default-fonts-setup ()
    "Set Emacs-wide fonts"

    (add-to-list 'default-frame-alist `(font . ,kb/default-font))

    (set-face-attribute 'default nil :font kb/default-font :height 135)
    (set-face-attribute 'fixed-pitch nil :font kb/fixed-pitch-font :height 140)
    ;; (set-face-attribute 'variable-pitch nil :font kb/variable-pitch-font :height 148)
    (set-face-attribute 'variable-pitch nil :font kb/variable-pitch-font :height 158)

    (set-fontset-font ; Emoji support
     t
     '(#x1f300 . #x1fad0)
     (cond
      ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
      ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
      ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
      ((member "Symbola" (font-family-list)) "Symbola")
      ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")
      ;; Apple Color Emoji should be before Symbola, but Richard Stallman disabled it.
      ;; GNU Emacs Removes Color Emoji Support on the Mac
      ;; http://ergoemacs.org/misc/emacs_macos_emoji.html
      ))
    )

  (if (daemonp) ; Set fonts based on if daemon or not
      (add-hook 'server-after-make-frame-hook 'kb/default-fonts-setup)
    (add-hook 'window-setup-hook 'kb/default-fonts-setup))
#+END_SRC

*** Mixed-pitch

Allow faces to be selectively fixed- or variable-pitch
 * *Note:* Changes the family and height of the default face to the family and
    height of the variable-pitch face
#+BEGIN_SRC emacs-lisp
  (use-package mixed-pitch
    :hook (text-mode . mixed-pitch-mode)
    :custom
    (mixed-pitch-fixed-pitch-faces
     '(diff-added diff-context diff-file-header diff-function diff-header diff-hunk-header diff-removed font-latex-math-face font-latex-sedate-face font-latex-warning-face font-latex-sectioning-5-face font-lock-builtin-face font-lock-comment-delimiter-face font-lock-constant-face font-lock-doc-face font-lock-function-name-face font-lock-keyword-face font-lock-negation-char-face font-lock-preprocessor-face font-lock-regexp-grouping-backslash font-lock-regexp-grouping-construct font-lock-string-face font-lock-type-face font-lock-variable-name-face line-number line-number-current-line line-number-major-tick line-number-minor-tick markdown-code-face markdown-gfm-checkbox-face markdown-inline-code-face markdown-language-info-face markdown-language-keyword-face markdown-math-face message-header-name message-header-to message-header-cc message-header-newsgroups message-header-xheader message-header-subject message-header-other mu4e-header-key-face mu4e-header-value-face mu4e-link-face mu4e-contact-face mu4e-compose-separator-face mu4e-compose-header-face org-block org-block-begin-line org-block-end-line org-document-info-keyword org-code org-indent org-latex-and-related org-checkbox org-formula org-meta-line org-table org-verbatim

                  highlight-indent-guides-character-face
                  ))
    )
#+END_SRC

* UI and appearance

** Set theme

#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-themes
  ;;   :config (load-theme 'doom-dracula t))
  ;; (use-package doom-themes
  ;;   :config (load-theme 'doom-palenight t))
  (use-package atom-one-dark-theme
    :config (load-theme 'atom-one-dark t))
  ;; (use-package mood-one-theme
  ;;   :config (load-theme 'mood-one t))
  ;; (use-package spacemacs-theme
  ;;   :config (load-theme 'spacemacs-dark t))
#+END_SRC

** Show line numbers

Column number in modeline
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC

Set linum-numbers mode
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)

  ;; Enabled for these
  (dolist (mode '(prog-mode-hook
                  LaTeX-mode-hook
                  ))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Disabled for these
  (dolist (mode '(org-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Transparency

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(98 . 85))
  (add-to-list 'default-frame-alist '(alpha . (98 . 85)))
#+END_SRC

** Line spacing

#+BEGIN_SRC emacs-lisp
  (setq line-spacing 0) ; This is default
#+END_SRC

** Doom-modeline

Sleek modeline from Doom
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :custom
    (doom-modeline-window-width-limit fill-column) ; The limit of the window width.
    (doom-modeline-project-detection 'project)
    (doom-modeline-buffer-file-name-style 'buffer-name)
    ;; (doom-modeline-icon (display-graphic-p)) ; Show icons if in Emacs GUI
    (doom-modeline-icon t) ; In order to work with emacsclient
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t)
    (doom-modeline-buffer-state-icon t)
    (doom-modeline-buffer-modification-icon t)
    (doom-modeline-unicode-fallback t)
    (doom-modeline-minor-modes nil)
    (doom-modeline-enable-word-count t)
    (doom-modeline-continuous-word-count-modes '(LaTeX-mode markdown-mode gfm-mode org-mode))
    (doom-modeline-number-limit 99)
    (doom-modeline-vcs-max-length 28)
    (doom-modeline-lsp t)
    (doom-modeline-height 33)
    (doom-modeline-bar-width 0)
    :config
    (if (daemonp) ; Hooks depending on daemon or not
        (progn (add-hook 'server-after-make-frame-hook 'doom-modeline-mode 100)
               (add-hook 'window-setup-hook 'doom-modeline-mode))
      (add-hook 'window-setup-hook 'doom-modeline-mode)) ; Use this hook to prevent right side from being clipped

    (set-face-attribute 'mode-line nil :family kb/modeline-font :height 0.75)
    (set-face-attribute 'mode-line-inactive nil :family kb/modeline-font :height 0.68)

    ;; Don't show encoding on modeline if it is UTF-8
    (defun doom-modeline-conditional-buffer-encoding ()
      (setq-local doom-modeline-buffer-encoding
                  (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                              (eq buffer-file-coding-system 'utf-8)))))
    (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
    (add-hook 'doom-modeline-mode-hook #'doom-modeline-conditional-buffer-encoding) ; Necessary so it takes affect imediately, not before I change major modes for the first time

    (doom-modeline-def-modeline 'main
      '(bar " " matches vcs " " buffer-info remote-host buffer-position parrot selection-info)
      '(misc-info " " battery " " input-method buffer-encoding major-mode checker minor-modes process))
    )
#+END_SRC

*** Modeline additions

Minor modeline additions/settings
#+begin_src emacs-lisp
  (with-eval-after-load 'doom-modeline
    ;; Show actual path of file in symlinks
    (setq find-file-visit-truename t)

    ;; Disable time in the mode-line
    (display-time-mode t)

    ;; Show file-size
    (size-indication-mode t)

    ;; Show battery
    (setq battery-load-critical 15)
    (setq battery-load-low 25)
    (unless (equal "Battery status not available"
                   (battery))
      (display-battery-mode t)) ; On laptops it's nice to know how much power you have
    )
#+end_src

* General.el

Leader key capabilities
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-auto-unbind-keys)

    (general-create-definer kb/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "M-SPC")

    (kb/leader-keys
      "t"  '(:ignore t :which-key "Toggles")
      "tl" '(display-line-numbers-mode :which-key "Line numbers")
      "o"  '(:ignore t :which-key "Open")
      "oc" '(calendar :which-key "Open calendar")
      "b"  '(:ignore t :which-key "Buffers")
      "bp" '(previous-buffer :which-key "Prev buffer")
      "bn" '(next-buffer :which-key "Next buffer")
      "f"  '(:ignore t :which-key "Files")
      "fs" '(save-buffer :which-key "Save buffer")
      "h"  '(:ignore t :which-key "Help")
      "q"  '(:ignore t :which-key "Quit")
      "qs" '(org-save-all-org-buffers :which-key "Save all org buffers")
      "l"  '(:ignore t :which-key "Langtool")
      "n" '(:ignore t :which-key "Org-roam")
      "i" '(:ignore t :which-key "Copying and pasting")
      "w" '(:ignore t :which-key "Manage windows")
      "g"   '(:ignore t :which-key "git")
      "e"   '(:ignore t :which-key "Eval stuff")
      "eb"  '(eval-buffer :which-key "Eval buffer")

      "u" 'universal-argument
      )

    (kb/leader-keys
      :keymaps '(visual normal)
      "ee" '(eval-last-sexp :which-key "Eval last sexp")
      "er" '(eval-region :which-key "Eval region")
      )
    )
#+END_SRC

* Pretty-hydra

#+begin_src emacs-lisp
  (use-package pretty-hydra
    :demand t
    :config
    ;; Straight.el integration
    (kb/leader-keys
      "hp" '(hydra:straight-helper/body :which-key "Straight.el management")
      )

    (pretty-hydra-define hydra:straight-helper
      (:hint t :foreign-keys run :quit-key "q" :exit t)
      ("Package building"
       (("t" #'straight-use-package "Temporarily install package")
        ("c" #'straight-check-all "Check and build all modified")
        ("C" #'straight-check-package "Check and build particular modified")
        ("r" #'straight-rebuild-all "Rebuild all")
        ("R" #'straight-rebuild-package "Rebuild particular"))
       "Managing remote and local repos"
       (("f" #'straight-fetch-all "Fetch all")
        ("F" #'straight-fetch-package "Fetch particular")
        ("p" #'straight-pull-all "Pull all")
        ("P" #'straight-pull-package "Pull particular")
        ("u" #'straight-push-all "Push all")
        ("U" #'straight-push-package "Push particular")
        ("m" #'straight-merge-all "Merge all")
        ("M" #'straight-merge-package "Merge particular"))
       "Automatic and manual updates"
       (("n" #'straight-normalize-all "Normalize all")
        ("N" #'straight-normalize-package "Normalize particular")
        ("w" #'straight-watcher-start "Start file system watcher")
        ("W" #'straight-watcher-quit "Kill file system watcher")
        ("g" #'straight-get-recipe "Copy particular recipe")
        ("e" #'straight-prune-build "Prune: delete packages not currently loaded (?)")) ; Recommended occasionally to clean up really long cache file (straight-cache-autoloads t) over time
       "Suspending and restoring package versions"
       (("v" #'straight-freeze-versions "\"Freeze\" all installed packages (?)")
        ("V" #'straight-thaw-versions "\"Unfreeze\" all frozen packages (?)"))
       ("q" nil) ; Reserved for quit
       ))
    )
#+end_src

* Hydra-posframe

Prettify hydra frame
#+begin_src emacs-lisp
  (use-package hydra-posframe
    :disabled ; Too small sometimes
    :straight (hydra-posframe :type git :host github :repo "Ladicle/hydra-posframe")
    :hook (after-init . hydra-posframe-enable)
    )
#+end_src

* Custom variables

For org and org-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Documents/org-database/")
  (defvar kb/agenda-dir (concat org-directory "agenda/"))
  (defvar kb/roam-dir (concat org-directory "roam/"))
  (defvar kb/library-dir (concat org-directory "library/"))

  (defvar kb/all-org-dir-files (cl-remove-if
                                (lambda (it)
                                  (string-match-p (rx "archive.org") it))
                                (directory-files-recursively org-directory ".org$")))
  (defvar kb/all-agenda-dir-files (cl-remove-if
                                   (lambda (it)
                                     (string-match-p (rx "archive.org") it))
                                   (directory-files-recursively kb/agenda-dir ".org$")))
  (defvar kb/all-agenda-dir-files-minus-inbox (cl-remove-if
                                               (lambda (it)
                                                 (string-match-p (rx "archive.org") it)
                                                 (string-match-p (rx "inbox.org") it))
                                               (directory-files-recursively kb/agenda-dir ".org$")))
#+END_SRC

For file and directory shortcut functions (in custom functions section)
#+BEGIN_SRC emacs-lisp
  (defvar kb/library-dir (concat org-directory "library"))
  (defvar kb/emacs-base-config-file (concat user-emacs-directory "configs/base-config.org"))
  (defvar kb/emacs-config-dir (concat user-emacs-directory "configs/"))

  (defvar kb/dot-config-dir "~/.config/")
  (defvar kb/wm-config-file (concat kb/dot-config-dir "i3/config"))
#+END_SRC

* Custom functions

** Sudo a file

Find a fle with sudo
#+BEGIN_SRC emacs-lisp
(defun doom--sudo-file-path (file)
(let ((host (or (file-remote-p file 'host) "localhost")))
(concat "/" (when (file-remote-p file)
(concat (file-remote-p file 'method) ":"
(if-let (user (file-remote-p file 'user))
(concat user "@" host)
host)
"|"))
"sudo:root@" host
":" (or (file-remote-p file 'localname)
file))))

(defun doom/sudo-find-file (file)
"Open FILE as root."
(interactive "FOpen file as root: ")
(find-file (doom--sudo-file-path file)))
#+END_SRC>

Sudo the current file
#+BEGIN_SRC emacs-lisp
(defun doom/sudo-this-file ()
  "Open the current file as root."
  (interactive)
  (find-file
   (doom--sudo-file-path
    (or buffer-file-name
        (when (or (derived-mode-p 'dired-mode)
                  (derived-mode-p 'wdired-mode))
          default-directory)))))
#+END_SRC>

Keybinds
#+BEGIN_SRC emacs-lisp
(kb/leader-keys
"fu" '(doom/sudo-find-file :which-key "Sudo find file")
"fU" '(doom/sudo-this-file :which-key "Sudo current file")
)
#+END_SRC>

** Kill current buffer

#+BEGIN_SRC emacs-lisp
  (defun kb/kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x K") 'kb/kill-current-buffer)
  (kb/leader-keys
    "bK" '(kb/kill-current-buffer :which-key "Kill current buffer")
    )
#+END_SRC

** Kill all buffers

#+BEGIN_SRC emacs-lisp
  (defun kb/kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (kb/leader-keys
    "qQ" '(kb/kill-all-buffers :which-key "Kill all buffers"))
#+END_SRC

** Yank current buffer filename

#+BEGIN_SRC emacs-lisp
  (defun +default/yank-buffer-filename ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (if-let (filename (or buffer-file-name (bound-and-true-p list-buffers-directory)))
        (message (kill-new (abbreviate-file-name filename)))
      (error "Couldn't find filename in current buffer")))

  (kb/leader-keys
    "fy" '(+default/yank-buffer-filename :which-key "Yank filename")
    )
    #+END_SRC

** Kill current file

#+BEGIN_SRC emacs-lisp
  (defun kb/delete-this-file (&optional path force-p)
    "Delete PATH, kill its buffers and expunge it from vc/magit cache.

      If PATH is not specified, default to the current buffer's file.

      If FORCE-P, delete without confirmation."
    (interactive
     (list (buffer-file-name (buffer-base-buffer))
           current-prefix-arg))
    (let* ((path (or path (buffer-file-name (buffer-base-buffer))))
           (short-path (abbreviate-file-name path)))
      (unless (and path (file-exists-p path))
        (user-error "Buffer is not visiting any file"))
      (unless (file-exists-p path)
        (error "File doesn't exist: %s" path))
      (unless (or force-p (y-or-n-p (format "Really delete %S?" short-path)))
        (user-error "Aborted"))
      (let ((buf (current-buffer)))
        (unwind-protect
            (progn (delete-file path) t)
          (if (file-exists-p path)
              (error "Failed to delete %S" short-path)
            ;; ;; Ensures that windows displaying this buffer will be switched to
            ;; ;; real buffers (`doom-real-buffer-p')
            ;; (doom/kill-this-buffer-in-all-windows buf t)
            ;; (doom--update-files path)
            (kb/kill-current-buffer)
            (message "Deleted %S" short-path))))))

  (kb/leader-keys
    "fD" '(kb/delete-this-file :which-key "Delete current file")
    )
#+END_SRC

** Rename/move current file

#+BEGIN_SRC emacs-lisp
  (defun kb/move-this-file (new-path &optional force-p)
    "Move current buffer's file to NEW-PATH.

      If FORCE-P, overwrite the destination file if it exists, without confirmation."
    (interactive
     (list (read-file-name "Move file to: ")
           current-prefix-arg))
    (unless (and buffer-file-name (file-exists-p buffer-file-name))
      (user-error "Buffer is not visiting any file"))
    (let ((old-path (buffer-file-name (buffer-base-buffer)))
          (new-path (expand-file-name new-path)))
      (make-directory (file-name-directory new-path) 't)
      (rename-file old-path new-path (or force-p 1))
      (set-visited-file-name new-path t t)
      ;; (doom--update-files old-path new-path)
      (message "File moved to %S" (abbreviate-file-name new-path))))

  (kb/leader-keys
    "fR" '(kb/move-this-file :which-key "Rename current file")
    )
#+END_SRC

** Sudo find file

#+BEGIN_SRC emacs-lisp
  (defun kb/sudo-find-file (file)
    "Open FILE as root."
    (interactive "FOpen file as root: ")
    (find-file (doom--sudo-file-path file)))

  (defun kb--sudo-file-path (file)
    (let ((host (or (file-remote-p file 'host) "localhost")))
      (concat "/" (when (file-remote-p file)
                    (concat (file-remote-p file 'method) ":"
                            (if-let (user (file-remote-p file 'user))
                                (concat user "@" host)
                              host)
                            "|"))
              "sudo:root@" host
              ":" (or (file-remote-p file 'localname)
                      file))))

  (kb/leader-keys
    "fu" '(kb/sudo-find-file :which-key "Find file as sudo")
    )
#+END_SRC

** Sudo save this file

#+BEGIN_SRC emacs-lisp
  (defun kb/sudo-this-file ()
    "Open the current file as root."
    (interactive)
    (find-file
     (kb--sudo-file-path
      (or buffer-file-name
          (when (or (derived-mode-p 'dired-mode)
                    (derived-mode-p 'wdired-mode))
            default-directory)))))

  (kb/leader-keys
    "fU" '(kb/sudo-this-file :which-key "Sudo save this file")
    )
#+END_SRC

** Traversing mark rings

#+begin_src emacs-lisp
  (kb/leader-keys
    "mg" 'org-mark-ring-goto
    "mc" 'counsel-mark-ring
    "ma" 'org-mark-ring-push
    )
#+end_src

** Idle quote

Display a random quote in the minibuffer after a certain amount of idle time. It's useful to get inspiration when stuck writing
#+begin_src emacs-lisp

(defconst kb/quotes
  '("You can't see paradise, if you don't pedal.  - Chicken Run "
    "He who who says he can and he who says he can’t are both usually right ― Confucius"
    "Why waste time proving over and over how great you are when you could be getting better? - Dweck The Mindset"
    "You’re not a failure until you start to assign blame. - The legendary basketball coach John Wooden"
    "I could hear my heart beating. I could hear everyone's heart. I could hear the human noise we sat there making, not one of us moving, not even when the room went dark. - Raymond Carver"
    "A writer is a sum of their experiences. Go get some - Stuck in Love (2012)"
    "If there is any one secret of success, it lies in the ability to get the other person's point of view and see things from that person's angle as well as from your own. - Henry Ford"
    "People who can put themselves in the place of other people who can understand the workings of their minds, need never worry about what the future has in store for them. - Owen D. Young"
    )
  "Good quotes
   they can be useful for creative writers as well.")

(defun kb/show-random-quotes ()
  "Show random quotes to minibuffer"
  (interactive)
  (message "%s"
           (nth (random (length kb/quotes))
                kb/quotes)))

(run-with-idle-timer 300 t 'kb/show-random-quotes)
#+end_src

** Keep tags on right-hand side

Taken from [[https://orgmode.org/worg/org-hacks.html#archiving][Org ad hoc code, quick hacks and workarounds]]. May be slow in big files
#+begin_src emacs-lisp
  (setq ba/org-adjust-tags-column t)

  (defun ba/org-adjust-tags-column-reset-tags ()
    "In org-mode buffers it will reset tag position according to
    `org-tags-column'."
    (when (and
           (not (string= (buffer-name) "*Remember*"))
           (eql major-mode 'org-mode))
      (let ((b-m-p (buffer-modified-p)))
        (condition-case nil
            (save-excursion
              (goto-char (point-min))
              (command-execute 'outline-next-visible-heading)
              ;; disable (message) that org-set-tags generates
              (flet ((message (&rest ignored) nil))
                (org-set-tags 1 t))
              (set-buffer-modified-p b-m-p))
          (error nil)))))

  (defun ba/org-adjust-tags-column-now ()
    "Right-adjust `org-tags-column' value, then reset tag position."
    (set (make-local-variable 'org-tags-column)
         (- (- (window-width) (length org-ellipsis))))
    (ba/org-adjust-tags-column-reset-tags))

  (defun ba/org-adjust-tags-column-maybe ()
    "If `ba/org-adjust-tags-column' is set to non-nil, adjust tags."
    (when ba/org-adjust-tags-column
      (ba/org-adjust-tags-column-now)))

  (defun ba/org-adjust-tags-column-before-save ()
    "Tags need to be left-adjusted when saving."
    (when ba/org-adjust-tags-column
      (setq org-tags-column 1)
      (ba/org-adjust-tags-column-reset-tags)))

  (defun ba/org-adjust-tags-column-after-save ()
    "Revert left-adjusted tag position done by before-save hook."
    (ba/org-adjust-tags-column-maybe)
    (set-buffer-modified-p nil))

  ;; Automatically align tags on right-hand side
  (add-hook 'window-configuration-change-hook
            'ba/org-adjust-tags-column-maybe)
  (add-hook 'before-save-hook 'ba/org-adjust-tags-column-before-save)
  (add-hook 'after-save-hook 'ba/org-adjust-tags-column-after-save)
  (add-hook 'org-agenda-mode-hook (lambda ()
                                    (setq org-agenda-tags-column (- (window-width)))))

  ;; Between invoking org-refile and
  ;; displaying the prompt (which triggers
  ;; window-configuration-change-hook)
  ;; tags might adjust, which invalidates
  ;; the org-refile cache
  (defadvice org-refile (around org-refile-disable-adjust-tags)
    "Disable dynamically adjusting tags"
    (let ((ba/org-adjust-tags-column nil))
      ad-do-it))
  (ad-activate 'org-refile)
#+end_src

* Misc

** Recentf

Enable logging of recent files
#+begin_src emacs-lisp
  (use-package recentf
    :straight nil
    :hook (after-init . recentf-mode)
    :custom
    (recentf-max-saved-items 1000)
    (recentf-max-menu-items 15)
    )
#+end_src

** Golden-ratio

Auto-size window so current is largest
#+begin_src emacs-lisp
  (use-package golden-ratio
    :disabled ; Not good in all cases
    :after (evil evil-collection) ; Relies on evil-window commands
    :hook (after-init . golden-ratio-mode)
    :custom
    (golden-ratio-extra-commands ; Commands which trigger changing of window ratio
     '(evil-window-next evil-window-right evil-window-left evil-window-down evil-window-up))
    (golden-ratio-exclude-buffer-names '("*org-roam*")) ; still buggy
    :preface
    (defun pl/helm-alive-p ()
      "Detect if helm buffer is active. Taken from https://emacs.readthedocs.io/en/latest/completion_and_selection.html"
      (if (boundp 'helm-alive-p)
          (symbol-value 'helm-alive-p)))
    :config
    (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)
    )
#+end_src

** Savehist

Make history of certain things (e.g. minibuffer) persistent across sessions
#+begin_src emacs-lisp
  (use-package savehist
    :straight nil
    :hook (after-init . savehist-mode)
    :custom
    (savehist-autosave-interval 300)
    :config
    (add-to-list 'savehist-additional-variables 'recentf-list) ; Save recent files
    (add-to-list 'savehist-additional-variables 'kill-ring) ; Save kill ring
    )
#+end_src

** Company-org-block

Custom company-backend for org-block snippets. Also opens code block automatically (or prompted) after creating the snippet
- Found from [[https://www.reddit.com/r/emacs/comments/jf0jo1/org_block_company_complete_and_edit/][org block company complete and edit : emacs]]
#+begin_src emacs-lisp
  (use-package company-org-block ; Found in ~/main-emacs/elisp/company-org-block.el
    :disabled ; Doesn't seem to work well right now
    :straight nil
    :after (company company-box)
    :custom
    (company-org-block-edit-mode 'auto) ; Automatically enter if in an environment
    :config
    (add-to-list 'company-backends 'company-org-block)
    )
#+end_src

** Unpackaged.el

A bunch of functions taken from [[https://github.com/alphapapa/unpackaged.el#reload-a-packages-features][GitHub - alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that...]]. These are things which are useful but don't warrant an entire package.

*** Reload-package

Simple function for reloading an entire package and all its features
+ Useful after upgrading
#+begin_src emacs-lisp
  (defun unpackaged/reload-package (package &optional allp)
    "Reload PACKAGE's features.
  If ALLP is non-nil (interactively, with prefix), load all of its
  features; otherwise only load ones that were already loaded.

  This is useful to reload a package after upgrading it.  Since a
  package may provide multiple features, to reload it properly
  would require either restarting Emacs or manually unloading and
  reloading each loaded feature.  This automates that process.

  Note that this unloads all of the package's symbols before
  reloading.  Any data stored in those symbols will be lost, so if
  the package would normally save that data, e.g. when a mode is
  deactivated or when Emacs exits, the user should do so before
  using this command."
    (interactive
     (list (intern (completing-read "Package: "
                                    (mapcar #'car package-alist) nil t))
           current-prefix-arg))
    ;; This finds features in the currently installed version of PACKAGE, so if
    ;; it provided other features in an older version, those are not unloaded.
    (when (yes-or-no-p (format "Unload all of %s's symbols and reload its features? " package))
      (let* ((package-name (symbol-name package))
             (package-dir (file-name-directory
                           (locate-file package-name load-path (get-load-suffixes))))
             (package-files (directory-files package-dir 'full (rx ".el" eos)))
             (package-features
              (cl-loop for file in package-files
                       when (with-temp-buffer
                              (insert-file-contents file)
                              (when (re-search-forward (rx bol "(provide" (1+ space)) nil t)
                                (goto-char (match-beginning 0))
                                (cadadr (read (current-buffer)))))
                       collect it)))
        (unless allp
          (setf package-features (seq-intersection package-features features)))
        (dolist (feature package-features)
          (ignore-errors
            ;; Ignore error in case it's not loaded.
            (unload-feature feature 'force)))
        (dolist (feature package-features)
          (require feature))
        (message "Reloaded: %s" (mapconcat #'symbol-name package-features " ")))))
#+end_src

*** Font-compare

#+begin_src emacs-lisp
  (defvar lorem-ipsum-text)

  ;;;###autoload
  (defun unpackaged/font-compare (text fonts)
    "Compare TEXT displayed in FONTS.
  If TEXT is nil, use `lorem-ipsum' text. FONTS is a list of font
  family strings and/or font specs.

  Interactively, prompt for TEXT, using `lorem-ipsum' if left
  empty, and select FONTS with `x-select-font', pressing Cancel to
  stop selecting fonts."
    (interactive (list (pcase (read-string "Text: ")
                         ("" nil)
                         (else else))
                       ;; `x-select-font' calls quit() when Cancel is pressed, so we use
                       ;; `inhibit-quit', `with-local-quit', and `quit-flag' to avoid that.
                       (let ((inhibit-quit t))
                         (cl-loop for font = (with-local-quit
                                               (x-select-font))
                                  while font
                                  collect font into fonts
                                  finally do (setf quit-flag nil)
                                  finally return fonts))))
    (setq text (or text (s-word-wrap 80 (s-join " " (progn
                                                      (require 'lorem-ipsum)
                                                      (seq-random-elt lorem-ipsum-text))))))
    (with-current-buffer (get-buffer-create "*Font Compare*")
      (erase-buffer)
      (--each fonts
        (let ((family (cl-typecase it
                        (font (symbol-name (font-get it :family)))
                        (string it))))
          (insert family ": "
                  (propertize text
                              'face (list :family family))
                  "\n\n")))
      (pop-to-buffer (current-buffer))))
#+end_src

*** Org-fix-blank-lines

Ensure that there are blank lines before and after org heading. Use with =universal-argument= to apply to whole buffer
#+begin_src emacs-lisp
  (defun unpackaged/org-fix-blank-lines (&optional prefix)
    "Ensure that blank lines exist between headings and between headings and their contents.
  With prefix, operate on whole buffer. Ensures that blank lines
  exist after each headings's drawers."
    (interactive "P")
    (org-map-entries (lambda ()
                       (org-with-wide-buffer
                        ;; `org-map-entries' narrows the buffer, which prevents us from seeing
                        ;; newlines before the current heading, so we do this part widened.
                        (while (not (looking-back "\n\n" nil))
                          ;; Insert blank lines before heading.
                          (insert "\n")))
                       (let ((end (org-entry-end-position)))
                         ;; Insert blank lines before entry content
                         (forward-line)
                         (while (and (org-at-planning-p)
                                     (< (point) (point-max)))
                           ;; Skip planning lines
                           (forward-line))
                         (while (re-search-forward org-drawer-regexp end t)
                           ;; Skip drawers. You might think that `org-at-drawer-p' would suffice, but
                           ;; for some reason it doesn't work correctly when operating on hidden text.
                           ;; This works, taken from `org-agenda-get-some-entry-text'.
                           (re-search-forward "^[ \t]*:END:.*\n?" end t)
                           (goto-char (match-end 0)))
                         (unless (or (= (point) (point-max))
                                     (org-at-heading-p)
                                     (looking-at-p "\n"))
                           (insert "\n"))))
                     t (if prefix
                           nil
                         'tree)))
#+end_src

Call this function before every save in an org file
+ Don't do this for org-agenda files - it makes it ugly
#+begin_src emacs-lisp
  (add-hook 'before-save-hook (lambda ()
                                (if (and
                                     (eq major-mode 'org-mode) ; Org-mode
                                     (not (string-equal default-directory (expand-file-name kb/agenda-dir))) ; Not agenda-dir
                                     (not (string-equal buffer-file-name (expand-file-name "seedbox.org" org-roam-directory)))) ; Not seedbox
                                    (let ((current-prefix-arg 4)) ; Emulate C-u
                                      (call-interactively 'unpackaged/org-fix-blank-lines)))
                                ))
#+end_src

*** Magit-log date headers

Add dates to magit-logs
#+begin_src emacs-lisp
(use-package ov) ; Dependency
#+end_src

#+begin_src emacs-lisp
  (defun unpackaged/magit-log--add-date-headers (&rest _ignore)
    "Add date headers to Magit log buffers."
    (when (derived-mode-p 'magit-log-mode)
      (save-excursion
        (ov-clear 'date-header t)
        (goto-char (point-min))
        (cl-loop with last-age
                 for this-age = (-some--> (ov-in 'before-string 'any (line-beginning-position) (line-end-position))
                                  car
                                  (overlay-get it 'before-string)
                                  (get-text-property 0 'display it)
                                  cadr
                                  (s-match (rx (group (1+ digit) ; number
                                                      " "
                                                      (1+ (not blank))) ; unit
                                               (1+ blank) eos)
                                           it)
                                  cadr)
                 do (when (and this-age
                               (not (equal this-age last-age)))
                      (ov (line-beginning-position) (line-beginning-position)
                          'after-string (propertize (concat " " this-age "\n")
                                                    'face 'magit-section-heading)
                          'date-header t)
                      (setq last-age this-age))
                 do (forward-line 1)
                 until (eobp)))))

  (define-minor-mode unpackaged/magit-log-date-headers-mode
    "Display date/time headers in `magit-log' buffers."
    :global t
    (if unpackaged/magit-log-date-headers-mode
        (progn
          ;; Enable mode
          (add-hook 'magit-post-refresh-hook #'unpackaged/magit-log--add-date-headers)
          (advice-add #'magit-setup-buffer-internal :after #'unpackaged/magit-log--add-date-headers))
      ;; Disable mode
      (remove-hook 'magit-post-refresh-hook #'unpackaged/magit-log--add-date-headers)
      (advice-remove #'magit-setup-buffer-internal #'unpackaged/magit-log--add-date-headers)))

  (add-hook 'magit-mode-hook 'unpackaged/magit-log-date-headers-mode) ; Enable the minor mode
#+end_src

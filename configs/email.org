#+TITLE: Email packages and settings

* Mu4e

Best email client
+ Requires =isync=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (require 'org-mu4e)

  ;; General settings
  (setq mu4e-root-maildir "~/Documents/Emails/Personal")
  (setq mu4e-get-mail-command "/usr/bin/mbsync -a") ; Use mbsync to sync mail
  (setq mu4e-html2text-command 'mu4e-shr2text) ; Renders emails' html with eww engine
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-change-filenames-when-moving t) ; Prevent duplicate UUIDs of messages
  (setq mu4e-view-show-images t) ; Enable inline images
  (when (fboundp 'imagemagick-register-types) ; use imagemagick, if available
    (imagemagick-register-types))
  (setq mu4e-view-prefer-html nil) ; Don't prefer html
  (setq mu4e-update-interval 300) ; Update automatically
  (setq mu4e-index-cleanup t) ; Make sure nothing breaks
  (setq mu4e-index-update-in-background t) ; Update in background
  (setq message-kill-buffer-on-exit t) ; Delete message buffer after sent
  (setq mu4e-view-show-addresses nil) ; show names and not addresses ; toggle per name with M-RET
  (setq mu4e-headers-include-related nil) ; Do not show related messages by default (toggle with =W= works anyway)
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode) ; Automatic linebreaks when reading email
  ;; (add-hook 'mu4e-main-mode-hook 'display-line-numbers-mode) ; Doesn't work?
  ;; (setq-hook! 'mu4e-view-mode-hook truncate-lines nil) ; or this way
  (setq mu4e-confirm-quit nil) ; Close mu4e without asking
  (setq mu4e-completing-read-function #'ivy-completing-read) ; Use ivy for whatever this is
  (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser)) ; Html mails might be better rendered in a browser

  ;; Add a column to display what email account the email belongs to.
  (add-to-list 'mu4e-header-info-custom
               '(:account
                 :name "Account"
                 :shortname "Account"
                 :help "Which account this email belongs to"
                 :function
                 (lambda (msg)
                   (let ((maildir (mu4e-message-field msg :maildir)))
                     (format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))
  ;; Fields
  (setq mu4e-view-fields '(:from :to :cc :bcc :subject :flags :date :maildir :mailing-list :tags :attachments :signature)) ; Customize view fields
  (setq  mu4e-headers-fields
         '((:from . 25)
           (:flags . 8)
           (:subject . 83)
           (:human-date . 13)
           (:account . 13)
           ))

  ;; Use fancy icons
  (setq mu4e-use-fancy-chars t
        mu4e-headers-draft-mark '("D" . " ")
        mu4e-headers-flagged-mark '("F" . " ")
        mu4e-headers-new-mark '("N" . " ")
        mu4e-headers-passed-mark '("P" . " ")
        mu4e-headers-replied-mark '("R" . " ")
        mu4e-headers-seen-mark '("S" . " ")
        mu4e-headers-trashed-mark '("T" . " ")
        mu4e-headers-attach-mark '("a" . " ")
        mu4e-headers-encrypted-mark '("x" . " ")
        mu4e-headers-signed-mark '("s" . " ")
        mu4e-headers-unread-mark '("u" . " "))

                                          ; Add bookmarks (fast queries)
  (add-to-list 'mu4e-bookmarks
               '( :name "Brown inbox"
                  :query "maildir:/Brown/Inbox"
                  :key ?b))
  (add-to-list 'mu4e-bookmarks
               '( :name "Personal inbox"
                  :query "maildir:/Personal/Inbox"
                  :key ?h))

                                          ; Shortcuts
  (setq mu4e-maildir-shortcuts
        '((:maildir "/Personal/All-Mail" :key ?A)
          (:maildir "/Personal/Sent"   :key ?S)
          (:maildir "/Personal/Trash"    :key ?T)
          (:maildir "/Personal/Inbox"    :key ?I)
          (:maildir "/Personal/Drafts"    :key ?D)
          (:maildir "/Personal/Starred"    :key ?L)
          (:maildir "/Brown/All-Mail" :key ?a)
          (:maildir "/Brown/Sent"   :key ?s)
          (:maildir "/Brown/Trash"    :key ?t)
          (:maildir "/Brown/Inbox"    :key ?i)
          (:maildir "/Brown/Drafts"    :key ?d)
          (:maildir "/Brown/Starred"    :key ?l)
          ))

  (setq
   mu4e-sent-folder   "/Personal/Sent"       ;; folder for sent messages
   mu4e-drafts-folder "/Personal/Drafts"     ;; unfinished messages
   mu4e-trash-folder  "/Personal/Trash"      ;; trashed messages
   mu4e-refile-folder "/Personal/Archive")   ;; saved messages

  (setq mu4e-context-policy 'pick-first) ; Choose default/first context (Brown)
  (setq mu4e-compose-context-policy 'ask-if-none) ; Choose context you're already in for composing messages
  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Brown"
             :enter-func (lambda () (mu4e-message "Entering Brown context"))
             ;; :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
             ;; we match based on the maildir of the message
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/Brown" (mu4e-message-field msg :maildir))))
             :vars '( ( user-mail-address . "kristoffer_balintona@brown.edu"  )
                      ( smtpmail-smtp-user . "kristoffer_balintona@brown.edu")
                      ( smtpmail-smtp-server . "smtp.gmail.com" )
                      ( user-full-name . "Kristoffer Balintona" )
                      ( mu4e-trash-folder . "/Brown/Trash/" )
                      ( mu4e-refile-folder . "/Brown/All-Mail/" )
                      ( mu4e-drafts-folder . "/Brown/Drafts/" )
                      ( mu4e-attachment-dir . "~/Documents/Emails/Brown/Attachments/" )
                      ( mu4e-compose-signature .
                        (concat
                         "⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼\n"
                         "Kind regards, \n"
                         "Kristoffer \n"))))
           ,(make-mu4e-context
             :name "Personal"
             :enter-func (lambda () (mu4e-message "Entering the personal context"))
             ;; :leave-func (lambda () (mu4e-message "Leaving Outlook context"))
             ;; we match based on the maildir of the message
             :match-func (lambda (msg)
                           (when msg
                             (string-match-p "^/Personal" (mu4e-message-field msg :maildir))))
             :vars '( ( user-mail-address . "krisbalintona@gmail.com" )
                      ( smtpmail-smtp-user . "krisbalintona@gmail.com" )
                      ( smtpmail-smtp-server . "smtp.gmail.com" )
                      ( user-full-name . "Kristoffer Balintona" )
                      ( mu4e-trash-folder . "/Personal/Trash/" )
                      ( mu4e-refile-folder . "/Personal/All-Mail/" )
                      ( mu4e-drafts-folder . "/Personal/Drafts/" )
                      ( mu4e-attachment-dir . "~/Documents/Emails/Personal/Attachments/" )
                      ( mu4e-compose-signature  .
                        (concat
                         "⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼\n"
                         "Kind regards, \n"
                         "Kristoffer \n"))))))

                                          ; Msmtp for sending emails
  (require 'smtpmail)
  (setq send-mail-function 'smtpmail-send-it)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-stream-type  'starttls)
  (setq user-full-name "Joe")
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-local-domain "gmail.com")
  (setq smtpmail-smtp-service '587)
  (setq sendmail-program "/usr/bin/msmtp")
  (setq mu4e-hide-index-messages t) ; Hide indexing message in minibuffer
  (setq mu4e-compose-dont-reply-to-self t) ; Don't reply to myself

  (setq mu4e-compose-format-flowed t) ; Something about linu continuation?
  ;; Some email clients ignore format=flowed (i.e. Outlook). Therefore,
  ;; we send very long lines, so that they auto-flow. 998 chars are the
  ;; actual maximum from the relevant RFC:
  ;; https://www.ietf.org/rfc/rfc2822.txt
  (setq fill-flowed-encode-column 998)

  (setq message-sendmail-extra-arguments '("--read-envelope-from")) ; tell msmtp to choose the SMTP server according to the from field in the outgoing email
  (setq message-sendmail-f-is-evil 't)
  (setq mu4e-sent-messages-behavior 'delete) ; don't save messages to Sent Messages, Gmail/IMAP takes care of this

  ;; I don't think I need this since I set contexts already when I go into mu4e
  ;; ;; Whenever a new mail is to be composed, change all relevant
  ;; ;; configuration variables to the respective account. This method is
  ;; ;; taken from the MU4E documentation:
  ;; ;; http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html#Multiple-accounts
  ;; (defun my-mu4e-set-account ()
  ;;   "Set the account for composing a message."
  ;;   (let* ((account
  ;;           (if mu4e-compose-parent-message
  ;;               (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
  ;;                 (string-match "/\\(.*?\\)/" maildir)
  ;;                 (match-string 1 maildir))
  ;;             (completing-read (format "Compose with account: (%s) "
  ;;                                      (mapconcat #'(lambda (var) (car var))
  ;;                                                 my-mu4e-account-alist "/"))
  ;;                              (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
  ;;                              nil t nil nil (caar my-mu4e-account-alist))))
  ;;          (account-vars (cdr (assoc account my-mu4e-account-alist))))
  ;;     (if account-vars
  ;;         (mapc #'(lambda (var)
  ;;                   (set (car var) (cadr var)))
  ;;               account-vars)
  ;;       (error "No email account found"))))
  ;; (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
  ;; (add-hook 'mu4e-compose-mode-hook 'org-mu4e-compose-org-mode)
  (add-hook 'mu4e-compose-mode-hook 'visual-fill-column-mode) ; Otherwise it won't immediately center

  ;; Queuing mail
  (setq smtpmail-queue-mail  't
        smtpmail-queue-dir  "~/Documents/Emails/Queue/cur")

  ;; This hook correctly modifies gmail flags on emails when they are marked.
  ;; Without it, refiling (archiving), trashing, and flagging (starring) email
  ;; won't properly result in the corresponding gmail action, since the marks
  ;; are ineffectual otherwise.
  (add-hook 'mu4e-mark-execute-pre-hook
            (defun +mu4e-gmail-fix-flags-h (mark msg)
              (pcase mark
                (`trash  (mu4e-action-retag-message msg "-\\Inbox,+\\Trash,-\\Draft"))
                (`refile (mu4e-action-retag-message msg "-\\Inbox"))
                (`flag   (mu4e-action-retag-message msg "+\\Starred"))
                (`unflag (mu4e-action-retag-message msg "-\\Starred")))))

  (kb/leader-keys
    "om" '(mu4e :which-key "Email"))
#+END_SRC

* Mu4e faces

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mu4e-header-face nil :height 140 :font "FiraCode Nerd Font") ; Non-colored header items
  (set-face-attribute 'mu4e-header-highlight-face nil :height 140 :font "FiraCode Nerd Font") ; Current item
  (set-face-attribute 'mu4e-flagged-face nil :height 140 :font "FiraCode Nerd Font")
  (set-face-attribute 'mu4e-unread-face nil :height 140 :font "FiraCode Nerd Font") ; Unread (pink) items

  ;; Compose-mode - same height and font as org-mode to work well with org-mu4e-compose-org-mode
  (set-face-attribute 'message-header-name nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-cc nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-to nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-other nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-xheader nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-subject nil :height 158 :font kb/variable-pitch-font)
  (set-face-attribute 'message-header-newsgroups nil :height 158 :font kb/variable-pitch-font)
#+END_SRC

* Mu4e-alert

Email notifications for desktop and modeline
#+BEGIN_SRC emacs-lisp
  (use-package mu4e-alert
    :after doom-modeline
    :custom
    (mu4e-alert-interesting-mail-query (concat
                                        "flag:unread"
                                        " AND NOT flag:trashed"
                                        " AND NOT maildir:\"/Personal/All-Mail\""
                                        " AND NOT maildir:\"/Brown/All-Mail\""
                                        " AND NOT maildir:\"/Queue/\""))
    (mu4e-alert-email-notification-types '(subjects))

    (display-time-use-mail-icon t)
    (display-time-mail-icon "📬") ; Non-customizable

    ;; (display-time-use-mail-icon t) ; Not sure what this does
    ;; (display-time-mail-icon (image :type png :file "~/Pictures/gmail.png" :ascent center))
    :config
    ;; Format how it appears in the modeline
    (defun mu4e-alert-default-mode-line-formatter (mail-count)
      "Default formatter used to get the string to be displayed in the mode-line.
         MAIL-COUNT is the count of mails for which the string is to displayed"
      (when (not (zerop mail-count))
        (concat ""
                (if (zerop mail-count)
                    ""
                  (format "%d " mail-count))
                (propertize
                 "Mail"
                 'display (when (display-graphic-p)
                            display-time-mail-icon)
                 'face display-time-mail-face
                 'help-echo (concat (if (= mail-count 1)
                                        "You have an unread email"
                                      (format "You have %s unread emails" mail-count))
                                    "\nClick here to view "
                                    (if (= mail-count 1) "it" "them"))
                 'mouse-face 'mode-line-highlight
                 'keymap '(mode-line keymap
                                     (mouse-1 . mu4e-alert-view-unread-mails)
                                     (mouse-2 . mu4e-alert-view-unread-mails)
                                     (mouse-3 . mu4e-alert-view-unread-mails)))
                " " ; Padding
                )))

    ;; Unread emails in modeline
    (mu4e-alert-set-default-style 'libnotify)

    (add-hook 'doom-modeline-mode-hook #'mu4e-alert-enable-mode-line-display)
    (add-hook 'doom-modeline-mode-hook #'mu4e-alert-enable-notifications)
    ;; For combatibility with emacsclient
    (add-hook 'server-after-make-frame-hook #'mu4e-alert-enable-mode-line-display)
    (add-hook 'server-after-make-frame-hook #'mu4e-alert-enable-notifications)
    )
#+END_SRC

* Org-msg

I think this is for more options when sending messages in mu4e
#+BEGIN_SRC emacs-lisp
  (use-package org-msg
    :custom
    (org-msg-startup "inlineimages")
    (org-msg-greeting-name-limit 3)
    (org-msg-text-plain-alternative t)
    )
#+END_SRC

#+TITLE: Programming packages


* Org-babel

*Loading org-babel is what enables proper indentation in src blocks.* Indentation will naturally load when you are in a proper programming file.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-src-tab-acts-natively t) ; Treat tabs in src blocks the same as if it were in the language's major mode
    )
#+end_src

* Lsp-mode

Syntax highlighting for every language
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook (;;(prog-mode . lsp-deferred) ; Lsp-mode only when buffer is visible
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . lsp-headerline-breadcrumb-mode)
           (prog-mode . lsp-headerline-breadcrumb-mode))
    :commands (lsp lsp-deferred) ; Defer until either of these commands are run
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-headerline-breadcrumb-segments '(project path-up-to-project file symbols))
    :config
    ;; Put flymake diagnostic buffer at the bottom third of the window
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flymake diagnostics for")
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (side            . bottom)
                   (reusable-frames . visible)
                   (window-height   . 0.33)))

    (general-define-key
     :keymaps 'lsp-mode-map
     "TAB" 'company-indent-or-complete-common
     )

    (kb/leader-keys
      "lf" '(flycheck-list-errors :which-key "List flycheck errors")
      "ld" 'xref-find-definitions
      "lr" 'xref-find-references
      "ln" 'lsp-ui-find-next-reference
      "lp" 'lsp-ui-find-prev-reference
      "le" 'lsp-ui-flycheck-list
      "lS" 'lsp-ui-sideline-mode
      "lX" 'lsp-execute-code-action
      )
    )
#+END_SRC

** Lsp-ui

Fancy frame and sideline overlay which shows useful information about what's on the point.
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'top)
    )
#+end_src

** Lsp-ivy

Search through symbols with Ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy
    :config
    (kb/leader-keys
      "ls" 'lsp-ivy-workspace-symbol
      )
    )
#+end_src

* Doom-snippets

Large library of snippet templates
- Not available on MELPA yet
#+BEGIN_SRC emacs-lisp
  (use-package doom-snippets
    :demand t
    :straight (doom-snippts :type git :host github :repo "hlissner/doom-snippets")
    ;; :quelpa (doom-snippets :fetcher git :url "https://github.com/hlissner/doom-snippets")
    )
#+END_SRC

* Org-tempo

#+BEGIN_SRC emacs-lisp
  (require' org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  ;; (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  ;; (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  ;; (add-to-list 'org-structure-template-alist '("json" . "src json"))
#+END_SRC

* Yasnippet

Template-expansion system (doesn't include templates)
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook ((text-mode . yas-minor-mode-on)
           (prog-mode . yas-minor-mode-on)
           (snippet-mode . yas-minor-mode-on))
    :config
    (defvar kb/personal-snippets-dir
      (concat user-emacs-directory "snippets/"))
    (add-to-list 'yas-snippet-dirs 'kb/personal-snippets-dir) ; Only accepts symbols or strings

    (yas-reload-all)
    )
#+END_SRC

* Projectile

Manage project directories
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p user-emacs-directory)
      (setq projectile-project-search-path `(,user-emacs-directory)))
    (setq projectile-switch-project-action #'projectile-dired)
    :custom
    ;; (projectile-completion-system 'ivy) ; Set to default because I use selectrum now
    (projectile-enable-caching t)
    (projectile-track-known-projects-automatically nil) ; Don't create projects automatically
    :config

    ;; Hydra menu
    (pretty-hydra-define hydra:selectrum-projectile
      (:color blue :hint t :foreign-keys run :quit-key "q" :exit t)
      ("Projectile"
       (("i" projectile-invalidate-cache :color red)
        ("n" projectile-add-known-project))
       "Buffers"
       (("b" projectile-switch-to-buffer)
        ("K" projectile-kill-buffers)
        ("S" projectile-save-project-buffers))
       "Find"
       (("d" projectile-find-dir)
        ("D" projectile-dired)
        ("f" projectile-find-file)
        ("p" projectile-switch-project))
       "Search"
       (("r" projectile-replace)
        ("R" projectile-replace-regexp)
        ("s" counsel-projectile-rg))
       ))

    (kb/leader-keys
      "p" '(:ignore t :which-key "Projectile")
      "p?" '(hydra:selectrum-projectile/body :which-key "Help menu")
      "pf"  'projectile-find-file
      "pp"  'projectile-switch-project
      "ps"  'counsel-projectile-rg
      "pb"  'projectile-switch-to-buffer
      "pD"  'projectile-dired
      ;; "pc"  'projectile-compile-project
      )
    )
#+END_SRC

* Highlight-function-calls

Give function calls a special face (default is underline)
#+begin_src emacs-lisp
  (use-package highlight-function-calls
    :hook (after-init . highlight-function-calls-mode)
    )
#+end_src

* Magit

You know the deal
- Mostly taken from [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#version-control][dotemacs/dotemacs.org at master · angrybacon/dotemacs · GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (auto-revert-check-vc-info nil) ; Fixes VC info on a timer in order to take into account changes made outside of Emacs - causes micro-stutters when too many version controlled buffers
    (magit-diff-highlight-hunk-body nil)
    (magit-diff-highlight-hunk-region-functions
     '(magit-diff-highlight-hunk-region-dim-outside magit-diff-highlight-hunk-region-using-face))
    (magit-module-sections-nested nil)
    (magit-popup-display-buffer-action '((display-buffer-same-window)))
    (magit-refs-show-commit-count 'all)
    (magit-section-initial-visibility-alist '((modules . show)
                                              (stashes . show)
                                              (unpulled . show)
                                              (unpushed . show)))
    (magit-section-show-child-count t)
    (transient-mode-line-format nil)
    :config
    (magit-add-section-hook
     'magit-status-sections-hook 'magit-insert-modules-overview 'magit-insert-status-headers t)
    (remove-hook 'magit-section-highlight-hook #'magit-section-highlight)

    (kb/leader-keys
      "g"  '(:ignore t :which-key "Magit")
      "gg"  '(magit-status :which-key "Status")
      "gs"  '(magit-status :which-key "Status")
      "gd"  'magit-diff-unstaged
      "gc"  'magit-branch-or-checkout
      "gl"   '(:ignore t :which-key "Logs")
      "glc" 'magit-log-current
      "glf" 'magit-log-buffer-file
      "gb"  'magit-branch
      "gP"  '(magit-push-current :which-key "Push")
      "gp"  'magit-pull-branch
      "gf"  'magit-fetch
      "gF"  'magit-fetch-all
      "gr"  '(magit-rebase :which-key "Rebase")
      )
    )
#+END_SRC

* Git-gutter-fringes

Diffs in fringes
- Taken from [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#version-control][dotemacs/dotemacs.org at master · angrybacon/dotemacs · GitHub]]
#+begin_src emacs-lisp
  (use-package git-gutter-fringe
    :disabled ; Until I figure out how to disable in org-mode
    :hook (after-change-major-mode . kb/git-gutter-enable)
    :preface
    (defun kb/git-gutter-enable ()
      (when-let* ((buffer (buffer-file-name))
                  (backend (vc-backend buffer)))
        (require 'git-gutter)
        (require 'git-gutter-fringe)
        (git-gutter-mode t)))
    :custom
    (git-gutter-fr:side 'left-side)
    (git-gutter:disabled-modes '(org-mode))
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center t))
    (define-fringe-bitmap 'git-gutter-fr:deleted [240 240 240 240] nil nil 'bottom)
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center t))
    )
#+end_src

* Highlight-indent-guides

Show indicator for indentation levels (like in VS Code)
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'column)
    (highlight-indent-guides-character ?⏐)
    :config
    ;; (set-face-attribute 'highlight-indent-guides-character-face nil :inherit 'org-block) ;:(background "#232635") ; Same as org-block background
    (highlight-indent-guides-auto-set-faces) ; Set faces based on theme
    )
#+END_SRC

* Flycheck

** Flycheck itself

Checking your code
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook (after-init . global-flycheck-mode)
    :custom
    (flycheck-emacs-lisp-load-path 'inherit) ; Use load-path for Emacs session

    (flycheck-check-syntax-automatically '(save mode-enabled idle-change idle-buffer-switch)) ; When to check
    (flycheck-idle-buffer-switch-delay 1.5) ; Wait 2 secons after buffer switch
    (flycheck-buffer-switch-check-intermediate-buffers t) ; Run flycheck even if visiting buffer quickly (reliant on idle-buffer-switch)

    (flycheck-display-errors-delay 0.5) ; Time to show an error on point
    (flycheck-indication-mode 'right-margin)
    (flycheck-highlighting-mode 'lines)

    (flycheck-standard-error-navigation t) ; Use standard M-g n/p error navigation keybindings
    (flycheck-navigation-minimum-level nil)

    ;; Errors from other files
    (flycheck-relevant-error-other-file-show nil)
    (flycheck-relevant-error-other-file-minimum-level 'error)
    :config
    ;; Make the flycheck buffer occupy the bottom third of the screen
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flycheck errors*" eos)
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (side            . bottom)
                   (reusable-frames . visible)
                   (window-height   . 0.33)))
    )
#+END_SRC

** Flycheck-pos-tip-mode

Shows flychek errors in pos-tip popup
#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :after flycheck
    :hook (flycheck-mode . flycheck-pos-tip-mode)
    )
#+end_src

** Flycheck-grammarly

Use grammarly API with flycheck
#+begin_src emacs-lisp
  (use-package flycheck-grammarly
    :disabled t ; Broken in non-trivial files https://github.com/jcs-elpa/flycheck-grammarly/issues/3
    :straight (flycheck-grammarly :type git :host github :repo "jcs-elpa/flycheck-grammarly")
    :after flycheck
    :init (require 'grammarly)
    :custom
    ;; If you have a paid subscription
    (grammarly-username "")
    (grammarly-password "")

    (flycheck-grammarly-check-time 2)
    )
#+end_src

** Flycheck-color-mode-line

Changes color of modeline face based on flycheck status
#+begin_src emacs-lisp
  (use-package flycheck-color-mode-line
    :disabled t ; Doesn't look pretty
    :after flycheck
    :hook (flycheck-mode . flycheck-color-mode-line-mode)
    )
#+end_src

** Flycheck-status-emoji

Use emojis to display flycheck statuses
#+begin_src emacs-lisp
  (use-package flycheck-status-emoji
    :after flycheck
    :hook (flycheck-mode . flycheck-status-emoji-mode)
    )
#+end_src

* Prettier

Reformats code automatically for some languages
#+begin_src emacs-lisp
  (use-package prettier)
#+end_src

* Rainbow-mode

Colorify your color codes
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook ((text-mode . rainbow-mode)
           (prog-mode . rainbow-mode))
    )
#+END_SRC

* Highlight-quoted

Make quoted symbols easier to distinguish from free variables by highlighting them
#+BEGIN_SRC emacs-lisp
  (use-package highlight-quoted
    :hook (emacs-lisp-mode . highlight-quoted-mode)
    )
#+END_SRC

* Paren

Helpful parenthesis indicator
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode t)
    )
#+END_SRC

* Elisp

** Lisp-extra-font-lock

Give faces to elisp symbols
#+begin_src emacs-lisp
  (use-package lisp-extra-font-lock
    :hook (emacs-lisp-mode . (lambda () (lisp-extra-font-lock-mode t)))
    :config
    ;; (lisp-extra-font-lock-global-mode 1)
    )
#+end_src

** Elisp-demos

Add example code snippets to some of the help windows
#+BEGIN_SRC emacs-lisp
  (use-package elisp-demos
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
    )
#+END_SRC

* Lua

** Lua-mode

Major-mode for the Lua language
+ For =lsp-mode= support, install =lua-language-server=, a separate system package
#+begin_src emacs-lisp
  (use-package lua-mode
    :custom
    ;; Lsp-mode settings
    (lsp-clients-lua-language-server-install-dir "/home/krisbalintona/Cloned_Repos/lua-language-server/") ; Path to where I manually cloned lua-language-server
    (lsp-clients-lua-language-server-bin (expand-file-name "bin/Linux/lua-language-server" lsp-clients-lua-language-server-install-dir))
    (lsp-clients-lua-language-server-main-location (expand-file-name "main.lua" lsp-clients-lua-language-server-install-dir))

    (lua-indent-level 2) ; lua-indent-level defaults to 3 otherwise. Madness.
    (lua-indent-string-contents t) ; Contents of a multiline string will be indented
    :config
    (general-define-key ; Lua-mode overwrites my eyebrowse-last-window-config binding
     :keymaps 'lua-mode-map
     :states '(motion normal visual)
     "gz" 'eyebrowse-last-window-config
     )
    )
#+end_src

** Company-lua

Company backend for Lua
#+begin_src emacs-lisp
  (use-package company-lua)
#+end_src

#+TITLE: File and directory navigation and search


* Custom file and directory shortcuts

From [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][dotfiles/Emacs.org at master · daviwil/dotfiles · GitHub]]

*** Functions

#+BEGIN_SRC emacs-lisp
  (defun kb/org-file-jump-to-heading (org-file heading-title)
    (interactive)
    (find-file (expand-file-name org-file))
    (goto-char (point-min))
    (search-forward (concat "* " heading-title))
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

  (defun kb/org-file-show-headings (org-file)
    (interactive)
    (find-file (expand-file-name org-file)) ; An issue with this is that you open the file
    (counsel-org-goto)
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

  (defun kb/org-dir-show-headings (dir) ; An issue with this is that you open the file
    (interactive)
    (let ((regexp-initial counsel-find-file-ignore-regexp)
          (dir-initial default-directory)
          (counsel-find-file-ignore-regexp "\\.el$"))
      (cd dir)
      (counsel-find-file)
      (counsel-org-goto)
      (cd dir-initial))
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))
#+END_SRC

*** Keybindings

#+BEGIN_SRC emacs-lisp
  (kb/leader-keys
    "fo" '(counsel-outline :which-key "Goto heading in current file")

    "fc"  '(:ignore t :which-key "Custom file searches")

    "fcL" '((lambda () (interactive) (counsel-find-file kb/library-dir)) :which-key "Library files")
    "fcl" '((lambda () (interactive) (kb/org-dir-show-headings kb/library-dir)) :which-key "Edit library file")

    "fcw" '((lambda () (interactive) (find-file kb/wm-config-file)) :which-key "Dotfiles directory")

    "fcb" '((lambda () (interactive) (find-file kb/emacs-etc-config-file)) :which-key "Open Emacs base config")
    "fce" '((lambda () (interactive) (counsel-find-file kb/emacs-config-dir)) :which-key "Config directory")
    "fcE" '((lambda () (interactive) (kb/org-dir-show-headings kb/emacs-config-dir)) :which-key "Edit Emacs configs")

    ;; ;; Section for Jumping directly to headings
    ;; "fds" '((lambda () (interactive) (kb/org-file-jump-to-heading "~/.dotfiles/Systems.org" "Base Configuration")) :which-key "base system")
    ;; "fdS" '((lambda () (interactive) (kb/org-file-jump-to-heading "~/.dotfiles/Systems.org" system-name)) :which-key "this system")
    ;; "fdp" '((lambda () (interactive) (kb/org-file-jump-to-heading "~/.dotfiles/Desktop.org" "Panel via Polybar")) :which-key "polybar")
    )
#+END_SRC

* Helm-org-rifle

Use helm to word search through org file and display the corresponding heading of search matches
#+BEGIN_SRC emacs-lisp
  (use-package helm-org-rifle
    :config
    (kb/leader-keys
      "fcl" '((lambda () (interactive) (helm-org-rifle-directories kb/library-dir nil)) :which-key "Library search")
      "fco" '(helm-org-rifle-org-directory :which-key "Org directory search")

      "or" '(helm-org-rifle-current-buffer :which-key "Helm-org-rifle current buffer")
      "oR" '(helm-org-rifle-occur-current-buffer :which-key "Helm-org-rifle-occur current buffer")
      )
    )
#+END_SRC

* Dired-mode

** Dired itself

Emacs' file manager
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :hook (dired-mode . dired-hide-details-mode)
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t) ; Guess default target directory
    (dired-hide-details-hide-symlink-targets nil) ; Don't hide symlink targets
    (dired-recursive-copies 'always) ; Copy directories recursively?
    )
#+end_src

** Dired-git

Show git information in dired
#+begin_src emacs-lisp
  (use-package dired-git
    :hook (dired-mode . dired-git-mode)
    )
#+end_src

* Neotree

Neotree for Emacs
#+begin_src emacs-lisp
  (use-package neotree
    :after all-the-icons ; Required for one of the themes
    :config
    (if (display-graphic-p) (setq neo-theme 'icons) (setq neo-theme 'arrow))

    (add-hook 'neotree-mode-hook 'hide-mode-line-mode)

    (kb/leader-keys
      "fn" '(neotree-toggle :which-key "Show neotree")
      )
    )
#+end_src

#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t

* Emacs build
:PROPERTIES:
:VISIBILITY: folded
:END:

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization
:PROPERTIES:
:VISIBILITY: children
:END:

** =early-init.el=

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

*** Garbage collection

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations

**** Doom Emacs' suggestions

All of the settings below are taken from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; These are the three ways to increase scrolling performance.
  ;; See (info "(emacs) Scrolling") for details. Introduced in Emacs HEAD
  ;; (b2f8c9f), this inhibits fontification while receiving input, which should
  ;; help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)
#+end_src

**** Other optimizations

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Buffer encoding

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=

*** Add modules and bespoke libraries to ~load-path~

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Initial scratch buffer

#+begin_src emacs-lisp :tangle "init.el"
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode'
  (setopt initial-major-mode 'fundamental-mode
          initial-scratch-message "Hello ðŸ‘‹")
#+end_src

*** Load libraries

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load libraries
  (require 'krisb-common)
#+end_src

*** Package configurations

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Packages
#+end_src

**** =package=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Package.el
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil)
#+end_src

**** =use-package=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setopt use-package-always-ensure t
          use-package-expand-minimally t  ; Verbosity of use-package macro
          use-package-always-defer nil)

  ;; Only be verbose when interpreted, otherwise errors are caught at compile time
  (setopt use-package-verbose (not (bound-and-true-p byte-compile-current-file)))

  ;; Compile statistics to be shown in `use-package-report'
  (setopt use-package-compute-statistics t)
#+end_src

**** =no-littering=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set better default package paths
  (use-package no-littering
    :init
    ;; Set these variables prior to loading the feature
    (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory) ; Config files
          no-littering-var-directory (expand-file-name "var/" user-emacs-directory)) ; Persistent files
    :config
    (no-littering-theme-backups)) ; Sets various built-in variables
#+end_src

**** =on=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; On
  ;; Package exposes a number of utility hooks and functions ported from Doom
  ;; Emacs. The hooks make it easier to speed up Emacs startup by providing
  ;; finer-grained control of the timing at which packages are loaded. Provides
  ;; the following hooks:
  ;; - on-first-input-hook
  ;; - on-init-ui-hook
  ;; - on-first-file-hook
  ;; - on-switch-frame-hook
  ;; - on-first-buffer-hook
  ;; - on-switch-buffer-hook
  ;; - on-switch-window-hook
  (use-package on)
#+end_src

**** =system-packages=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; System-packages
  ;; Install system packages via Emacs. Necessary for use-package's
  ;; `:ensure-system-package' flag
  (use-package system-packages
    :custom
    (system-packages-noconfirm nil)
    :config
    (when (executable-find "paru")
      (add-to-list 'system-packages-supported-package-managers
                   '(paru . ((default-sudo . nil)
                             (install . "paru -S")
                             (search . "paru -Ss")
                             (uninstall . "paru -Rns")
                             (update . "paru -Syu")
                             (clean-cache . "paru -Sc")
                             (change-log . "paru -Qc")
                             (log . "cat /var/log/paru.log")
                             (get-info . "paru -Qi")
                             (get-info-remote . "paru -Si")
                             (list-files-provided-by . "paru -qQl")
                             (owning-file . "paru -Qo")
                             (owning-file-remote . "paru -F")
                             (verify-all-packages . "paru -Qkk")
                             (verify-all-dependencies . "paru -Dk")
                             (remove-orphaned . "paru -Rns $(paru -Qtdq)")
                             (list-installed-packages . "paru -Qe")
                             (list-installed-packages-all . "paru -Q")
                             (list-dependencies-of . "paru -Qi")
                             (noconfirm . "--noconfirm"))))
      (setq system-packages-package-manager 'paru
            system-packages-use-sudo nil)))
#+end_src

**** Load modules

#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Modules
  (require 'krisb-garbage-collection)
  (require 'krisb-system-env)
  (require 'krisb-essentials)
  (require 'krisb-themes)
  (require 'krisb-fonts)
  (require 'krisb-completion)

  (require 'krisb-org)
  (require 'krisb-mermaid)
#+end_src

* Modules
:PROPERTIES:
:VISIBILITY: content
:END:

** =krisb-garbage-collection.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-garbage-collection.el"
  ;; NOTE 2024-02-11: Please reference https://emacsconf.org/2023/talks/gc/ for a
  ;; statistically-informed recommendation for GC variables
  (setq garbage-collection-messages t)
  (setq gc-cons-percentage 0.15)

  ;;; GCMH
  ;; Garbage collect on when idle
  (use-package gcmh
    :diminish
    :hook ((after-init . gcmh-mode)
           (minibuffer-setup . krisb-gcmh-minibuffer-setup)
           (minibuffer-exit . krisb-gcmh-minibuffer-exit))
    :custom
    ;; For a related discussion, see
    ;; https://www.reddit.com/r/emacs/comments/bg85qm/comment/eln27qh/?utm_source=share&utm_medium=web2x&context=3
    (gcmh-high-cons-threshold (* 16       ; 16 mb, as Doom uses in doom-start.el
                                 1024 1024))
    (gcmh-idle-delay 3)
    (gcmh-verbose nil)
    :config
    (setq garbage-collection-messages nil)

    ;; Increase GC threshold when in minibuffer
    (defvar krisb-gc-minibuffer--original gcmh-high-cons-threshold
      "Temporary variable to hold `gcmh-high-cons-threshold'")

    (defun krisb-gcmh-minibuffer-setup ()
      "Temporarily have \"limitless\" `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-setup] Increasing GC threshold")
      (setq gcmh-high-cons-threshold most-positive-fixnum))

    (defun krisb-gcmh-minibuffer-exit ()
      "Restore value of `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-exit] Restoring GC threshold")
      (setq gcmh-high-cons-threshold krisb-gc-minibuffer--original))

    ;; Increase `gc-cons-threshold' while using corfu, like we do for the
    ;; minibuffer
    (with-eval-after-load 'corfu
      (advice-add 'completion-at-point :before 'krisb-gcmh-minibuffer-setup)
      (advice-add 'corfu-quit :before 'krisb-gcmh-minibuffer-exit)
      (advice-add 'corfu-insert :before 'krisb-gcmh-minibuffer-exit)))

  ;;; Diagnose memory usage
  ;; See how Emacs is using memory. From
  ;; https://www.reddit.com/r/emacs/comments/ck4zb3/comment/evji1n7/?utm_source=share&utm_medium=web2x&context=3
  (defun krisb-diagnose-garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))

  ;;; Emacs-gc-stats
  ;; Collect GC statistics. Requested by someone who'd like GC statistics:
  ;; https://www.reddit.com/r/emacs/comments/14dej62/please_help_collecting_statistics_to_optimize/.
  ;; Also see https://elpa.gnu.org/packages/emacs-gc-stats.html
  (use-package emacs-gc-stats
    :disabled t                           ; Dont collecting data
    :hook (on-first-input . emacs-gc-stats-mode)
    :custom
    ;; Optionally reset Emacs GC settings to default values (recommended)
    (emacs-gc-stats-gc-defaults 'emacs-defaults)
    (emacs-gc-stats-remind (* 7))  ; Optionally set reminder to upload the stats
    (emacs-gc-stats-inhibit-command-name-logging nil))

  ;;; Provide
  (provide 'krisb-garbage-collection)
#+end_src

** =krisb-system-env.el=

#+begin_src emacs-lisp :tangle "modules/krisb-system-env.el"
  ;;; Exec-path-from-shell
  ;; Ensure Emacs' and system shell have same path
  (use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-variables
     '("PATH" "MANPATH" "BROWSER"
       ;; Language paths
       "GOPATH"
       ;; `ssh-agent' environment variables. See
       ;; https://wiki.archlinux.org/title/SSH_keys#Start_ssh-agent_with_systemd_user
       "SSH_AGENT_PID" "SSH_AUTH_SOCK"
       ;; For LSP-mode. See
       ;; https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization
       "LSP_USE_PLISTS"))
    :config
    (exec-path-from-shell-initialize)

    ;; For npm. Found here:
    ;; https://www.reddit.com/r/emacs/comments/s6zkb6/comment/ht794j7/?utm_source=share&utm_medium=web2x&context=3
    (when (eq (length (getenv "NODE_PATH")) 0)
      (setenv "NODE_PATH" "/usr/local/lib/node_modules")))

  ;;; Provide
  (provide 'krisb-system-env)
#+end_src

** =krisb-essentials.el=

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Keep the cursor out of the read-only portions of the minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;; Allow minibuffer commands in minibuffer
  (setq enable-recursive-minibuffers t)

  ;;; Ignore case basically everywhere
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  (setq-default case-fold-search t)

  ;;; `indent-for-tab-command' functionality.
  (setopt tab-always-indent 'complete
          tab-first-completion 'word)

  ;;; Provide
  (provide 'krisb-essentials)
#+end_src

** =krisb-completion.el=

*** Built-in

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Minibuffer
  (use-package minibuffer
    :ensure nil
    :custom
    (completion-cycle-threshold nil)
    (completion-lazy-hilit t)             ; Lazy highlighting; added Emacs 30.1
    (completion-auto-select 'second-tab)
    (completions-max-height 20)
    (completion-ignore-case t)
    (completion-flex-nospace t)
    (minibuffer-default-prompt-format " [%s]") ; Format of portion for default value

    ;; Completions buffer
    (completions-format 'one-column)
    (completions-detailed t) ; Show more details in completion minibuffer (inspired by `marginalia')
    (completions-group t)    ; Groups; Emacs 28

    ;; Category settings. A non-exhaustve list of known completion categories:
    ;; - `bookmark'
    ;; - `buffer'
    ;; - `charset'
    ;; - `coding-system'
    ;; - `color'
    ;; - `command' (e.g. `M-x')
    ;; - `customize-group'
    ;; - `environment-variable'
    ;; - `expression'
    ;; - `face'
    ;; - `file'
    ;; - `function' (the `describe-function' command bound to `C-h f')
    ;; - `info-menu'
    ;; - `imenu'
    ;; - `input-method'
    ;; - `kill-ring'
    ;; - `library'
    ;; - `minor-mode'
    ;; - `multi-category'
    ;; - `package'
    ;; - `project-file'
    ;; - `symbol' (the `describe-symbol' command bound to `C-h o')
    ;; - `theme'
    ;; - `unicode-name' (the `insert-char' command bound to `C-x 8 RET')
    ;; - `variable' (the `describe-variable' command bound to `C-h v')
    ;; - `consult-grep'
    ;; - `consult-isearch'
    ;; - `consult-kmacro'
    ;; - `consult-location'
    ;; - `embark-keybinding'
    (completion-category-defaults
     '((buffer (styles . (basic substring)))
       (unicode-name (styles . (basic substring)))
       (project-file (styles . (substring)))
       (xref-location (styles . (substring)))
       (info-menu (styles . (basic substring)))
       (symbol-help (styles . (basic shorthand substring)))
       (calendar-month (display-sort-function . identity))))
    (completion-category-overrides
     '((file (styles . (basic partial-completion flex))) ; Include `partial-completion' to enable wildcards and partial paths.
       (citar-candidate (styles basic substring)))))

  ;;; Crm
  (use-package crm
    :ensure nil
    :config
    ;; Add prompt indicator to `completing-read-multiple'. We display
    ;; [CRM<separator>], e.g., [CRM,] if the separator is a comma. Taken from
    ;; https://github.com/minad/vertico
    (defun krisb-crm-indicator (args)
      (cons (format "[completing-read-multiple: %s]  %s"
                    (propertize
                     (replace-regexp-in-string
                      "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                      crm-separator)
                     'face 'error)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'krisb-crm-indicator))
#+end_src

*** Accessories

Enhancements to all built-in-based completions.
#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Marginalia
  ;; Enable richer annotations in minibuffer (companion package of consult.el)
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    (marginalia-field-width 80)
    (marginalia-align-offset -2)          ; Two to the left
    :config
    (marginalia-mode 1))

  ;;; Prescient
  ;; Sorting and filtering of minibuffer candidates. The difference between
  ;; `orderless' and this package is that `orderless' filters but does not sort -
  ;; it leaves that up to the "candidate source and the completion UI."
  ;; Additionally, `orderless' has style "dispatchers," i.e., I can define
  ;; predicates for what filtering style to use for which token
  (use-package prescient
    :custom
    ;; (completion-styles '(prescient flex))
    ;; NOTE 2024-02-03: Flex is chosen as a backup in case nothing in prescient is
    ;; matched, which only happens if I'm clueless about what I'm searching for.
    ;; We prefer this over adding the fuzzy matching in `prescient-filter-method'
    ;; because we don't want a bunch of random results included in the filtered
    ;; prescient results and cluttering it
    (prescient-filter-method '(literal initialism regexp))
    (prescient-aggressive-file-save t)
    (prescient-sort-full-matches-first t)
    (prescient-history-length 200)
    (prescient-frequency-decay 0.997)
    (prescient-frequency-threshold 0.05)
    :config
    (prescient-persist-mode 1))

  ;;; Orderless
  ;; Alternative and powerful completion style (i.e. filters candidates)
  (use-package orderless
    :custom
    (completion-styles '(orderless flex))
    (orderless-matching-styles
     '(orderless-regexp
       orderless-prefixes
       orderless-initialism
       ;; orderless-literal
       ;; orderless-flex
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-style-dispatchers '(krisb-orderless-consult-dispatch))
    :config
    ;; Eglot forces `flex' by default.
    (add-to-list 'completion-category-overrides '(eglot (styles . (orderless flex))))

    ;; Taken from Doom
    (defun krisb-orderless-consult-dispatch (pattern _index _total)
      "Basically `orderless-affix-dispatch-alist' but with prefixes too."
      (cond
       ;; Ensure $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" pattern)
        `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
       ;; Ignore single !
       ((string= "!" pattern) `(orderless-literal . ""))
       ;; Without literal
       ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
       ((string-suffix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1 -1)))
       ;; Character folding
       ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
       ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
       ;; Initialism matching
       ((string-prefix-p "," pattern) `(orderless-initialism . ,(substring pattern 1)))
       ((string-suffix-p "," pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
       ;; Literal matching
       ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
       ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
       ;; Flex matching
       ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
       ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1))))))
#+end_src

*** Minibuffer completion

**** Vertico

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Vertico
  ;;;; Itself
  (use-package vertico
    :pin gnu-elpa-devel
    :bind ("C-M-s-." . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save)
    :custom
    (vertico-count 13)
    (vertico-resize 'grow-only)
    (vertico-cycle nil)
    :init
    (vertico-mode 1)
    :config
    (require 'krisb-vertico))

  ;;;; Vertico-directory
  ;; More convenient path modification commands
  (use-package vertico-directory
    :requires vertico
    :ensure nil
    :bind ( :map vertico-map
            ("RET" . vertico-directory-enter)
            ("DEL" . vertico-directory-delete-char)
            ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  ;;;; Vertico-multiform
  (use-package vertico-multiform
    :requires vertico
    :ensure nil
    :custom
    (vertico-multiform-categories
     '((consult-grep buffer)
       (imenu buffer)
       (buffer (vertico-sort-function . nil))
       (citar (vertico-sort-function . vertico-sort-history-alpha))))
    (vertico-multiform-commands
     '(;; I use jinx now, but I think it's better to not apply a grid layout to it
       ;; since its use of vertico-groups is useful
       ("flyspell-correct-*" grid (vertico-grid-annotate . 20))
       (pdf-view-goto-label (vertico-sort-function . nil))
       (".+-history" (vertico-sort-function . nil))))
    :config
    (vertico-multiform-mode 1))

  ;;;; Vertico-buffer
  (use-package vertico-buffer
    :requires vertico
    :ensure nil
    :custom
    (vertico-buffer-hide-prompt nil)
    (vertico-buffer-display-action '(display-buffer-reuse-window)))

  ;;;; Vertico-prescient
  (use-package vertico-prescient
    :requires prescient
    :after vertico
    :custom
    (vertico-prescient-completion-styles '(prescient flex))
    (vertico-prescient-enable-sorting t)
    (vertico-prescient-override-sorting nil)
    (vertico-prescient-enable-filtering nil) ; We want orderless to do the filtering
    ;; Only set if `vertico-prescient-enable-filtering' is non-nil. See also
    ;; `prescient--completion-recommended-overrides'
    (vertico-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (vertico-prescient-mode 1))
#+end_src

*** Inline completion

**** Corfu

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;;; Corfu
  ;; Faster, minimal, and more lightweight autocomplete that is more faithful to
  ;; the Emacs infrastructure
  ;;;;; Itself
  (use-package corfu
    :bind ( :map corfu-map
            ("M-d" . corfu-info-documentation))
    :custom
    (corfu-auto nil) ; REVIEW 2024-09-20: Perhaps try https://github.com/minad/corfu?tab=readme-ov-file#auto-completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-on-exact-match 'insert)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)     ; Always have the same width
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle nil)

    ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
    ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
    ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
    ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
    ;; configuration already has pre-prepared). Necessary for manual corfu usage with
    ;; orderless, otherwise first component is ignored, unless `corfu-separator'
    ;; is inserted.
    (corfu-quit-at-boundary nil)
    (corfu-separator ?\s)            ; Use space
    (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
    (corfu-preview-current t)
    (corfu-preselect 'valid)
    :custom-face
    ;; Always use a fixed-pitched font for corfu; variable pitch fonts (which will
    ;; be adopted in a variable pitch buffer) have inconsistent spacing
    (corfu-default ((t (:inherit 'default))))
    :config
    (global-corfu-mode 1)

    ;; Enable corfu in minibuffer if `vertico-mode' is disabled. From
    ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
    (defun krisb-corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if vertico is not active."
      (unless (bound-and-true-p vertico-mode)
        (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'krisb-corfu-enable-in-minibuffer 1))

  ;;;;; Corfu-history
  ;; Save the history across Emacs sessions
  (use-package corfu-history
    :ensure nil
    :hook (corfu-mode . corfu-history-mode)
    :config
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;;;;; Corfu-popupinfo
  ;; Documentation window for corfu!
  (use-package corfu-popupinfo
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind ( :map corfu-map
            ([remap corfu-info-documentation] . corfu-popupinfo-toggle)
            ("M-l" . corfu-popupinfo-location))
    :custom
    (corfu-popupinfo-delay '(0.5 . 0.3))
    (corfu-popupinfo-direction '(right left vertical))
    (corfu-popupinfo-hide t)
    (corfu-popupinfo-resize t)
    (corfu-popupinfo-max-height 20)
    (corfu-popupinfo-max-width 70)
    (corfu-popupinfo-min-height 1)
    (corfu-popupinfo-min-width 30))

  ;;;;; Corfu-prescient
  (use-package corfu-prescient
    :requires prescient
    :after corfu
    :custom
    (corfu-prescient-completion-styles '(prescient flex))
    (corfu-prescient-enable-sorting t)
    (corfu-prescient-override-sorting nil)
    (corfu-prescient-enable-filtering nil) ; We want orderless to do the filtering
    ;; Only set if `corfu-prescient-enable-filtering' is non-nil. See also
    ;; `prescient--completion-recommended-overrides'
    (corfu-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (corfu-prescient-mode 1))
#+end_src

**** Cape

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Cape
  ;; Expand capf functionality with corfu! See an updated list of the defined capf
  ;; functions in the package's commentary.
  (use-package cape
    :bind (("C-M-s-c p" . completion-at-point)
           ("C-M-s-c d" . cape-dabbrev)
           ("C-M-s-c h" . cape-history)
           ("C-M-s-c f" . cape-file)
           ("C-M-s-c k" . cape-keyword)
           ("C-M-s-c s" . cape-elisp-symbol)
           ("C-M-s-c a" . cape-abbrev)
           ("C-M-s-c w" . cape-dict)
           ("C-M-s-c l" . cape-line)
           ("C-M-s-c \\" . cape-tex)
           ("C-M-s-c _" . cape-tex)
           ("C-M-s-c ^" . cape-tex)
           ("C-M-s-c &" . cape-sgml)
           ("C-M-s-c r" . cape-rfc1345)
           ([remap dabbrev-completion] . cape-dabbrev))
    :custom
    (cape-dabbrev-min-length 2)
    :init
    ;; These are added to the global definition of
    ;; `completion-at-point-functions', which acts as a fallback if buffer-local
    ;; values end in `t'. Read (info "(cape) Configuration") for an explanation.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)

    ;; Macro to help adding capfs via hooks
    (defmacro kb/cape-setup-capfs (label hooks capfs)
      "Set up `completion-at-point-functions' for HOOKS.
  CAPFS are a list of `completion-at-point-functions'. Adds CAPFS when a
  hook in HOOKS is run. These effects are added by a defined function with
  LABEL appended to `kb/cape-setup-capfs-'.

  The order of elements in CAPFS are the order they will appear in
  `completion-at-point-functions' for that buffer. That is, the first
  element in CAPFS will be the first element in
  `completion-at-point-functions'.

  This macro does not affect capfs already in
  `completion-at-point-functions' nor how later capfs are added to
  `completion-at-point-functions'."
      (declare (indent 0))
      `(dolist (hook ,hooks)
         (add-hook hook
                   (defun ,(intern (concat "kb/cape-setup-capfs-" label)) ()
                     (dolist (capf (reverse ,capfs))
                       (add-to-list 'completion-at-point-functions capf))))))

    (kb/cape-setup-capfs
      "elisp"
      '(emacs-lisp-mode-hook lisp-interaction-mode-hook)
      (list #'cape-file #'cape-elisp-symbol))

    (kb/cape-setup-capfs
      "commit"
      '(git-commit-mode-hook vc-git-log-edit-mode-hook)
      (list #'cape-elisp-symbol #'cape-dabbrev)))
#+end_src

*** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Provide
  (provide 'krisb-completion)
#+end_src

** Appearance

*** =krisb-themes.el=

#+begin_src emacs-lisp :tangle "modules/krisb-themes.el"
  ;;; Modus-themes
  (use-package modus-themes
    :custom
    (modus-themes-custom-auto-reload t) ; Only applies to `customize-set-variable' and related
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs nil)
    (modus-themes-mixed-fonts t)
    (modus-themes-prompts '(semibold))
    (modus-themes-completions '(((matches . (heavy))
                                 (selection . (semibold)))))
    (modus-themes-variable-pitch-ui nil)
    (modus-themes-headings '((t . (semibold))))
    :config
    ;; Overrides
    (setopt modus-themes-common-palette-overrides
            `(;; Completion
              (fg-completion-match-0 fg-main) ; See (info "(modus-themes) Make headings more or less colorful")
              (fg-completion-match-1 fg-main)
              (fg-completion-match-2 fg-main)
              (fg-completion-match-3 fg-main)
              (bg-completion-match-0 bg-blue-intense)
              (bg-completion-match-1 bg-yellow-intense)
              (bg-completion-match-2 bg-cyan-intense)
              (bg-completion-match-3 bg-red-intense)

              ;; "Invisible" border in mode line. See (info "(modus-themes) Make the
              ;; mode line borderless")
              (border-mode-line-active bg-mode-line-active)
              (border-mode-line-inactive bg-mode-line-inactive)

              ;; Headings
              (fg-heading-1 red-faint)
              (fg-heading-6 rainbow-0)

              ;; Make the fringe invisible
              (fringe unspecified)

              ;; More noticeable block (e.g. org) backgrounds
              (bg-prose-block-contents bg-active-value))
            modus-operandi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#cab9b2")
              (fg-mode-line-active        "#000000")
              (bg-mode-line-inactive      "#dfd9cf")
              (fg-mode-line-inactive      "#585858")


              )
            modus-vivendi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#484d67")
              (fg-mode-line-active        "#ffffff")
              (bg-mode-line-inactive      "#292d48")
              (fg-mode-line-inactive      "#969696")))

    (defun krisb-modus-themes--setup-font-lock (theme)
      "Set up font-lock faces."
      ;; As described in (info "(modus-themes) DIY Measure color contrast"), I can
      ;; check for contrast by making sure the color contrast (relative luminance)
      ;; between the foreground and background color is at least 7:1.
      ;;
      ;; Like:
      ;;    (modus-themes-contrast (modus-themes-with-colors bg-main) (face-foreground 'font-lock-function-call-face))
      (cond
       ((string-match "^modus-operandi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#161BA1"))
       ((string-match "^modus-vivendi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#66B1F2"))))
    (add-hook 'enable-theme-functions #'krisb-modus-themes--setup-font-lock))

  ;;; Cursory
  ;; Global and local cursor presets
  (use-package cursory
    :hook ((prog-mode . (lambda () (cursory-set-preset 'code :local)))
           ((org-mode markdown-mode) . (lambda () (cursory-set-preset 'prose :local))))
    :custom
    (cursory-latest-state-file (no-littering-expand-var-file-name "cursory/cursory-latest-state"))
    (cursory-presets
     '((code
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1)
       (prose
        :cursor-type (bar . 2)
        :blink-cursor-mode -1
        :cursor-in-non-selected-windows (hbar . 3))
       (default)
       (t                                 ; The fallback values
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1
        :blink-cursor-blinks 10
        :blink-cursor-delay 5
        :blink-cursor-interval 0.5)))
    :config
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (when (file-exists-p cursory-latest-state-file)
      (cursory-set-preset (or (cursory-restore-latest-preset) 'default)))

    ;; Persist latest preset used across Emacs sessions
    (cursory-mode 1))


  ;;; Lin
  ;; Lin is a stylistic enhancement for Emacs' built-in `hl-line-mode'. It remaps
  ;; the `hl-line' face (or equivalent) buffer-locally to a style that is optimal
  ;; for major modes where line selection is the primary mode of interaction.
  (use-package lin
    :custom
    (lin-face 'lin-cyan)
    :config
    (lin-global-mode 1)

    (add-to-list 'lin-mode-hooks 'LaTeX-mode-hook))

  ;;; Pulsar
  ;; Alternative to `pulse.el'
  (use-package pulsar
    ;; TODO 2024-10-18: Redistribute to their respective use-package declarations
    :hook ((consult-after-jump . pulsar-recenter-top)
           (consult-after-jump . pulsar-reveal-entry)
           (imenu-after-jump . pulsar-recenter-top)
           (imenu-after-jump . pulsar-reveal-entry))
    :custom
    (pulsar-pulse t)
    (pulsar-face 'pulsar-red)
    (pulsar-delay 0.05)
    (pulsar-iterations 5)
    :config
    (pulsar-global-mode 1))

  ;;; Provide
  (provide 'krisb-themes)
#+end_src

*** =krisb-fonts.el=

#+begin_src emacs-lisp :tangle "modules/krisb-fonts.el"
  ;;; Fontaine
  ;; Define then apply face presets
  (use-package fontaine
    :demand
    :custom
    (fontaine-latest-state-file (no-littering-expand-var-file-name "fontaine/fontaine-latest-state.eld"))
    (fontaine-presets
     '((iosevka-variant
        :default-family "Iosevka SS11"
        :fixed-pitch-family "Iosevka")
       (default)                          ; Use fallback values
       ;; Below are the shared fallback properties. I leave them there also as
       ;; reference for all possible properties
       (t
        ;; Alternatives:
        :default-family "Iosevka Term SS04"
        :default-weight regular
        :default-slant normal
        :default-width normal
        :default-height 165

        ;; Alternatives
        ;; "Hack Nerd Font Mono"
        :fixed-pitch-family "Iosevka"
        :fixed-pitch-weight nil
        :fixed-pitch-slant nil
        :fixed-pitch-width nil
        :fixed-pitch-height 1.0

        :fixed-pitch-serif-family nil
        :fixed-pitch-serif-weight nil
        :fixed-pitch-serif-slant nil
        :fixed-pitch-serif-width nil
        :fixed-pitch-serif-height 1.0

        ;; Alternatives:
        ;; "LiterationSerif Nerd Font"       ; Variable
        ;; "Latin Modern Mono Prop"          ; Monospace
        ;; "Sans Serif"
        ;; "Open Sans" (1.1 height)
        :variable-pitch-family "Overpass Nerd Font Propo"
        :variable-pitch-weight nil
        :variable-pitch-slant nil
        :variable-pitch-width nil
        :variable-pitch-height 1.2

        ;; Alternatives:
        ;; "JetBrainsMono Nerd Font"
        :mode-line-active-family "Iosevka Aile"
        :mode-line-active-weight nil
        :mode-line-active-slant nil
        :mode-line-active-width nil
        :mode-line-active-height 0.93

        :mode-line-inactive-family "Iosevka Aile"
        :mode-line-inactive-weight nil
        :mode-line-inactive-slant nil
        :mode-line-inactive-width nil
        :mode-line-inactive-height 0.93

        :header-line-family nil
        :header-line-weight nil
        :header-line-slant nil
        :header-line-width nil
        :header-line-height 1.0

        :line-number-family nil
        :line-number-weight nil
        :line-number-slant nil
        :line-number-width nil
        :line-number-height 1.0

        :tab-bar-family "Overpass Nerd Font"
        :tab-bar-weight nil
        :tab-bar-slant nil
        :tab-bar-width nil
        :tab-bar-height 0.93

        :tab-line-family nil
        :tab-line-weight nil
        :tab-line-slant nil
        :tab-line-width nil
        :tab-line-height 1.0


        :bold-slant nil
        :bold-weight bold
        :bold-width nil
        :bold-height 1.0

        :italic-family nil
        :italic-weight nil
        :italic-slant italic
        :italic-width nil
        :italic-height 1.0

        :line-spacing nil)))
    :config
    ;; Set the last preset or fall back to desired style from `fontaine-presets'
    (when (file-exists-p fontaine-latest-state-file)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default)))

    ;; Persist the latest font preset when closing/starting Emacs and while
    ;; switching between themes.
    (fontaine-mode 1)

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))

  ;;; Provide
  (provide 'krisb-fonts)
#+end_src

** Writing and reading

*** =krisb-prose.el=

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Olivetti
  (use-package olivetti
    :hook ((org-mode Info-mode emacs-news-view-mode org-msg-edit-mode) . olivetti-mode)
    :custom
    (olivetti-lighter nil)
    (olivetti-body-width 0.6)
    (olivetti-minimum-body-width 80)
    (olivetti-margin-width 8)
    (olivetti-style 'fancy)              ; Fancy makes the buffer look like a page
    ;; FIXME 2024-01-11: This is a temporary solution. Olivetti's changing of
    ;; margins and fringes messes with the calculation of
    ;; `mode--line-format-right-align', which determines where the right side of
    ;; the mode line is placed.
    (mode-line-format-right-align
     '(:eval (if (and (bound-and-true-p olivetti-mode)
                      olivetti-style)     ; 'fringes or 'fancy
                 (let ((mode-line-right-align-edge 'right-fringe))
                   (mode--line-format-right-align))
               (mode--line-format-right-align))))
    :config
    (defun kb/olivetti--setup-faces (&optional _theme)
      "Set custom colors for `olivetti'."
      (when (fboundp 'modus-themes-with-colors)
        (set-face-attribute 'olivetti-fringe nil
                            :background (modus-themes-with-colors bg-dim)
                            :inherit 'unspecified)))
    (add-hook 'enable-theme-functions #'kb/olivetti--setup-faces))

  ;;; Astute.el
  (use-package astute
    :hook (org-mode . astute-mode)
    :custom
    (astute-lighter "")
    (astute-prefix-single-quote-exceptions
     '("bout"
       "em"
       "n'"
       "cause"
       "round"
       "twas"
       "tis")))

  ;;; Provide
  (provide 'krisb-prose)
#+end_src

*** =krisb-org.el=

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Built-in
  ;;;; Org
  (use-package org
    :hook ((org-mode . variable-pitch-mode)
           (org-mode . visual-line-mode)
           (org-mode . (lambda () (setq-local line-spacing 0.2 fill-column 120))))
    :bind (("C-M-s-s" . org-store-link)
           :map krisb-note-keymap
           ("c" . org-capture))
    :custom
    (org-directory krisb-org-directory)

    ;; Headline appearance
    (org-hide-leading-stars nil)
    (org-n-level-faces 8)
    (org-cycle-separator-lines 2)
    (org-cycle-level-faces t)
    (org-ellipsis " â®·")
    (org-startup-folded 'nofold)
    (org-tags-column 0)

    ;; Markup appearance
    (org-hide-emphasis-markers t)     ; Remove org-mode markup characters
    (org-hide-macro-markers nil)
    (org-pretty-entities t)           ; Show as UTF-8 characters (useful for math)
    (org-pretty-entities-include-sub-superscripts t) ; Show superscripts and subscripts? Also see `org-export-with-sub-superscripts'
    (org-use-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-hidden-keywords nil)

    ;; Movement
    (org-special-ctrl-a/e t)
    (org-ctrl-k-protect-subtree 'error)

    ;; Plain lists
    (org-list-allow-alphabetical t)
    (org-list-use-circular-motion t)

    ;; Headline insertion
    (org-blank-before-new-entry
     '((heading . auto)
       ;; Don't let Emacs make decisions about where to insert newlines
       (plain-list-item . nil)))
    (org-insert-heading-respect-content nil) ; Let M-RET make heading in place
    (org-M-RET-may-split-line '((table . nil)
                                (default . t)))

    ;; Blocks
    (org-structure-template-alist
     '(("s" . "src")
       ("e" . "src emacs-lisp")
       ("E" . "src emacs-lisp :results value code :lexical t")
       ("t" . "src emacs-lisp :tangle FILENAME")
       ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
       ("x" . "example")
       ("X" . "export")
       ("v" . "verse")
       ("c" . "comment")
       ("q" . "quote")))

    ;; Other
    (org-file-apps
     '((directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . default)
       ("\\.docx\\'" . system)
       ("\\.odt\\'" . system)
       ;; Default to `auto-mode-alist'
       (auto-mode . emacs)))
    (org-fold-catch-invisible-edits 'show-and-error)
    (org-edit-timestamp-down-means-later t)
    :custom-face
    (org-quote ((t (:family ,(face-attribute 'variable-pitch :family) :extend t :inherit 'org-block))))
    (org-ellipsis ((t (:box unspecified :inherit default)))) ; Don't make line taller because of org-ellipsis
    :config
    ;; Make org-open-at-point follow file links in the same window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    ;; Pulsar pulses
    (with-eval-after-load 'pulsar
      (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
        (add-hook hook #'pulsar-recenter-center)
        (add-hook hook #'pulsar-reveal-entry))))

  ;;;; Org-faces
  (use-package org-faces
    :ensure nil
    :custom
    (org-fontify-todo-headline nil)
    (org-fontify-done-headline nil)
    (org-fontify-whole-block-delimiter-line nil)
    (org-fontify-quote-and-verse-blocks t))

  ;;;; Org-src
  (use-package org-src
    :ensure nil
    :custom
    (org-src-fontify-natively t)
    (org-src-window-setup 'current-window)
    (org-src-block-faces nil) ; Open src block window on current buffer were in the language's major mode
    (org-edit-src-turn-on-auto-save nil)
    (org-edit-src-auto-save-idle-delay 3))


  ;;;; Org-id
  (use-package org-id
    :ensure nil
    :custom
    (org-clone-delete-id t)
    (org-id-method 'ts)
    (org-id-link-to-org-use-id 'use-existing))

  ;;;; Org-attach
  (use-package org-attach
    :ensure nil
    :custom
    (org-attach-preferred-new-method 'id) ; Necessary to add the ATTACH tag
    (org-attach-auto-tag "ATTACH")
    (org-attach-dir-relative nil)         ; Use relative file paths?
    (org-attach-id-dir (expand-file-name "resources" org-directory))
    (org-attach-method 'cp)            ; Attach copies of files
    (org-attach-archive-delete 'query) ; If subtree is deleted or archived, ask user
    (org-attach-id-to-path-function-list
     '(org-attach-id-ts-folder-format
       org-attach-id-uuid-folder-format
       org-attach-id-fallback-folder-format)))

  ;;;; Org-footnote
  (use-package org-footnote
    :ensure nil
    :after org
    :custom
    (org-footnote-section nil)            ; Don't create footnote headline
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline nil))

  ;;;; Org-babel
  (use-package ob
    :ensure nil
    :custom
    (org-babel-load-languages '((python . t)
                                (emacs-lisp . t)))
    (org-confirm-babel-evaluate nil))

  ;;;; Org-num
  (use-package org-num
    :ensure nil
    :diminish
    :bind ( :map krisb-toggle-keymap
            ("n" . org-num-mode))
    :custom
    (org-num-face 'fixed-pitch)
    (org-num-skip-commented t)
    (org-num-skip-footnotes t)
    (org-num-skip-unnumbered t))

  ;;; Org-modern
  (use-package org-modern
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda))
    :custom
    (org-modern-keyword nil)

    (org-modern-hide-stars "Â· ") ; Is affected by the value of `org-hide-leading-stars'
    (org-modern-star 'fold)
    (org-modern-fold-stars
     '(("â–¶" . "â–¼")
       ("â–·" . "â–½")
       ("â¯ˆ" . "â¯†")
       ("â–¹" . "â–¿")
       ("â–¸" . "â–¾")))

    (org-modern-todo t) ; NOTE 2024-10-10: I set `org-modern-todo-faces' in my org-agenda section
    (org-modern-priority t)
    ;; See my value for `org-priority-faces'
    (org-modern-priority-faces
     '((?A :inverse-video t :inherit (bold org-priority))
       (?B :inverse-video t :inherit (bold org-priority))
       (?C :inverse-video t :inherit org-priority)
       (?D :inverse-video t :inherit org-priority)
       (?E :inverse-video t :inherit (shadow org-priority))
       (?F :inverse-video t :inherit (shadow org-priority))))
    ;; See my value for `org-todo-keyword-faces'
    (org-modern-todo-faces
     '(("NEXT" :inherit (bold success org-modern-todo))
       ("TODO" :inherit (org-todo org-modern-todo))
       ("HOLD" :inherit (shadow error org-modern-todo))
       ("MAYBE" :inherit (shadow org-todo org-modern-todo))
       ("DONE" :inherit (bold org-done org-modern-todo))
       ("CANCELED" :inherit (error org-modern-todo))))

    (org-modern-label-border 3)
    (org-modern-tag t)

    (org-modern-block-fringe nil) ; Doesn't work well with `olivetti-style' set to 'fancy
    (org-modern-block-name '("âŒœ" . "âŒž"))

    (org-modern-footnote '(nil (raise 0.15) (height 0.9)))
    (org-modern-list '((?+ . "â—¦")
                       (?- . "â€“")
                       (?* . "â€¢")))
    (org-modern-timestamp t)

    (org-modern-table t)
    (org-modern-table-vertical 3)
    (org-modern-table-horizontal 0.1)
    :custom-face
    (org-modern-label
     ((t :height 0.9 :width condensed :weight regular :underline nil)))
    (org-modern-todo ((t :weight semibold :inverse-video t :inherit org-modern-label)))
    :config
    (defun krisb-modus-themes--setup-org-modern (theme)
      "Set up org-modern faces."
      (when (string-match "^modus-" (symbol-name theme))
        ;; See my value for `org-tag-faces'
        (setopt org-modern-tag-faces
                `(("project"
                   :foreground ,(face-background 'default nil t)
                   :background ,(face-foreground 'modus-themes-fg-magenta-cooler nil t))))))
    (add-hook 'enable-theme-functions #'krisb-modus-themes--setup-org-modern))

  ;;; Org-appear
  ;; Show hidden characters (e.g. emphasis markers, link brackets) when point is
  ;; over enclosed content
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-delay 0.0)
    (org-appear-trigger 'always)
    (org-appear-autoemphasis t)
    (org-appear-autolinks 'just-brackets)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    (org-appear-inside-latex t))

  ;;; Provide
  (provide 'krisb-org)
#+end_src

** Blogging

*** =krisb-mermaid.el=

#+begin_src emacs-lisp :tangle "modules/krisb-mermaid.el"
  ;;; Mermaid-mode
  (use-package mermaid-mode)

  ;;; Ob-mermaid
  ;; Mermaid diagrams
  (use-package ob-mermaid
    :ensure-system-package (mmdc . mermaid-cli)
    :custom
    (ob-mermaid-cli-path (executable-find "mmdc"))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append '((mermaid . t)) org-babel-load-languages)))

  ;;; Provide
  (provide 'krisb-mermaid)
#+end_src

* Lisp (libraries)
:PROPERTIES:
:VISIBILITY: children
:END:

** =krisb-common.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-common.el"
  ;;; krisb-common.el --- Common variables and functions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Variables and functions I use throughout my Emacs config.

  ;;; Code:

  ;;; Variables

  ;;;; Me
  (setq user-full-name "Kristoffer Balintona"
        user-mail-address "krisbalintona@gmail.com")

  ;;;; System
  (defconst krisb-system-win-p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst krisb-system-mac-p
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst krisb-system-linux-p
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst krisb-linux-distribution
    (when krisb-system-linux-p (shell-command-to-string "printf %s \"$(lsb_release -sd)\""))
    "An escaped string that has the name of my Linux distribution.")

  (defconst krisb-linux-ubuntu-p
    (integerp (string-match "Ubuntu" krisb-linux-distribution))
    "Is this Ubuntu?")

  (defconst krisb-linux-fedora-p
    (integerp (string-match "Fedora" krisb-linux-distribution))
    "Is this Fedora?")

  (defconst krisb-linux-arch-p
    (integerp (string-match "Arch" krisb-linux-distribution))
    "Is this Arch Linux?")

  ;;;; Org
  (defvar krisb-org-directory (expand-file-name "org-database" "~/Documents")
    "The directory holding my org files.
  Meant to be used as the value of `org-directory'.")

  (defvar krisb-notes-directory (expand-file-name "notes" krisb-org-directory)
    "My notes directory.")

  (defvar krisb-blog-directory (expand-file-name "blog" krisb-notes-directory)
    "The directory for my pre-export blog files.")

  (defvar krisb-org-agenda-directory (expand-file-name "agenda" krisb-org-directory)
    "The directory holding my main org-agenda files.")

  (defvar krisb-org-agenda-main-file (expand-file-name "todo.org" krisb-org-agenda-directory)
    "My main org-agenda file.")

  (defvar krisb-org-agenda-directory-files (cl-remove-if
                                            (lambda (f)
                                              (string-match-p (rx "archive.org") f))
                                            (directory-files-recursively krisb-org-agenda-directory ".org$"))
    "A list of all org and org_archive files in `krisb-org-directory'.")

  (defvar krisb-bibliography-files (list (expand-file-name "master-lib.bib" krisb-org-directory))
    "A list of my bibliography (.bib) files.")

  ;;; Functions

  ;;; Macros

  ;;; Commands

  ;;; Keymaps
  (defvar-keymap krisb-note-keymap
    :doc "Prefix for my note-taking needs.")
  (bind-key "C-c n" krisb-note-keymap 'global-map)

  (defvar-keymap krisb-lsp-keymap
    :doc "Prefix for lsp-related commands.")
  (with-eval-after-load 'lsp-mode
    (bind-key "C-c l" krisb-lsp-keymap 'lsp-mode-map))

  (defvar-keymap krisb-file-keymap
    :doc "Prefix for file-related commands.")
  (bind-key "C-c f" krisb-file-keymap 'global-map)

  (defvar-keymap krisb-yank-keymap
    :doc "Prefix for yanking stuff.")
  (bind-key "C-c i" krisb-yank-keymap 'global-map)

  (defvar-keymap krisb-open-keymap
    :doc "Prefix for opening various hings.")
  (bind-key "C-c o" krisb-open-keymap 'global-map)

  (defvar-keymap krisb-toggle-keymap
    :doc "Prefix for toggling stuff.")
  (bind-key "C-M-s-t" krisb-toggle-keymap 'global-map)


  ;;; Provide
  (provide 'krisb-common)
  ;;; krisb-common.el ends here
#+end_src

** =krisb-vertico.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-vertico.el"
  ;;; krisb-vertico.el --- Vertico extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extension to Vertico.

  ;;; Code:
  (require 'vertico)

  ;;; Tab for tramp paths
  ;; Exception for TAB behavior when completing TRAMP paths. See
  ;; https://github.com/minad/vertico/wiki#restore-old-tab-behavior-when-completing-tramp-paths
  (defun krisb-vertico-insert-unless-tramp ()
    "Insert current candidate in minibuffer, except for tramp."
    (interactive)
    (if (vertico--remote-p (vertico--candidate))
        (minibuffer-complete)
      (vertico-insert)))
  (bind-key [remap vertico-insert] #'krisb-vertico-insert-unless-tramp 'vertico-map)

  ;;; Exceptions for org commands
  ;; Special for `org-agenda-filter' and `org-tags-view'. See
  ;; https://github.com/minad/vertico?tab=readme-ov-file#org-agenda-filter-and-org-tags-view
  (defun krisb-vertico-org-enforce-basic-completion (&rest args)
    (minibuffer-with-setup-hook
        (:append
         (lambda ()
           (let ((map (make-sparse-keymap)))
             (define-key map [tab] #'minibuffer-complete)
             (use-local-map (make-composed-keymap (list map) (current-local-map))))
           (setq-local completion-styles (cons 'basic completion-styles)
                       vertico-preselect 'prompt)))
      (apply args)))
  (with-eval-after-load 'org
    (declare-function org-make-tags-matcher "org")
    (advice-add #'org-make-tags-matcher :around #'krisb-vertico-org-enforce-basic-completion))
  (with-eval-after-load 'org-agenda
    (declare-function org-agenda-filter "org-agenda")
    (advice-add #'org-agenda-filter :around #'krisb-vertico-org-enforce-basic-completion))

  ;;; Truncate long filenames
  ;; Left-truncate filename candidates. Taken from
  ;; https://github.com/minad/vertico/wiki#left-truncate-recentf-filename-candidates-eg-for-consult-buffer
  (defun krisb-vertico-truncate-filename-candidates (args)
    (if-let ((arg (car args))
             (type (get-text-property 0 'multi-category arg))
             ((eq (car-safe type) 'file))
             (w (max 30 (- (window-width) 38)))
             (l (length arg))
             ((> l w)))
        (setcar args (concat "â€¦" (truncate-string-to-width arg l (- l w)))))
    args)
  (advice-add #'vertico--format-candidate :filter-args #'krisb-vertico-truncate-filename-candidates)

  ;;; Provide
  (provide 'krisb-vertico)
  ;;; krisb-vertico.el ends here
#+end_src

* COMMENT Removed
:PROPERTIES:
:VISIBILITY: folded
:END:

These are lines I've removed while porting to a literate config.
#+begin_src emacs-lisp :tangle no :results none
  ;; Kill child processes without confirm
  (custom-set-variables '(confirm-kill-processes nil))

  ;; Don't confirm when killing a process
  (setq confirm-kill-processes nil)

  ;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
  ;; Emacs to its own devices there.
  (unless krisb-system-win-p
    (setq selection-coding-system 'utf-8))
#+end_src

* Local variables :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

# Local Variables:
# org-src-fontify-natively: nil
# End:

#  LocalWords:  Vertico Minibuffer

#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t
#+startup: content

* Emacs build

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization

** =early-init.el=

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

*** Garbage collection

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations

**** Doom Emacs' suggestions

All of the settings below are taken from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; These are the three ways to increase scrolling performance.
  ;; See (info "(emacs) Scrolling") for details. Introduced in Emacs HEAD
  ;; (b2f8c9f), this inhibits fontification while receiving input, which should
  ;; help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)
#+end_src

**** Other optimizations

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Prevent loading any packages prior to init.el. Speeds up startup but packages
  ;; must be initizlied by `package-initialize' before any are needed.
  ;; Importnatly, if this is nil, make sure to expressly call `package-initialize'
  ;; later (and before I need non-built-in packages) to make other packages
  ;; available.
  (setq package-enable-at-startup nil)
#+end_src

*** Buffer encoding

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=

*** Add modules and bespoke libraries to ~load-path~

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Initial scratch buffer

#+begin_src emacs-lisp :tangle "init.el"
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode'
  (setopt initial-major-mode 'fundamental-mode
          initial-scratch-message "Hello ðŸ‘‹")
#+end_src

*** Load modules

#+begin_src emacs-lisp :tangle "init.el"
  (require 'krisb-package-management)
#+end_src

* Modules

** =krisb-package-management.el=

*** Configure =package.el=

#+begin_src emacs-lisp :tangle "modules/krisb-package-management.el"
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil)

  ;; We have to manually initialize package because in `early-init.el' we set
  ;; `package-enable-at-startup' to nil to speed up startup, like Doom Emacs does.
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** Make sure =use-package= is available.

#+begin_src emacs-lisp :tangle "modules/krisb-package-management.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; Then ensure use-package is available at compile time
  (eval-when-compile
    (require 'use-package))
#+end_src

*** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-package-management.el"
  (provide 'krisb-package-management)
#+end_src

* Lisp (libraries)

* COMMENT Removed

These are lines I've removed while porting to a literate config.
#+begin_src emacs-lisp :tangle no :results none
  ;; Kill child processes without confirm
  (custom-set-variables '(confirm-kill-processes nil))

  ;; Don't confirm when killing a process
  (setq confirm-kill-processes nil)

  ;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
  ;; Emacs to its own devices there.
  (unless kb/sys-win
    (setq selection-coding-system 'utf-8))
#+end_src

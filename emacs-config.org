#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t

* Emacs build
:PROPERTIES:
:VISIBILITY: folded
:END:

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization
:PROPERTIES:
:VISIBILITY: children
:END:

** =early-init.el=

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

*** Garbage collection

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations

**** Doom Emacs' suggestions

All of the settings below are taken from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)
#+end_src

**** Other optimizations

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Buffer encoding

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=

*** Add modules and bespoke libraries to ~load-path~

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Initial scratch buffer

#+begin_src emacs-lisp :tangle "init.el"
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode'
  (setopt initial-major-mode 'fundamental-mode
          initial-scratch-message "Hello 👋")
#+end_src

*** Load libraries

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load libraries
  (require 'krisb-common)
  (require 'krisb-essentials)
#+end_src

*** Package configurations

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Packages
#+end_src

**** =package=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Package.el
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil)

  (setopt load-prefer-newer t) ; Do not load outdated byte code files
#+end_src

**** =use-package=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setopt use-package-always-ensure t
          use-package-expand-minimally t  ; Verbosity of use-package macro
          use-package-always-defer nil)

  ;; Only be verbose when interpreted, otherwise errors are caught at compile time
  (setopt use-package-verbose (not (bound-and-true-p byte-compile-current-file)))

  ;; Compile statistics to be shown in `use-package-report'
  (setopt use-package-compute-statistics t)
#+end_src

**** =no-littering=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set better default package paths
  (use-package no-littering
    :init
    ;; Set these variables prior to loading the feature
    (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory) ; Config files
          no-littering-var-directory (expand-file-name "var/" user-emacs-directory)) ; Persistent files
    :config
    ;; Ensure the directories exist
    (mkdir no-littering-etc-directory t)
    (mkdir no-littering-var-directory t)

    ;; Read docstring. Sets more secure values for
    ;; `auto-save-file-name-transforms', `backup-directory-alist', and
    ;; `undo-tree-history-directory-alist'.
    (no-littering-theme-backups))
#+end_src

**** =on=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; On
  ;; Package exposes a number of utility hooks and functions ported from Doom
  ;; Emacs. The hooks make it easier to speed up Emacs startup by providing
  ;; finer-grained control of the timing at which packages are loaded. Provides
  ;; the following hooks:
  ;; - on-first-input-hook
  ;; - on-init-ui-hook
  ;; - on-first-file-hook
  ;; - on-switch-frame-hook
  ;; - on-first-buffer-hook
  ;; - on-switch-buffer-hook
  ;; - on-switch-window-hook
  (use-package on)
#+end_src

**** =system-packages=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; System-packages
  ;; Install system packages via Emacs. Necessary for use-package's
  ;; `:ensure-system-package' flag
  (use-package system-packages
    :custom
    (system-packages-noconfirm nil)
    :config
    (when (executable-find "paru")
      (add-to-list 'system-packages-supported-package-managers
                   '(paru . ((default-sudo . nil)
                             (install . "paru -S")
                             (search . "paru -Ss")
                             (uninstall . "paru -Rns")
                             (update . "paru -Syu")
                             (clean-cache . "paru -Sc")
                             (change-log . "paru -Qc")
                             (log . "cat /var/log/paru.log")
                             (get-info . "paru -Qi")
                             (get-info-remote . "paru -Si")
                             (list-files-provided-by . "paru -qQl")
                             (owning-file . "paru -Qo")
                             (owning-file-remote . "paru -F")
                             (verify-all-packages . "paru -Qkk")
                             (verify-all-dependencies . "paru -Dk")
                             (remove-orphaned . "paru -Rns $(paru -Qtdq)")
                             (list-installed-packages . "paru -Qe")
                             (list-installed-packages-all . "paru -Q")
                             (list-dependencies-of . "paru -Qi")
                             (noconfirm . "--noconfirm"))))
      (setq system-packages-package-manager 'paru
            system-packages-use-sudo nil)))
#+end_src

**** Load modules

#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Modules
  (require 'krisb-garbage-collection)
  (require 'krisb-system-env)
  (require 'krisb-essentials)
  (require 'krisb-themes)
  (require 'krisb-fonts)

  (require 'krisb-saving)
  (require 'krisb-completion)

  (require 'krisb-org)
  (require 'krisb-org-agenda)
  (require 'krisb-citations)
  (require 'krisb-pdfs)
  (require 'krisb-mermaid)
#+end_src

*** Load ~custom-file~

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load custom file
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Modules
:PROPERTIES:
:VISIBILITY: children
:END:

** Base

*** =krisb-garbage-collection.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-garbage-collection.el"
  ;; NOTE 2024-02-11: Please reference https://emacsconf.org/2023/talks/gc/ for a
  ;; statistically-informed recommendation for GC variables
  (setq garbage-collection-messages t)
  (setq gc-cons-percentage 0.15)

  ;;; GCMH
  ;; Garbage collect on when idle
  (use-package gcmh
    :diminish
    :hook ((after-init . gcmh-mode)
           (minibuffer-setup . krisb-gcmh-minibuffer-setup)
           (minibuffer-exit . krisb-gcmh-minibuffer-exit))
    :custom
    ;; For a related discussion, see
    ;; https://www.reddit.com/r/emacs/comments/bg85qm/comment/eln27qh/?utm_source=share&utm_medium=web2x&context=3
    (gcmh-high-cons-threshold (* 16       ; 16 mb, as Doom uses in doom-start.el
                                 1024 1024))
    (gcmh-idle-delay 3)
    (gcmh-verbose nil)
    :config
    (setq garbage-collection-messages nil)

    ;; Increase GC threshold when in minibuffer
    (defvar krisb-gc-minibuffer--original gcmh-high-cons-threshold
      "Temporary variable to hold `gcmh-high-cons-threshold'")

    (defun krisb-gcmh-minibuffer-setup ()
      "Temporarily have \"limitless\" `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-setup] Increasing GC threshold")
      (setq gcmh-high-cons-threshold most-positive-fixnum))

    (defun krisb-gcmh-minibuffer-exit ()
      "Restore value of `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-exit] Restoring GC threshold")
      (setq gcmh-high-cons-threshold krisb-gc-minibuffer--original))

    ;; Increase `gc-cons-threshold' while using corfu, like we do for the
    ;; minibuffer
    (with-eval-after-load 'corfu
      (advice-add 'completion-at-point :before 'krisb-gcmh-minibuffer-setup)
      (advice-add 'corfu-quit :before 'krisb-gcmh-minibuffer-exit)
      (advice-add 'corfu-insert :before 'krisb-gcmh-minibuffer-exit)))

  ;;; Diagnose memory usage
  ;; See how Emacs is using memory. From
  ;; https://www.reddit.com/r/emacs/comments/ck4zb3/comment/evji1n7/?utm_source=share&utm_medium=web2x&context=3
  (defun krisb-diagnose-garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))

  ;;; Emacs-gc-stats
  ;; Collect GC statistics. Requested by someone who'd like GC statistics:
  ;; https://www.reddit.com/r/emacs/comments/14dej62/please_help_collecting_statistics_to_optimize/.
  ;; Also see https://elpa.gnu.org/packages/emacs-gc-stats.html
  (use-package emacs-gc-stats
    :disabled t                           ; Dont collecting data
    :hook (on-first-input . emacs-gc-stats-mode)
    :custom
    ;; Optionally reset Emacs GC settings to default values (recommended)
    (emacs-gc-stats-gc-defaults 'emacs-defaults)
    (emacs-gc-stats-remind (* 7))  ; Optionally set reminder to upload the stats
    (emacs-gc-stats-inhibit-command-name-logging nil))

  ;;; Provide
  (provide 'krisb-garbage-collection)
#+end_src

*** =krisb-system-env.el=

#+begin_src emacs-lisp :tangle "modules/krisb-system-env.el"
  ;;; Exec-path-from-shell
  ;; Ensure Emacs' and system shell have same path
  (use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-variables
     '("PATH" "MANPATH" "BROWSER"
       ;; Language paths
       "GOPATH"
       ;; `ssh-agent' environment variables. See
       ;; https://wiki.archlinux.org/title/SSH_keys#Start_ssh-agent_with_systemd_user
       "SSH_AGENT_PID" "SSH_AUTH_SOCK"
       ;; For LSP-mode. See
       ;; https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization
       "LSP_USE_PLISTS"))
    :config
    (exec-path-from-shell-initialize)

    ;; For npm. Found here:
    ;; https://www.reddit.com/r/emacs/comments/s6zkb6/comment/ht794j7/?utm_source=share&utm_medium=web2x&context=3
    (when (eq (length (getenv "NODE_PATH")) 0)
      (setenv "NODE_PATH" "/usr/local/lib/node_modules")))

  ;;; Provide
  (provide 'krisb-system-env)
#+end_src

*** =krisb-essentials.el=

**** Preamble

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; krisb-essentials.el --- Essential Emacs-wide settings  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Setting general user options.

  ;;; Code:
#+end_src

**** Customize and customize buffers

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Customize
  (setopt custom-file (no-littering-expand-etc-file-name "custom.el")
          custom-safe-themes t
          custom-theme-allow-multiple-selections t
          custom-unlispify-tag-names nil
          custom-buffer-style 'links
          custom-search-field nil)
#+end_src

**** Scrolling behavior

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Scrolling
  (setopt scroll-error-top-bottom nil
          scroll-preserve-screen-position t
          scroll-margin 0
          next-screen-context-lines 6
          scroll-minibuffer-conservatively t
          scroll-conservatively 1         ; Affects `scroll-step'
          scroll-up-aggressively nil      ; Center after point leaves window?
          scroll-down-aggressively nil)   ; Center after point leaves window?

  ;;;;; Font locking
  (setopt jit-lock-defer-time 0.15
          ;; NOTE 2024-09-16: The below are used by Doom Emacs.
          ;; These are the three ways to increase scrolling performance.
          ;; See (info "(emacs) Scrolling") for details. Introduced in Emacs HEAD
          ;; (b2f8c9f), this inhibits fontification while receiving input, which should
          ;; help a little with scrolling performance.
          redisplay-skip-fontification-on-input t
          ;; More performant rapid scrolling over unfontified regions. May cause
          ;; brief spells of inaccurate syntax highlighting right after scrolling,
          ;; which should quickly self-correct.
          fast-but-imprecise-scrolling t)
#+end_src

**** Commands

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Commands
  ;;;; Restart or close Emacs
  (defun krisb-restart-or-kill-emacs (&optional arg restart)
    "Kill Emacs.
  If called with RESTART (`universal-argument’ interactively) restart
  Emacs instead. Passes ARG to `save-buffers-kill-emacs'."
    (interactive "P")
    (save-buffers-kill-emacs arg (or restart (equal arg '(4)))))
  (bind-key [remap save-buffers-kill-terminal] #'krisb-restart-or-kill-emacs)

  ;;;; Scrolling
  (bind-keys
   ("C-M-S-s-p" . scroll-down-line)
   ("C-M-S-s-n" . scroll-up-line))

  ;;;; Joining lines
  (defun krisb-open-line-above-goto ()
    "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current
  mode. Credit to
  https://emacsredux.com/blog/2013/06/15/open-line-above/"
    (interactive)
    (beginning-of-line)
    (newline)
    (previous-line)
    (indent-according-to-mode))

  (defun krisb-open-line-below-goto ()
    "Insert an empty line after the current line.
  Position the cursor at its beginning, according to the current mode.
  Credit to https://emacsredux.com/blog/2013/03/26/smarter-open-line/"
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun krisb-join-line-above ()
    "Join the current line with the line above."
    (interactive)
    (save-excursion (delete-indentation))
    (when (string-match-p "\\`\\s-*$" (thing-at-point 'line))
      (funcall indent-line-function)))

  (defun krisb-join-line-below ()
    "Join the current line with the line below."
    (interactive)
    (save-excursion (delete-indentation t))
    (when (bolp)
      (funcall indent-line-function)))

  (bind-keys
   ("C-S-p" . krisb-open-line-above-goto)
   ("C-S-n" . krisb-open-line-below-goto)
   ("C-S-k" . krisb-join-line-above)
   ("C-S-j" . krisb-join-line-below))
#+end_src

**** Miscellaneous

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Miscellaneous
  ;;;; Enable all disabled commands
  (setopt disabled-command-function nil)

  ;;;; Stretch cursor to the glyph width
  (setopt x-stretch-cursor t)

  ;;;; Avoid collision of mouse with point
  (mouse-avoidance-mode 'jump)

  ;;;; Recognize camel case as words
  (global-subword-mode 1)

  ;;;; Middle-click pastes at point, not at mouse
  (setopt mouse-yank-at-point t)

  ;;;; More leeway for Emacs subprocesses
  ;; Let Emacs subprocesses read more data per chunk
  (setopt read-process-output-max (* 4 1024 1024)) ; 4mb
  ;; Recommend here
  ;; https://www.reddit.com/r/emacs/comments/17nl7cw/comment/k7u1ueu/?utm_source=share&utm_medium=web2x&context=3
  (setopt process-adaptive-read-buffering nil)

  ;;;; Delete-selection-mode
  ;; When selecting text, if typing new text, replace the selected text with the
  ;; new text
  (delete-selection-mode t)

  ;;;; Don't do anything with inactive mark
  (setopt mark-even-if-inactive nil)

  ;;;; Strategy for uniquifying buffer names
  (setopt uniquify-buffer-name-style 'post-forward)

  ;;;; Show context menu from right-click
  (when (display-graphic-p)
    (context-menu-mode 1))

  ;;;; Don't show "obsolete" byte-compile warnings
  (setopt byte-compile-warnings (remove 'obsolete byte-compile-warning-types))

  ;;;; Enable `view-mode' when calling `read-only-mode'
  (setopt view-read-only t)


  ;;;; Behavior for `cycle-spacing-actions'
  ;; Read the docstring for an explanation (or try it out!)
  (setopt cycle-spacing-actions '(just-one-space (delete-all-space -) restore))

  ;;;; Word wrapping
  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)

  ;;;; Repeatedly pop mark with C-u SPC
  (setopt set-mark-command-repeat-pop t)

  ;;;; Default fill column
  (setq-default fill-column 80)

  ;;;; Insert spaces instead of tab characters
  (setq-default indent-tabs-mode nil)

  ;;;; Trash
  (setq-default trash-directory (no-littering-expand-var-file-name "trash")
                delete-by-moving-to-trash t)

  ;;;; Don't create lock files
  (setopt create-lockfiles nil)

  ;;;; Confirm to kill emacs
  (setopt confirm-kill-emacs 'y-or-n-p)

  ;;;; Don’t warn when advising
  (setopt ad-redefinition-action 'accept)

  ;;;; Double space delimits end of sentence?
  (setq-default sentence-end-double-space nil)
  (add-hook 'prog-mode-hook (lambda () (setq-local sentence-end-double-space t)))
  (add-hook 'conf-mode-hook (lambda () (setq-local sentence-end-double-space t)))

  ;;;; Keep the cursor out of the read-only portions of the minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;;; Allow minibuffer commands in minibuffer
  (setq enable-recursive-minibuffers t)

  ;;;; Ignore case basically everywhere
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  (setq-default case-fold-search t)

  ;;;; `indent-for-tab-command' functionality.
  (setopt tab-always-indent 'complete
          tab-first-completion 'word)
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  (provide 'krisb-essentials)
  ;;; krisb-essentials.el ends here
#+end_src

*** =krisb-completion.el=

**** Built-in

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Minibuffer
  (use-package minibuffer
    :ensure nil
    :custom
    (completion-cycle-threshold nil)
    (completion-lazy-hilit t)             ; Lazy highlighting; added Emacs 30.1
    (completion-auto-select 'second-tab)
    (completions-max-height 20)
    (completion-ignore-case t)
    (completion-flex-nospace t)
    (minibuffer-default-prompt-format " [%s]") ; Format of portion for default value

    ;; Completions buffer
    (completions-format 'one-column)
    (completions-detailed t) ; Show more details in completion minibuffer (inspired by `marginalia')
    (completions-group t)    ; Groups; Emacs 28

    ;; Category settings. A non-exhaustve list of known completion categories:
    ;; - `bookmark'
    ;; - `buffer'
    ;; - `charset'
    ;; - `coding-system'
    ;; - `color'
    ;; - `command' (e.g. `M-x')
    ;; - `customize-group'
    ;; - `environment-variable'
    ;; - `expression'
    ;; - `face'
    ;; - `file'
    ;; - `function' (the `describe-function' command bound to `C-h f')
    ;; - `info-menu'
    ;; - `imenu'
    ;; - `input-method'
    ;; - `kill-ring'
    ;; - `library'
    ;; - `minor-mode'
    ;; - `multi-category'
    ;; - `package'
    ;; - `project-file'
    ;; - `symbol' (the `describe-symbol' command bound to `C-h o')
    ;; - `theme'
    ;; - `unicode-name' (the `insert-char' command bound to `C-x 8 RET')
    ;; - `variable' (the `describe-variable' command bound to `C-h v')
    ;; - `consult-grep'
    ;; - `consult-isearch'
    ;; - `consult-kmacro'
    ;; - `consult-location'
    ;; - `embark-keybinding'
    (completion-category-defaults
     '((buffer (styles . (basic substring)))
       (unicode-name (styles . (basic substring)))
       (project-file (styles . (substring)))
       (xref-location (styles . (substring)))
       (info-menu (styles . (basic substring)))
       (symbol-help (styles . (basic shorthand substring)))
       (calendar-month (display-sort-function . identity))))
    (completion-category-overrides
     '((file (styles . (basic partial-completion flex))) ; Include `partial-completion' to enable wildcards and partial paths.
       (citar-candidate (styles basic substring)))))

  ;;; Crm
  (use-package crm
    :ensure nil
    :config
    ;; Add prompt indicator to `completing-read-multiple'. We display
    ;; [CRM<separator>], e.g., [CRM,] if the separator is a comma. Taken from
    ;; https://github.com/minad/vertico
    (defun krisb-crm-indicator (args)
      (cons (format "[completing-read-multiple: %s]  %s"
                    (propertize
                     (replace-regexp-in-string
                      "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                      crm-separator)
                     'face 'error)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'krisb-crm-indicator))
#+end_src

**** Accessories

Enhancements to all built-in-based completions.
#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Marginalia
  ;; Enable richer annotations in minibuffer (companion package of consult.el)
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    (marginalia-field-width 80)
    (marginalia-align-offset -2)          ; Two to the left
    :config
    (marginalia-mode 1))

  ;;; Prescient
  ;; Sorting and filtering of minibuffer candidates. The difference between
  ;; `orderless' and this package is that `orderless' filters but does not sort -
  ;; it leaves that up to the "candidate source and the completion UI."
  ;; Additionally, `orderless' has style "dispatchers," i.e., I can define
  ;; predicates for what filtering style to use for which token
  (use-package prescient
    :custom
    ;; (completion-styles '(prescient flex))
    ;; NOTE 2024-02-03: Flex is chosen as a backup in case nothing in prescient is
    ;; matched, which only happens if I'm clueless about what I'm searching for.
    ;; We prefer this over adding the fuzzy matching in `prescient-filter-method'
    ;; because we don't want a bunch of random results included in the filtered
    ;; prescient results and cluttering it
    (prescient-filter-method '(literal initialism regexp))
    (prescient-aggressive-file-save t)
    (prescient-sort-full-matches-first t)
    (prescient-history-length 200)
    (prescient-frequency-decay 0.997)
    (prescient-frequency-threshold 0.05)
    :config
    (prescient-persist-mode 1))

  ;;; Orderless
  ;; Alternative and powerful completion style (i.e. filters candidates)
  (use-package orderless
    :custom
    (completion-styles '(orderless flex))
    (orderless-matching-styles
     '(orderless-regexp
       orderless-prefixes
       orderless-initialism
       ;; orderless-literal
       ;; orderless-flex
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-style-dispatchers '(krisb-orderless-consult-dispatch))
    :config
    ;; Eglot forces `flex' by default.
    (add-to-list 'completion-category-overrides '(eglot (styles . (orderless flex))))

    ;; Taken from Doom
    (defun krisb-orderless-consult-dispatch (pattern _index _total)
      "Basically `orderless-affix-dispatch-alist' but with prefixes too."
      (cond
       ;; Ensure $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" pattern)
        `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
       ;; Ignore single !
       ((string= "!" pattern) `(orderless-literal . ""))
       ;; Without literal
       ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
       ((string-suffix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1 -1)))
       ;; Character folding
       ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
       ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
       ;; Initialism matching
       ((string-prefix-p "," pattern) `(orderless-initialism . ,(substring pattern 1)))
       ((string-suffix-p "," pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
       ;; Literal matching
       ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
       ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
       ;; Flex matching
       ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
       ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1))))))
#+end_src

**** Minibuffer completion

***** Vertico

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Vertico
  ;;;; Itself
  (use-package vertico
    :pin gnu-elpa-devel
    :bind ("C-M-s-." . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save)
    :custom
    (vertico-count 13)
    (vertico-resize 'grow-only)
    (vertico-cycle nil)
    :init
    (vertico-mode 1)
    :config
    (require 'krisb-vertico))

  ;;;; Vertico-directory
  ;; More convenient path modification commands
  (use-package vertico-directory
    :requires vertico
    :ensure nil
    :bind ( :map vertico-map
            ("RET" . vertico-directory-enter)
            ("DEL" . vertico-directory-delete-char)
            ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  ;;;; Vertico-multiform
  (use-package vertico-multiform
    :requires vertico
    :ensure nil
    :custom
    (vertico-multiform-categories
     '((consult-grep buffer)
       (imenu buffer)
       (buffer (vertico-sort-function . nil))
       (citar (vertico-sort-function . vertico-sort-history-alpha))))
    (vertico-multiform-commands
     '(;; I use jinx now, but I think it's better to not apply a grid layout to it
       ;; since its use of vertico-groups is useful
       ("flyspell-correct-*" grid (vertico-grid-annotate . 20))
       (pdf-view-goto-label (vertico-sort-function . nil))
       (".+-history" (vertico-sort-function . nil))))
    :config
    (vertico-multiform-mode 1))

  ;;;; Vertico-buffer
  (use-package vertico-buffer
    :requires vertico
    :ensure nil
    :custom
    (vertico-buffer-hide-prompt nil)
    (vertico-buffer-display-action '(display-buffer-reuse-window)))

  ;;;; Vertico-prescient
  (use-package vertico-prescient
    :requires prescient
    :after vertico
    :custom
    ;; Sorting
    (vertico-prescient-enable-sorting t)
    (vertico-prescient-override-sorting nil)

    ;; Filtering. Below only applies when `vertico-prescient-enable-filtering' is
    ;; non-nil
    (vertico-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (vertico-prescient-completion-styles '(prescient flex))
    ;; Only set if `vertico-prescient-enable-filtering' is non-nil. See also
    ;; `prescient--completion-recommended-overrides'
    (vertico-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (vertico-prescient-mode 1))
#+end_src

**** Inline completion

***** Corfu

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;;; Corfu
  ;; Faster, minimal, and more lightweight autocomplete that is more faithful to
  ;; the Emacs infrastructure
  ;;;;; Itself
  (use-package corfu
    :demand t
    :bind ( :map corfu-map
            ("M-d" . corfu-info-documentation))
    :custom
    (corfu-auto nil) ; REVIEW 2024-09-20: Perhaps try https://github.com/minad/corfu?tab=readme-ov-file#auto-completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-on-exact-match 'insert)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)     ; Always have the same width
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle nil)

    ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
    ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
    ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
    ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
    ;; configuration already has pre-prepared). Necessary for manual corfu usage with
    ;; orderless, otherwise first component is ignored, unless `corfu-separator'
    ;; is inserted.
    (corfu-quit-at-boundary nil)
    (corfu-separator ?\s)            ; Use space
    (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
    (corfu-preview-current t)
    (corfu-preselect 'valid)
    :custom-face
    ;; Always use a fixed-pitched font for corfu; variable pitch fonts (which will
    ;; be adopted in a variable pitch buffer) have inconsistent spacing
    (corfu-default ((t (:inherit 'default))))
    :config
    (global-corfu-mode 1)

    ;; Enable corfu in minibuffer if `vertico-mode' is disabled. From
    ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
    (defun krisb-corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if vertico is not active."
      (unless (bound-and-true-p vertico-mode)
        (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'krisb-corfu-enable-in-minibuffer 1))

  ;;;;; Corfu-history
  ;; Save the history across Emacs sessions
  (use-package corfu-history
    :ensure nil
    :hook (corfu-mode . corfu-history-mode)
    :config
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;;;;; Corfu-popupinfo
  ;; Documentation window for corfu!
  (use-package corfu-popupinfo
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind ( :map corfu-map
            ([remap corfu-info-documentation] . corfu-popupinfo-toggle)
            ("M-l" . corfu-popupinfo-location))
    :custom
    (corfu-popupinfo-delay '(0.5 . 0.3))
    (corfu-popupinfo-direction '(right left vertical))
    (corfu-popupinfo-hide t)
    (corfu-popupinfo-resize t)
    (corfu-popupinfo-max-height 20)
    (corfu-popupinfo-max-width 70)
    (corfu-popupinfo-min-height 1)
    (corfu-popupinfo-min-width 30))

  ;;;;; Corfu-prescient
  (use-package corfu-prescient
    :requires prescient
    :after corfu
    :custom
    ;; Sorting
    (corfu-prescient-enable-sorting t)
    (corfu-prescient-override-sorting nil)

    ;; Filtering. Below only applies when `corfu-prescient-enable-filtering' is
    ;; non-nil
    (corfu-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (corfu-prescient-completion-styles '(prescient flex))
    ;; See also `prescient--completion-recommended-overrides'
    (corfu-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (corfu-prescient-mode 1))

  ;;;; Kind-icon
  ;; Icons for corfu! An alternative is nerd-icons-corfu for specifically nerd
  ;; icons.
  (use-package kind-icon
    :requires corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; To unify background color
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    (kind-icon-default-style
     '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.8 :scale 1.0))
    ;; Use VSCode's icons (i.e. nerd icons' codicons set). Read about it from my
    ;; write-up in the kind-icon wiki here:
    ;; https://github.com/jdtsmith/kind-icon/wiki#using-svg-icons-from-a-nerd-fonts-icon-collection
    (kind-icon-mapping
     '((array          "a"   :icon "symbol-array"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (boolean        "b"   :icon "symbol-boolean"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (color          "#"   :icon "symbol-color"       :face success                          :collection "nerd-fonts-codicons")
       (command        "cm"  :icon "chevron-right"      :face default                          :collection "nerd-fonts-codicons")
       (constant       "co"  :icon "symbol-constant"    :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (class          "c"   :icon "symbol-class"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (constructor    "cn"  :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (enum           "e"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enummember     "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enum-member    "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (event          "ev"  :icon "symbol-event"       :face font-lock-warning-face           :collection "nerd-fonts-codicons")
       (field          "fd"  :icon "symbol-field"       :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (file           "f"   :icon "symbol-file"        :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (folder         "d"   :icon "folder"             :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (function       "f"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (interface      "if"  :icon "symbol-interface"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (keyword        "kw"  :icon "symbol-keyword"     :face font-lock-keyword-face           :collection "nerd-fonts-codicons")
       (macro          "mc"  :icon "lambda"             :face font-lock-keyword-face)
       (magic          "ma"  :icon "lightbulb-autofix"  :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (method         "m"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (module         "{"   :icon "file-code-outline"  :face font-lock-preprocessor-face)
       (numeric        "nu"  :icon "symbol-numeric"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (operator       "op"  :icon "symbol-operator"    :face font-lock-comment-delimiter-face :collection "nerd-fonts-codicons")
       (param          "pa"  :icon "gear"               :face default                          :collection "nerd-fonts-codicons")
       (property       "pr"  :icon "symbol-property"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (reference      "rf"  :icon "library"            :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (snippet        "S"   :icon "symbol-snippet"     :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (string         "s"   :icon "symbol-string"      :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (struct         "%"   :icon "symbol-structure"   :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (text           "tx"  :icon "symbol-key"         :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (typeparameter  "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (type-parameter "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (unit           "u"   :icon "symbol-ruler"       :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (value          "v"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (variable       "va"  :icon "symbol-variable"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (t              "."   :icon "question"           :face font-lock-warning-face           :collection "nerd-fonts-codicons")))
    :init
    (require 'svg-lib)
    (add-to-list 'svg-lib-icon-collections
                 '("nerd-fonts-codicons" . "https://github.com/microsoft/vscode-codicons/raw/HEAD/src/icons/%s.svg"))
    :config
    ;; TODO 2022-05-24: See if I can use the cooler icons from
    ;; `lsp-bridge-icon--icons' without requiring the package
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)

    ;; Reset cache on loading new theme
    (add-hook 'enable-theme-functions (lambda () (call-interactively 'kind-icon-reset-cache))))
#+end_src

***** Cape

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Cape
  ;; Expand capf functionality with corfu! See an updated list of the defined capf
  ;; functions in the package's commentary.
  (use-package cape
    :bind (("C-M-s-c p" . completion-at-point)
           ("C-M-s-c d" . cape-dabbrev)
           ("C-M-s-c h" . cape-history)
           ("C-M-s-c f" . cape-file)
           ("C-M-s-c k" . cape-keyword)
           ("C-M-s-c s" . cape-elisp-symbol)
           ("C-M-s-c a" . cape-abbrev)
           ("C-M-s-c w" . cape-dict)
           ("C-M-s-c l" . cape-line)
           ("C-M-s-c \\" . cape-tex)
           ("C-M-s-c _" . cape-tex)
           ("C-M-s-c ^" . cape-tex)
           ("C-M-s-c &" . cape-sgml)
           ("C-M-s-c r" . cape-rfc1345)
           ([remap dabbrev-completion] . cape-dabbrev))
    :custom
    (cape-dabbrev-min-length 2)
    :init
    ;; These are added to the global definition of
    ;; `completion-at-point-functions', which acts as a fallback if buffer-local
    ;; values end in `t'. Read (info "(cape) Configuration") for an explanation.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)

    ;; Macro to help adding capfs via hooks
    (defmacro krisb-cape-setup-capfs (label hooks capfs)
      "Set up `completion-at-point-functions' for HOOKS.
  CAPFS are a list of `completion-at-point-functions'. Adds CAPFS when a
  hook in HOOKS is run. These effects are added by a defined function with
  LABEL appended to `krisb-cape-setup-capfs-'.

  The order of elements in CAPFS are the order they will appear in
  `completion-at-point-functions' for that buffer. That is, the first
  element in CAPFS will be the first element in
  `completion-at-point-functions'.

  This macro does not affect capfs already in
  `completion-at-point-functions' nor how later capfs are added to
  `completion-at-point-functions'."
      (declare (indent 0))
      `(dolist (hook ,hooks)
         (add-hook hook
                   (defun ,(intern (concat "krisb-cape-setup-capfs-" label)) ()
                     (dolist (capf (reverse ,capfs))
                       (add-to-list 'completion-at-point-functions capf))))))

    (krisb-cape-setup-capfs
     "elisp"
     '(emacs-lisp-mode-hook lisp-interaction-mode-hook)
     (list #'cape-file #'cape-elisp-symbol))

    (krisb-cape-setup-capfs
     "commit"
     '(git-commit-mode-hook vc-git-log-edit-mode-hook)
     (list #'cape-elisp-symbol #'cape-dabbrev)))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Provide
  (provide 'krisb-completion)
#+end_src

**** =krisb-saving.el=

#+begin_src emacs-lisp :tangle "modules/krisb-saving.el"
  ;; No-littering's `no-littering-theme-backups' sets the values for
  ;; `auto-save-file-name-transforms', `backup-directory-alist', and
  ;; `undo-tree-history-directory-alist'. Read its docstring for more information.

  ;;; Backup
  ;; Backup files. "Emacs makes a backup for a file only the first time the file
  ;; is saved from the buffer that visits it."
  (setopt make-backup-files t
          backup-by-copying nil       ; See (info "(emacs) Backup Copying")
          vc-make-backup-files t)     ; Still backup even if under version control

  ;; Numbering backups
  (setopt version-control t
          kept-new-versions 6
          kept-old-versions 2
          delete-old-versions t)

  ;; Modified from Doom Emacs. Backup files have names that are hashed.
  (defun krisb-backup-file-name-hash (file)
    "Hash the backup file name.
  A few places use the backup file name so paths don't get too long.

  Takes any FILE and return a hashed version."
    (let ((alist backup-directory-alist)
          backup-directory)
      (while alist
        (let ((elt (car alist)))
          (if (string-match (car elt) file)
              (setq backup-directory (cdr elt)
                    alist nil)
            (setq alist (cdr alist)))))
      (let ((file (make-backup-file-name--default-function file)))
        (if (or (null backup-directory)
                (not (file-name-absolute-p backup-directory)))
            file
          (expand-file-name (sha1 (file-name-nondirectory file))
                            (file-name-directory file))))))
  (setopt make-backup-file-name-function #'krisb-backup-file-name-hash)

  ;;; Auto-save
  (setopt auto-save-default t ; Only a local minor mode exists; this variable influences the global value
          auto-save-timeout 3
          auto-save-interval 150
          auto-save-no-message t
          auto-save-include-big-deletions t)

  (setopt delete-auto-save-files t
          kill-buffer-delete-auto-save-files nil)

  ;; Prevent auto-save from complaining about long file names by hashing them.
  ;; Copied from Doom Emacs.
  (defun krisb-auto-save-hash-file-name (&rest args)
    "Turn `buffer-file-name' into a hash.
  Then apply ARGS."
    (let ((buffer-file-name
           (if (or
                ;; Don't do anything for non-file-visiting buffers. Names
                ;; generated for those are short enough already.
                (null buffer-file-name)
                ;; If an alternate handler exists for this path, bow out. Most of
                ;; them end up calling `make-auto-save-file-name' again anyway, so
                ;; we still achieve this advice's ultimate goal.
                (find-file-name-handler buffer-file-name
                                        'make-auto-save-file-name))
               buffer-file-name
             (sha1 buffer-file-name))))
      (apply args)))
  (advice-add 'make-auto-save-file-name :around #'krisb-auto-save-hash-file-name)

  ;;;; Autosave-visited
  ;; Save visited files after an idea time
  (setopt auto-save-visited-interval 8
          auto-save-visited-predicate ; Value Inspired by `super-save'
          (lambda ()
            (or (< (save-restriction (widen) (count-lines (point-min) (point-max)))
                   5000)
                (derived-mode-p 'pdf-view-mode)))
          remote-file-name-inhibit-auto-save-visited nil)
  (add-hook 'on-first-file-hook #'auto-save-visited-mode)

  ;;; Provide
  (provide 'krisb-saving)
#+end_src

**** =krisb-persistence.el=

#+begin_src emacs-lisp :tangle "modules/krisb-persistence.el"
  ;;; Savehist
  ;; Make history of certain things (e.g. minibuffer) persistent across sessions
  (use-package savehist
    :ensure nil
    :custom
    (history-length 10000)
    (history-delete-duplicates t)
    (savehist-save-minibuffer-history t)
    (savehist-autosave-interval 30)
    :config
    (dolist (var '(kill-ring
                   Info-history-list
                   last-kbd-macro
                   kmacro-ring
                   shell-command-history))
      (add-to-list 'savehist-additional-variables var))
    (savehist-mode 1))

  ;;; Saveplace
  ;; Save and restore the point's location in files
  (use-package saveplace
    :ensure nil
    :hook (on-first-file . save-place-mode)
    :custom
    (save-place-forget-unreadable-files t)
    (save-place-limit 3000))

  ;;; Desktop
  ;; Save buffers across Emacs sessions
  (use-package desktop
    :ensure nil
    :custom
    (desktop-load-locked-desktop 'check-pid)
    (desktop-save 'ask-if-exists)
    (desktop-auto-save-timeout 3)
    (desktop-files-not-to-save
     (rx (or (regexp "\\(\\`/[^/:]*:\\|(ftp)\\'\\)")
             ;; Don't save files from other Emacs repos because sometimes they
             ;; have local variables that mess with desktop's loading of files
             (literal (expand-file-name "emacs-repos/" "~"))
             ;; Don't want to open my large org-agenda files which I'll open
             ;; eventually anyway
             (literal krisb-org-agenda-directory))))
    (desktop-globals-to-save '(desktop-missing-file-warning
                               tags-file-name
                               tags-table-list
                               search-ring
                               regexp-search-ring
                               ;; REVIEW 2024-10-13: The previews in
                               ;; `jump-to-register' cause errors when trying to
                               ;; visit a buffer or window which no longer exists.
                               ;; Removing it from the saved globals list is the
                               ;; workaround I choose for now.
                               ;; register-alist
                               file-name-history))
    (desktop-locals-to-save '(desktop-locals-to-save
                              truncate-lines
                              case-fold-search
                              case-replace
                              fill-column

                              overwrite-mode
                              change-log-default-name
                              line-number-mode

                              column-number-mode
                              size-indication-mode

                              buffer-file-coding-system
                              buffer-display-time

                              indent-tabs-mode
                              tab-width
                              indicate-buffer-boundaries

                              indicate-empty-lines
                              show-trailing-whitespace))

    (desktop-restore-eager 10)
    (desktop-restore-forces-onscreen nil)
    (desktop-restore-frames t)
    (desktop-restore-in-current-display nil)
    :config
    (desktop-save-mode 1))

  ;;; Provide
  (provide 'krisb-persistence)
#+end_src

** Appearance

*** =krisb-themes.el=

#+begin_src emacs-lisp :tangle "modules/krisb-themes.el"
  (require 'color)

  ;;; Krisb-themes-ext
  (use-package krisb-themes-ext
    :demand t
    :ensure nil
    :bind ("<f8>" . krisb-themes-ext-theme-switcher)
    :custom
    (krisb-themes-ext-light 'modus-operandi)
    (krisb-themes-ext-dark 'modus-vivendi)
    :config
    (krisb-theme-ext-enable-theme-time-of-day 8 19))

  ;;; Modus-themes
  (use-package modus-themes
    :custom
    (modus-themes-custom-auto-reload t) ; Only applies to `customize-set-variable' and related
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs nil)
    (modus-themes-mixed-fonts t)
    (modus-themes-prompts '(semibold))
    (modus-themes-completions '(((matches . (heavy))
                                 (selection . (semibold)))))
    (modus-themes-variable-pitch-ui nil)
    (modus-themes-headings '((t . (semibold))))
    :config
    ;; Overrides
    (setopt modus-themes-common-palette-overrides
            `(;; Completion
              (fg-completion-match-0 fg-main) ; See (info "(modus-themes) Make headings more or less colorful")
              (fg-completion-match-1 fg-main)
              (fg-completion-match-2 fg-main)
              (fg-completion-match-3 fg-main)
              (bg-completion-match-0 bg-blue-intense)
              (bg-completion-match-1 bg-yellow-intense)
              (bg-completion-match-2 bg-cyan-intense)
              (bg-completion-match-3 bg-red-intense)

              ;; "Invisible" border in mode line. See (info "(modus-themes) Make the
              ;; mode line borderless")
              (border-mode-line-active bg-mode-line-active)
              (border-mode-line-inactive bg-mode-line-inactive)

              ;; Headings
              (fg-heading-1 red-faint)
              (fg-heading-6 rainbow-0)

              ;; Make the fringe invisible
              (fringe unspecified)

              ;; More noticeable block (e.g. org) backgrounds
              (bg-prose-block-contents bg-active-value))
            modus-operandi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#cab9b2")
              (fg-mode-line-active        "#000000")
              (bg-mode-line-inactive      "#dfd9cf")
              (fg-mode-line-inactive      "#585858")


              )
            modus-vivendi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#484d67")
              (fg-mode-line-active        "#ffffff")
              (bg-mode-line-inactive      "#292d48")
              (fg-mode-line-inactive      "#969696")))

    (defun krisb-modus-themes-setup-base-faces (theme)
      "Set up common faces in FRAME."
      (set-face-attribute 'mode-line-active nil
                          :background (modus-themes-with-colors bg-mode-line-active)
                          :box `( :line-width 3
                                  :color ,(modus-themes-with-colors bg-mode-line-active)))
      (let ((bg-color
             (if (eq (car custom-enabled-themes) krisb-themes-dark)
                 (color-darken-name (modus-themes-with-colors bg-mode-line-inactive) 13)
               (color-lighten-name (modus-themes-with-colors bg-mode-line-inactive) 13))))
        (set-face-attribute 'mode-line-inactive nil
                            :background bg-color
                            :box `( :line-width 3
                                    :color ,bg-color)))

      (modus-themes-with-colors
        (set-face-attribute 'cursor nil :background magenta-cooler))

      (set-face-background 'fringe (face-attribute 'default :background))
      ;; Note that the vertical border is distinct from the window divider when
      ;; `window-divider-mode' is enabled.
      (set-face-attribute 'vertical-border nil
                          :foreground (face-attribute 'default :background))

      ;; Set up font-lock faces.
      ;; As described in (info "(modus-themes) DIY Measure color contrast"), I can
      ;; check for contrast by making sure the color contrast (relative luminance)
      ;; between the foreground and background color is at least 7:1.
      ;;
      ;; Like:
      ;;    (modus-themes-contrast (modus-themes-with-colors bg-main) (face-foreground 'font-lock-function-call-face))
      (cond
       ((string-match "^modus-operandi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#161BA1"))
       ((string-match "^modus-vivendi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#66B1F2"))))
    (add-hook 'enable-theme-functions #'krisb-modus-themes-setup-base-faces))

  ;;; Cursory
  ;; Global and local cursor presets
  (use-package cursory
    :hook ((prog-mode . (lambda () (cursory-set-preset 'code :local)))
           ((org-mode markdown-mode) . (lambda () (cursory-set-preset 'prose :local))))
    :custom
    (cursory-latest-state-file (no-littering-expand-var-file-name "cursory/cursory-latest-state"))
    (cursory-presets
     '((code
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1)
       (prose
        :cursor-type (bar . 2)
        :blink-cursor-mode -1
        :cursor-in-non-selected-windows (hbar . 3))
       (default)
       (t                                 ; The fallback values
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1
        :blink-cursor-blinks 10
        :blink-cursor-delay 5
        :blink-cursor-interval 0.5)))
    :config
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (when (file-exists-p cursory-latest-state-file)
      (cursory-set-preset (or (cursory-restore-latest-preset) 'default)))

    ;; Persist latest preset used across Emacs sessions
    (cursory-mode 1))


  ;;; Lin
  ;; Lin is a stylistic enhancement for Emacs' built-in `hl-line-mode'. It remaps
  ;; the `hl-line' face (or equivalent) buffer-locally to a style that is optimal
  ;; for major modes where line selection is the primary mode of interaction.
  (use-package lin
    :custom
    (lin-face 'lin-cyan)
    :config
    (lin-global-mode 1)

    (add-to-list 'lin-mode-hooks 'LaTeX-mode-hook))

  ;;; Pulsar
  ;; Alternative to `pulse.el'
  (use-package pulsar
    ;; TODO 2024-10-18: Redistribute to their respective use-package declarations
    :hook ((consult-after-jump . pulsar-recenter-top)
           (consult-after-jump . pulsar-reveal-entry)
           (imenu-after-jump . pulsar-recenter-top)
           (imenu-after-jump . pulsar-reveal-entry))
    :custom
    (pulsar-pulse t)
    (pulsar-face 'pulsar-red)
    (pulsar-delay 0.05)
    (pulsar-iterations 5)
    :config
    (pulsar-global-mode 1))

  ;;; Provide
  (provide 'krisb-themes)
#+end_src

*** =krisb-fonts.el=

#+begin_src emacs-lisp :tangle "modules/krisb-fonts.el"
  ;;; Fontaine
  ;; Define then apply face presets
  (use-package fontaine
    :demand
    :custom
    (fontaine-latest-state-file (no-littering-expand-var-file-name "fontaine/fontaine-latest-state.eld"))
    (fontaine-presets
     '((iosevka-variant
        :default-family "Iosevka SS11"
        :fixed-pitch-family "Iosevka")
       (default)                          ; Use fallback values
       ;; Below are the shared fallback properties. I leave them there also as
       ;; reference for all possible properties
       (t
        ;; Alternatives:
        :default-family "Iosevka Term SS04"
        :default-weight regular
        :default-slant normal
        :default-width normal
        :default-height 165

        ;; Alternatives
        ;; "Hack Nerd Font Mono"
        :fixed-pitch-family "Iosevka"
        :fixed-pitch-weight nil
        :fixed-pitch-slant nil
        :fixed-pitch-width nil
        :fixed-pitch-height 1.0

        :fixed-pitch-serif-family nil
        :fixed-pitch-serif-weight nil
        :fixed-pitch-serif-slant nil
        :fixed-pitch-serif-width nil
        :fixed-pitch-serif-height 1.0

        ;; Alternatives:
        ;; "LiterationSerif Nerd Font"       ; Variable
        ;; "Latin Modern Mono Prop"          ; Monospace
        ;; "Sans Serif"
        ;; "Open Sans" (1.1 height)
        :variable-pitch-family "Overpass Nerd Font Propo"
        :variable-pitch-weight nil
        :variable-pitch-slant nil
        :variable-pitch-width nil
        :variable-pitch-height 1.2

        ;; Alternatives:
        ;; "JetBrainsMono Nerd Font"
        :mode-line-active-family "Iosevka Aile"
        :mode-line-active-weight nil
        :mode-line-active-slant nil
        :mode-line-active-width nil
        :mode-line-active-height 0.93

        :mode-line-inactive-family "Iosevka Aile"
        :mode-line-inactive-weight nil
        :mode-line-inactive-slant nil
        :mode-line-inactive-width nil
        :mode-line-inactive-height 0.93

        :header-line-family nil
        :header-line-weight nil
        :header-line-slant nil
        :header-line-width nil
        :header-line-height 1.0

        :line-number-family nil
        :line-number-weight nil
        :line-number-slant nil
        :line-number-width nil
        :line-number-height 1.0

        :tab-bar-family "Overpass Nerd Font"
        :tab-bar-weight nil
        :tab-bar-slant nil
        :tab-bar-width nil
        :tab-bar-height 0.93

        :tab-line-family nil
        :tab-line-weight nil
        :tab-line-slant nil
        :tab-line-width nil
        :tab-line-height 1.0


        :bold-slant nil
        :bold-weight bold
        :bold-width nil
        :bold-height 1.0

        :italic-family nil
        :italic-weight nil
        :italic-slant italic
        :italic-width nil
        :italic-height 1.0

        :line-spacing nil)))
    :config
    ;; Set the last preset or fall back to desired style from `fontaine-presets'
    (when (file-exists-p fontaine-latest-state-file)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default)))

    ;; Persist the latest font preset when closing/starting Emacs and while
    ;; switching between themes.
    (fontaine-mode 1)

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))

  ;;; Provide
  (provide 'krisb-fonts)
#+end_src

** Writing and reading

*** =krisb-prose.el=

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Olivetti
  (use-package olivetti
    :hook ((org-mode Info-mode emacs-news-view-mode org-msg-edit-mode) . olivetti-mode)
    :custom
    (olivetti-lighter nil)
    (olivetti-body-width 0.6)
    (olivetti-minimum-body-width 80)
    (olivetti-margin-width 8)
    (olivetti-style 'fancy)              ; Fancy makes the buffer look like a page
    ;; FIXME 2024-01-11: This is a temporary solution. Olivetti's changing of
    ;; margins and fringes messes with the calculation of
    ;; `mode--line-format-right-align', which determines where the right side of
    ;; the mode line is placed.
    (mode-line-format-right-align
     '(:eval (if (and (bound-and-true-p olivetti-mode)
                      olivetti-style)     ; 'fringes or 'fancy
                 (let ((mode-line-right-align-edge 'right-fringe))
                   (mode--line-format-right-align))
               (mode--line-format-right-align))))
    :config
    (defun krisb-olivetti--setup-faces (&optional _theme)
      "Set custom colors for `olivetti'."
      (when (fboundp 'modus-themes-with-colors)
        (set-face-attribute 'olivetti-fringe nil
                            :background (modus-themes-with-colors bg-dim)
                            :inherit 'unspecified)))
    (add-hook 'enable-theme-functions #'krisb-olivetti--setup-faces))

  ;;; Astute.el
  (use-package astute
    :hook (org-mode . astute-mode)
    :custom
    (astute-lighter "")
    (astute-prefix-single-quote-exceptions
     '("bout"
       "em"
       "n'"
       "cause"
       "round"
       "twas"
       "tis")))

  ;;; Darkroom
  (use-package darkroom
    :bind ( :map krisb-toggle-keymap
            ("d" . darkroom-mode)
            ("D" . darkroom-tentative-mode))
    :custom
    (darkroom-text-scale-increase 1.3))

  ;;; Provide
  (provide 'krisb-prose)
#+end_src

*** =krisb-org.el=

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Built-in
  ;;;; Org
  (use-package org
    :hook ((org-mode . variable-pitch-mode)
           (org-mode . visual-line-mode)
           (org-mode . (lambda () (setq-local line-spacing 0.2 fill-column 120))))
    :bind (("C-M-s-s" . org-store-link)
           :map krisb-note-keymap
           ("c" . org-capture))
    :custom
    (org-directory krisb-org-directory)

    ;; Headline appearance
    (org-hide-leading-stars nil)
    (org-n-level-faces 8)
    (org-cycle-separator-lines 2)
    (org-cycle-level-faces t)
    (org-ellipsis " ⮷")
    (org-startup-folded 'nofold)
    (org-tags-column 0)

    ;; Markup appearance
    (org-hide-emphasis-markers t)     ; Remove org-mode markup characters
    (org-hide-macro-markers nil)
    (org-pretty-entities t)           ; Show as UTF-8 characters (useful for math)
    (org-pretty-entities-include-sub-superscripts t) ; Show superscripts and subscripts? Also see `org-export-with-sub-superscripts'
    (org-use-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-hidden-keywords nil)

    ;; Movement
    (org-special-ctrl-a/e t)
    (org-ctrl-k-protect-subtree 'error)

    ;; Plain lists
    (org-list-allow-alphabetical t)
    (org-list-use-circular-motion t)

    ;; Headline insertion
    (org-blank-before-new-entry
     '((heading . auto)
       ;; Don't let Emacs make decisions about where to insert newlines
       (plain-list-item . nil)))
    (org-insert-heading-respect-content nil) ; Let M-RET make heading in place
    (org-M-RET-may-split-line '((table . nil)
                                (default . t)))

    ;; Blocks
    (org-structure-template-alist
     '(("s" . "src")
       ("e" . "src emacs-lisp")
       ("E" . "src emacs-lisp :results value code :lexical t")
       ("t" . "src emacs-lisp :tangle FILENAME")
       ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
       ("x" . "example")
       ("X" . "export")
       ("v" . "verse")
       ("c" . "comment")
       ("q" . "quote")))

    ;; Other
    (org-file-apps
     '((directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . default)
       ("\\.docx\\'" . system)
       ("\\.odt\\'" . system)
       ;; Default to `auto-mode-alist'
       (auto-mode . emacs)))
    (org-fold-catch-invisible-edits 'show-and-error)
    (org-edit-timestamp-down-means-later t)
    :custom-face
    (org-quote ((t (:family ,(face-attribute 'variable-pitch :family) :extend t :inherit 'org-block))))
    (org-ellipsis ((t (:box unspecified :inherit default)))) ; Don't make line taller because of org-ellipsis
    :config
    ;; Make org-open-at-point follow file links in the same window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    ;; Pulsar pulses
    (with-eval-after-load 'pulsar
      (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
        (add-hook hook #'pulsar-recenter-center)
        (add-hook hook #'pulsar-reveal-entry))))

  ;;;; Org-faces
  (use-package org-faces
    :ensure nil
    :custom
    (org-fontify-todo-headline nil)
    (org-fontify-done-headline nil)
    (org-fontify-whole-block-delimiter-line nil)
    (org-fontify-quote-and-verse-blocks t))

  ;;;; Org-src
  (use-package org-src
    :ensure nil
    :custom
    (org-src-fontify-natively t)
    (org-src-window-setup 'current-window)
    (org-src-block-faces nil) ; Open src block window on current buffer were in the language's major mode
    (org-edit-src-turn-on-auto-save nil)
    (org-edit-src-auto-save-idle-delay 3))


  ;;;; Org-id
  (use-package org-id
    :ensure nil
    :custom
    (org-clone-delete-id t)
    (org-id-method 'ts)
    (org-id-link-to-org-use-id 'use-existing))

  ;;;; Org-attach
  (use-package org-attach
    :ensure nil
    :custom
    (org-attach-preferred-new-method 'id) ; Necessary to add the ATTACH tag
    (org-attach-auto-tag "ATTACH")
    (org-attach-dir-relative nil)         ; Use relative file paths?
    (org-attach-id-dir (expand-file-name "resources" org-directory))
    (org-attach-method 'cp)            ; Attach copies of files
    (org-attach-archive-delete 'query) ; If subtree is deleted or archived, ask user
    (org-attach-id-to-path-function-list
     '(org-attach-id-ts-folder-format
       org-attach-id-uuid-folder-format
       org-attach-id-fallback-folder-format)))

  ;;;; Org-footnote
  (use-package org-footnote
    :ensure nil
    :after org
    :custom
    (org-footnote-section nil)            ; Don't create footnote headline
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline nil))

  ;;;; Org-babel
  (use-package ob
    :ensure nil
    :custom
    (org-babel-load-languages '((python . t)
                                (emacs-lisp . t)))
    (org-confirm-babel-evaluate nil))

  ;;;; Org-num
  (use-package org-num
    :ensure nil
    :diminish
    :bind ( :map krisb-toggle-keymap
            ("n" . org-num-mode))
    :custom
    (org-num-face 'fixed-pitch)
    (org-num-skip-commented t)
    (org-num-skip-footnotes t)
    (org-num-skip-unnumbered t))

  ;;; Org-modern
  (use-package org-modern
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda))
    :custom
    (org-modern-keyword nil)

    (org-modern-hide-stars "· ") ; Is affected by the value of `org-hide-leading-stars'
    (org-modern-star 'fold)
    (org-modern-fold-stars
     '(("▶" . "▼")
       ("▷" . "▽")
       ("⯈" . "⯆")
       ("▹" . "▿")
       ("▸" . "▾")))

    (org-modern-todo t) ; NOTE 2024-10-10: I set `org-modern-todo-faces' in my org-agenda section
    (org-modern-priority t)
    ;; See my value for `org-priority-faces'
    (org-modern-priority-faces
     '((?A :inverse-video t :inherit (bold org-priority))
       (?B :inverse-video t :inherit (bold org-priority))
       (?C :inverse-video t :inherit org-priority)
       (?D :inverse-video t :inherit org-priority)
       (?E :inverse-video t :inherit (shadow org-priority))
       (?F :inverse-video t :inherit (shadow org-priority))))
    ;; See my value for `org-todo-keyword-faces'
    (org-modern-todo-faces
     '(("NEXT" :inherit (bold success org-modern-todo))
       ("TODO" :inherit (org-todo org-modern-todo))
       ("HOLD" :inherit (shadow error org-modern-todo))
       ("MAYBE" :inherit (shadow org-todo org-modern-todo))
       ("DONE" :inherit (bold org-done org-modern-todo))
       ("CANCELED" :inherit (error org-modern-todo))))

    (org-modern-label-border 3)
    (org-modern-tag t)

    (org-modern-block-fringe nil) ; Doesn't work well with `olivetti-style' set to 'fancy
    (org-modern-block-name '("⌜" . "⌞"))

    (org-modern-footnote '(nil (raise 0.15) (height 0.9)))
    (org-modern-list '((?+ . "◦")
                       (?- . "–")
                       (?* . "•")))
    (org-modern-timestamp t)

    (org-modern-table t)
    (org-modern-table-vertical 3)
    (org-modern-table-horizontal 0.1)
    :custom-face
    (org-modern-label
     ((t :height 0.9 :width condensed :weight regular :underline nil)))
    (org-modern-todo ((t :weight semibold :inverse-video t :inherit org-modern-label)))
    :config
    (defun krisb-modus-themes--setup-org-modern (theme)
      "Set up org-modern faces."
      (when (string-match "^modus-" (symbol-name theme))
        ;; See my value for `org-tag-faces'
        (setopt org-modern-tag-faces
                `(("project"
                   :foreground ,(face-background 'default nil t)
                   :background ,(face-foreground 'modus-themes-fg-magenta-cooler nil t))))))
    (add-hook 'enable-theme-functions #'krisb-modus-themes--setup-org-modern))

  ;;; Org-appear
  ;; Show hidden characters (e.g. emphasis markers, link brackets) when point is
  ;; over enclosed content
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-delay 0.0)
    (org-appear-trigger 'always)
    (org-appear-autoemphasis t)
    (org-appear-autolinks 'just-brackets)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    (org-appear-inside-latex t))

  ;;; Provide
  (provide 'krisb-org)
#+end_src

*** Note-taking

**** =krisb-denote.el=

#+begin_src emacs-lisp :tangle "modules/krisb-denote.el"
  ;;; Denote
  (use-package denote
    :pin gnu-elpa-devel
    :autoload (denote-directory-files krisb-denote-auto-rename-file krisb-denote-sluggify-keyword)
    :commands (denote denote-open-or-create)
    :hook ((dired-mode . denote-dired-mode)
           (denote-dired-mode . toggle-truncate-lines)
           (after-save . krisb-denote-auto-rename-file)
           (krisb-themes . krisb-themes-setup-denote-faces))
    :bind ( :map krisb-note-keymap
            ("f" . denote-open-or-create)
            ("i" . denote-link-or-create)
            ("e" . denote-org-extras-extract-org-subtree)
            ("k" . denote-rename-file-keywords)
            ("l" . denote-find-backlink)
            ("L" . denote-backlinks))
    :custom
    (denote-directory krisb-notes-directory)
    (denote-known-keywords nil)
    (denote-prompts '(subdirectory title keywords signature template))
    (denote-file-name-slug-functions '((title . denote-sluggify-title)
                                       (signature . denote-sluggify-signature)
                                       (keyword . krisb-denote-sluggify-keyword)))
    (denote-rename-confirmations '(add-front-matter))
    (denote-org-front-matter "#+title: %s
  ,#+date: %s
  ,#+filetags: %s
  ,#+identifier: %s
  ")
    (denote-templates
     '((plain . "\n")
       (mla . "#+latex_class: mla
  ,#+cite_export: biblatex mla-new
  ,#+professor:
  ,#+course:
  ,#+export_file_name:

  ,* Potential titles

  ,* 1 Draft                                                     :export:ignore:

  ,* Works Cited                                                 :ignore:export:

  ,#+begin_export LaTeX
  \\newpage
  \\center
  ,#+end_export

  ,#+print_bibliography:")
       (buoy . "* Responses

  ,* Biographical information

  + Buoy nominations :: tk
  + Instagram handle :: tk

  ,* Potential titles

  1.

  ,* 1 Draft                                                     :ignore:export:
  ")))

    ;; Buffer name
    (denote-rename-buffer-format "%s %t%b")
    (denote-rename-buffer-backlinks-indicator " ⟷")

    ;; Backlinks
    (denote-backlinks-show-context t)
    (denote-backlinks-display-buffer-action
     '((display-buffer-reuse-window display-buffer-below-selected)
       (window-height . fit-window-to-buffer)
       (post-command-select-window . t)
       (dedicated . t)
       (window-parameters . ((mode-line-format . none)))))

    ;; Miscellaneous
    (denote-date-prompt-use-org-read-date t)
    (denote-org-store-link-to-heading)
    :config
    (denote-rename-buffer-mode 1)
    (denote-menu-bar-mode 1)
    (require 'krisb-denote)

    ;; Rename denote note. Meant to be added to `after-save-hook'
    (defun krisb-denote-auto-rename-file ()
      "Auto rename denote file."
      (when-let ((f (buffer-file-name)))
        (when (and (file-in-directory-p f denote-directory)
                   (denote-filename-is-note-p f))
          (with-demoted-errors "Error: %S"
            (denote-rename-file-using-front-matter f)))))

    ;; Camel cased keywords
    (defun krisb-denote-sluggify-keyword (str)
      "Sluggify STR while joining separate words.
    My version camelCases keywords."
      (require 's)
      (s-lower-camel-case (denote-slug-hyphenate str)))


    ;; Add inbox to `org-refile-targets'
    (with-eval-after-load 'org-refile
      (add-to-list 'org-refile-targets
                   `(,(car (denote-directory-files "20221011T101254")) . (:maxlevel . 2))))

    ;; Setup faces
    (defun krisb-denote--setup-faces (&optional _theme)
      "Set custom colors for `olivetti'."
      (when (fboundp 'modus-themes-with-colors)
        (modus-themes-with-colors
          (set-face-attribute 'denote-faces-link nil :weight 'normal :foreground fg-active-argument :inherit 'unspecified)
          (set-face-attribute 'denote-faces-signature nil :weight 'bold)
          (set-face-attribute 'denote-faces-title nil :weight 'semibold :foreground cyan-cooler)
          (set-face-attribute 'denote-faces-keywords nil :foreground keyword :slant 'italic)
          (set-face-attribute 'denote-faces-date nil :foreground 'unspecified :inherit 'shadow))))
    (add-hook 'enable-theme-functions #'krisb-denote--setup-faces))

  ;;; Denote-journal-extras
  (use-package denote-journal-extras
    :ensure nil
    :custom
    (denote-journal-extras-directory
     (expand-file-name "commonplace_book/journal" denote-directory))
    (denote-journal-extras-keyword "journal")
    (denote-journal-extras-title-format 'day-date-month-year-24h))

  ;;; Denote-explore
  ;; Useful Denote utilities
  (use-package denote-explore
    :after denote
    ;; Don't forget to install the required dependencies required for my chosen
    ;; `denote-explore-network-format'
    :ensure-system-package ((dot . graphviz)
                            (R . r))
    :custom
    (denote-explore-network-directory     ; Have to end path in slash
     (no-littering-expand-var-file-name "denote-explore/"))
    (denote-explore-network-format 'd3.js)
    (denote-explore-network-graphviz-filetype "pdf")
    (denote-explore-network-keywords-ignore '("archive")))

  ;;; Citar-denote
  (use-package citar-denote
    :diminish
    :bind (("C-c b c" . citar-create-note)
           :map krisb-note-keymap
           ("b b" . citar-denote-link-reference)
           ("b o" . citar-denote-dwim)
           ("b c" . citar-create-note)
           ("b n" . citar-denote-open-note)
           ("b k a" . citar-denote-add-citekey)
           ("b k r" . citar-denote-remove-citekey))
    :custom
    (citar-denote-subdir "/bib/")
    (citar-denote-signature nil)
    (citar-denote-title-format nil)       ; Use citekey as title
    (citar-denote-title-format-authors 2)
    (citar-denote-title-format-andstr "and")
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-template 'default)
    (citar-denote-file-types
     `((org
        :reference-format "#+reference: %s\n" ; Keep single space
        :reference-regex "^#\\+reference\\s-*:")
       (markdown-yaml
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")
       (markdown-toml
        :reference-format "reference  = %s\n"
        :reference-regex "^reference\\s-*=")
       (text
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")))
    :config
    (citar-denote-mode 1)

    ;; Keep the reference keyword after Denote's identifier keyword
    (defun krisb-citar-denote--add-reference (citekey file-type)
      "Like `citar-denote--add-reference' but adds reference to specific line.
  Namely, adds the #+reference after the #+identifier line."
      (save-excursion
        (goto-char (point-min))
        (re-search-forward (rx bol (literal "#+identifier:")) nil t)
        (if (eq (or file-type 'org) 'org)
            (forward-line 1)
          (forward-line -2))
        (insert
         (format (citar-denote--reference-format file-type) citekey))))
    (advice-add 'citar-denote--add-reference :override #'krisb-citar-denote--add-reference))

  ;;; Provide
  (provide 'krisb-denote)
#+end_src

**** =krisb-citations.el=

#+begin_src emacs-lisp :tangle "modules/krisb-citations.el"
  ;;; Oc (org-cite)
  ;; Built-in citations in org-mode
  (use-package oc
    :ensure nil
    :after org
    :custom
    (org-cite-global-bibliography krisb-bibliography-files)
    (org-cite-csl-locales-dir nil)
    (org-cite-csl-styles-dir (expand-file-name "styles/" krisb-zotero-directory))
    (org-cite-export-processors
     '((md . (csl "chicago-fullnote-bibliography.csl"))   ; Footnote reliant
       (latex biblatex)                                   ; For humanities
       (odt . (csl "chicago-fullnote-bibliography.csl"))  ; Footnote reliant
       (docx . (csl "chicago-fullnote-bibliography.csl")) ; Footnote reliant
       (t . (csl "modern-language-association.csl"))))    ; Fallback
    :custom-face
    ;; Have citation link faces look closer to as they were for `org-ref'
    (org-cite ((t (:foreground "DarkSeaGreen4"))))
    (org-cite-key ((t (:foreground "forest green" :slant italic)))))

  ;;; Citar
  (use-package citar
    :hook (org-mode . citar-capf-setup)
    :bind (("C-c b b" . citar-insert-citation)
           ("C-c b o" . citar-open)
           ("C-c b f" . citar-open-files)
           ("C-c b n" . citar-open-notes)
           :map org-mode-map
           ([remap org-cite-insert] . citar-insert-citation))
    :custom
    (citar-bibliography krisb-bibliography-files)
    (citar-notes-paths (list krisb-notes-directory))
    (citar-open-entry-function #'citar-open-entry-in-file)
    (citar-default-action #'citar-open-files)
    :config
    (with-eval-after-load 'all-the-icons
      ;; Taken from https://github.com/emacs-citar/citar/wiki/Indicators
      (defvar citar-indicator-files-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "file-o"
                  :face 'all-the-icons-green
                  :v-adjust -0.1)
         :function #'citar-has-files
         :padding "  " ; Need this because the default padding is too low for these icons
         :tag "has:files"))
      (defvar citar-indicator-links-icons
        (citar-indicator-create
         :symbol (all-the-icons-octicon
                  "link"
                  :face 'all-the-icons-orange
                  :v-adjust 0.01)
         :function #'citar-has-links
         :padding "  "
         :tag "has:links"))
      (defvar citar-indicator-notes-icons
        (citar-indicator-create
         :symbol (all-the-icons-material
                  "speaker_notes"
                  :face 'all-the-icons-blue
                  :v-adjust -0.3)
         :function #'citar-has-notes
         :padding "  "
         :tag "has:notes"))
      (defvar citar-indicator-cited-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "circle-o"
                  :face 'all-the-icon-green)
         :function #'citar-is-cited
         :padding "  "
         :tag "is:cited"))
      (setq citar-indicators
            (list citar-indicator-files-icons
                  citar-indicator-links-icons
                  citar-indicator-notes-icons
                  citar-indicator-cited-icons))))

  ;;; Citar-org
  ;; Use `citar' with `org-cite'
  (use-package citar-org
    :after oc
    :ensure nil
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-org-styles-format 'short)
    :config
    ;; Faster citation rendered (i.e. activation). Replaces the *VERY SLOW*
    ;; `'org-cite-basic-activate' (which `citar' relies on in
    ;; `citar-org-activate') with a faster version. Practically necessary if I
    ;; want to edit a line with a citation in Org without having to wait several
    ;; seconds for it to render. See for more information on the matter:
    ;; 1. https://www.reddit.com/r/orgmode/comments/td76wz/comment/i0lpg7k/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
    ;; 2. https://list.orgmode.org/87ils5sz8x.fsf@localhost/t/#u
    (defun krisb-citar-basic-activate (citation)
      "Like `org-cite-basic-activate' but faster.
  Leverages citar's caching."
      (pcase-let ((`(,beg . ,end) (org-cite-boundaries citation))
                  ;; NOTE 2024-09-05: Use `citar' (and its cache) to get all keys
                  (keys (let (keys)
                          (maphash (lambda (key value) (push key keys))
                                   (citar-get-entries))
                          keys)))
        (put-text-property beg end 'font-lock-multiline t)
        (add-face-text-property beg end 'org-cite)
        (dolist (reference (org-cite-get-references citation))
          (pcase-let* ((`(,beg . ,end) (org-cite-key-boundaries reference))
                       (key (org-element-property :key reference)))
            ;; Highlight key on mouse over.
            (put-text-property beg end
                               'mouse-face
                               org-cite-basic-mouse-over-key-face)
            (if (member key keys)
                ;; Activate a correct key. Face is `org-cite-key' and `help-echo'
                ;; displays bibliography entry, for reference. <mouse-1> calls
                ;; `org-open-at-point'.
                ;; NOTE 2024-09-05: Use `citar' (and its cache) to create the
                ;; bibliographic entry text used in the help echo
                (let* ((entry (string-trim (citar-format-reference (list key))))
                       (bibliography-entry
                        (org-element-interpret-data entry)))
                  (add-face-text-property beg end 'org-cite-key)
                  (put-text-property beg end 'help-echo bibliography-entry)
                  (org-cite-basic--set-keymap beg end nil))
              ;; Activate a wrong key. Face is `error', `help-echo' displays
              ;; possible suggestions.
              (add-face-text-property beg end 'error)
              (let ((close-keys (org-cite-basic--close-keys key keys)))
                (when close-keys
                  (put-text-property beg end 'help-echo
                                     (concat "Suggestions (mouse-1 to substitute): "
                                             (mapconcat #'identity close-keys " "))))
                ;; When the are close know keys, <mouse-1> provides completion to
                ;; fix the current one. Otherwise, call `org-cite-insert'.
                (org-cite-basic--set-keymap beg end (or close-keys 'all))))))))
    (setopt citar-org-activation-functions '(krisb-citar-basic-activate citar-org-activate-keymap)))

  ;;; Provide
  (provide 'krisb-citations)
#+end_src

**** =krisb-pdfs.el=

#+begin_src emacs-lisp :tangle "modules/krisb-pdfs.el"
  ;;; Doc-view
  (use-package doc-view
    :custom
    (doc-view-resolution 192))

  ;;; Pdf-tools
  ;;;; Itself
  ;; View pdfs and interact with them. Has many dependencies
  ;; https://github.com/politza/pdf-tools#compiling-on-fedora
  (use-package pdf-tools
    ;; FIXME 2024-01-13: This is a pull request fork that implements continuous
    ;; scrolling (`pdf-view-roll-minor-mode'). See
    ;; https://github.com/vedang/pdf-tools/pull/224
    ;; Must call `pdf-tools-install' or `pdf-loader-install' (which defers
    ;; loading; see its docstring and
    ;; https://github.com/vedang/pdf-tools?tab=readme-ov-file#installing-pdf-tools-elisp-code)
    ;; to have PDF files use pdf-view-mode and have everything required loaded
    :hook (on-first-buffer . pdf-loader-install)
    :bind ( :map pdf-view-mode-map
            ("C-c C-r a" . pdf-view-auto-slice-minor-mode)
            ;; Additionally useful since it lets you scroll via
            ;; `scroll-other-window'
            ([remap scroll-up-command] . pdf-view-scroll-up-or-next-page)
            ([remap scroll-down-command] . pdf-view-scroll-down-or-previous-page))
    :config
    ;; Make PDF registers persistent
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-locals-to-save 'pdf-view-register-alist)))

  ;;;; Pdf-view
  (use-package pdf-view
    :ensure nil
    :autoload krisb-pdf-view-cleanup-windows-h
    :hook (pdf-view-mode . (lambda () (add-hook 'kill-buffer-hook #'krisb-pdf-view-cleanup-windows-h nil t)))
    :custom
    (pdf-view-resize-factor 1.1)
    (pdf-view-display-size 'fit-page)
    (pdf-view-continuous nil) ; REVIEW 2024-01-16: Change this when I get to use image-roll?
    ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
    (pdf-view-use-scaling t)
    (pdf-view-use-imagemagick t)
    :config
    ;; Taken from Doom
    (defun krisb-pdf-view-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      ;; We add a guard here because sometimes things go wrong and this function
      ;; is called before `pdf-annot' is loaded, causing an error
      (when (featurep 'pdf-annot)
        (when (buffer-live-p pdf-annot-list-document-buffer)
          (pdf-info-close pdf-annot-list-document-buffer))
        (when (buffer-live-p pdf-annot-list-buffer)
          (kill-buffer pdf-annot-list-buffer))
        (let ((contents-buffer (get-buffer "*Contents*")))
          (when (and contents-buffer (buffer-live-p contents-buffer))
            (kill-buffer contents-buffer))))))

  ;;;; Krisb-pdfs-ext
  ;; Emacs wrapper and convenience functions for changing package metadata using
  ;; `pdftk'. See https://unix.stackexchange.com/a/72457 for more information on
  ;; the CLI commands involved.
  (use-package krisb-pdfs-ext
    :ensure nil
    :after pdf-view
    :ensure-system-package pdftk
    :bind ( :map pdf-view-mode-map
            ("C-c m" . 'krisb-pdf-tools--metadata-modify)
            ("C-;" . krisb-avy-pdf-highlight)
            :map pdf-annot-list-mode-map
            ([remap tablist-push-regexp-filter] . krisb-pdf-annot-list-filter-regexp)))

  ;;;; Pdf-outline
  (use-package pdf-outline
    :ensure nil
    :custom
    (pdf-outline-enable-imenu t)
    (pdf-outline-display-labels t)
    (pdf-outline-imenu-use-flat-menus nil))

  ;;;; Pdf-annot
  (use-package pdf-annot
    :ensure nil
    :hook (pdf-annot-list-mode-hook krisb-pdf-annot--setup-context-window-display-action)
    :custom
    (pdf-annot-color-history ; "Default" color list. Appears at the top of annotation color change commands
     '("yellow" "SteelBlue1" "SeaGreen3" "LightSalmon1" "MediumPurple1"))
    (pdf-annot-list-format '((page . 3)
                             (color . 8)
                             (text . 68)
                             (type . 10)))
    (pdf-annot-list-highlight-type nil)
    :config
    ;; Fit the "contents" window to buffer height
    (defun krisb-pdf-annot-list-context-function (id buffer)
      "Show the contents of an Annotation.

  For an annotation identified by ID, belonging to PDF in BUFFER,
  get the contents and display them on demand."
      (with-current-buffer (get-buffer-create "*Contents*")
        (set-window-buffer nil (current-buffer))
        (let ((inhibit-read-only t))
          (erase-buffer)
          (when id
            (save-excursion
              (insert
               (pdf-annot-print-annotation
                (pdf-annot-getannot id buffer)))))
          (read-only-mode 1))
        (fit-window-to-buffer)
        (visual-line-mode)))
    (advice-add 'pdf-annot-list-context-function :override #'krisb-pdf-annot-list-context-function)

    (defun krisb-pdf-annot--setup-context-window-display-action ()
      "Set the display action for the \"context buffer\".
  The context buffer is the buffer that shows annotation contents in
  `pdf-annot-mode'"
      (setq-local tablist-context-window-display-action
                  '((display-buffer-reuse-window tablist-display-buffer-split-below-and-attach)
                    (window-height . 0.25)
                    (inhibit-same-window . t)
                    (window-parameters (no-other-window . t)
                                       (mode-line-format . none))))))

  ;;; Saveplace-pdf-view
  ;; Save place in pdf-view buffers
  (use-package saveplace-pdf-view
    :after saveplace)

  ;;; Provide
  (provide 'krisb-pdfs)
  ;;; krisb-pdfs.el ends here
#+end_src

*** Todos

**** =krisb-org-agenda.el=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Calendar
  (use-package calendar
    :ensure nil
    :bind ( :map krisb-open-keymap
            ("c" . calendar))
    :custom
    (calendar-time-display-form
     '( 24-hours ":" minutes (when time-zone (format "(%s)" time-zone))))
    (calendar-week-start-day 1)           ; Monday
    (calendar-time-zone-style 'symbolic)

    ;; Diary
    (calendar-mark-diary-entries-flag t)

    ;; Holidays
    (calendar-mark-holidays-flag t)
    :init
    (defun krisb-get-lat-lon ()
      "Fetch latitude and longitude via IP-based geolocation service."
      (let (lat lon (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (_status)
                        (goto-char (point-min))
                        (re-search-forward "^$")
                        (let* ((json-object-type 'hash-table)
                               (json (json-read)))
                          (setq lat (gethash "lat" json)
                                lon (gethash "lon" json)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not lat) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-lat-lon] Maximum timeout reached"))
        (if (and lat lon)
            (cons lat lon)
          (message "[krisb-get-lat-lon] Failed to fetch geolocation data")
          nil)))

    (defun krisb-get-location-name ()
      "Get the current location."
      (let (city region (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (status)
                        (goto-char (point-min))
                        (re-search-forward "\n\n")  ;; Skip the headers
                        (let* ((json-object-type 'hash-table)
                               (json-key-type 'string)
                               (json-array-type 'list)
                               (data (json-read)))
                          (setq city (gethash "city" data)
                                region (gethash "region" data)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not city) (not region) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-location-name] Maximum timeout reached"))
        (if (and city region)
            (format "%s, %s" city region)
          (message "[krisb-get-location-name] Failed to fetch geolocation data")
          nil)))
    :config
    ;; Solar
    (require 'solar)
    (krisb-evaluate-when-internet
      20
      (let ((coords (krisb-get-lat-lon)))
        (setopt calendar-latitude (car coords)
                calendar-longitude (cdr coords)))
      (setopt calendar-location-name (krisb-get-location-name))))
#+end_src

**** =Org-agenda= and =org-super-agenda=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-agenda
  (use-package org-agenda
    :ensure nil
    :hook (org-agenda-mode . hl-line-mode)
    :bind ( :map krisb-open-keymap
            ("a" . org-agenda)
            :map org-agenda-mode-map
            ("`" . krisb-org-agenda-process))
    :custom
    ;; Effort
    (org-agenda-sort-noeffort-is-high t)
    (org-effort-durations
     '(("m" . 1)
       ("h" . 60)
       ("d" . 1440)
       ("w" . 10080)
       ("mon" . 43200)
       ("y" . 525960.0)))

    ;; Tags
    (org-use-tag-inheritance t)
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tags-exclude-from-inheritance '("project" "inbox"))
    (org-use-property-inheritance '("CATEGORY" "ARCHIVE"))
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tag-faces
     '(("project" . outline-1)))

    ;; Dependencies
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies nil)
    (org-agenda-dim-blocked-tasks t)

    ;; Org agenda
    (org-agenda-file-regexp "\\`[^.].*\\.org\\'")
    (org-agenda-sticky t) ; Set to nil if frequently modifying `org-agenda-custom-commands'
    (org-agenda-window-setup 'only-window)
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-tags-column 0)
    (org-agenda-start-on-weekday 1)
    (org-agenda-format-date #'krisb-org-agenda-format-date-aligned)
    (org-agenda-tags-todo-honor-ignore-options t)
    (org-agenda-todo-ignore-scheduled nil)
    (org-agenda-remove-times-when-in-prefix t)
    (org-agenda-remove-tags 'prefix)
    (org-agenda-prefix-format
     '((agenda  . " %i %-8:c%?-12t% s%-5e%(krisb-org-agenda-breadcrumb 20)")
       (todo  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (tags  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (search . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")))
    ;; See `krisb-org-sort-agenda-by-created-time' for my user-defined sorter
    (org-agenda-sorting-strategy
     '((agenda habit-down urgency-down priority-down user-defined-up deadline-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (search todo-state-up priority-down category-keep)))
    ;; See
    ;; https://emacs.stackexchange.com/questions/17302/is-there-a-way-to-make-org-mode-count-repetitive-tasks-done-certain-hours-past-m?rq=1
    (org-extend-today-until 3)
    (org-use-effective-time t)
    (org-agenda-block-separator ?─)
    (org-deadline-warning-days 3)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")
    (org-agenda-breadcrumbs-separator " ⇛ ")
    (org-agenda-skip-scheduled-delay-if-deadline nil)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-auto-exclude-function #'krisb-org-agenda-auto-exclude-function)
    (org-agenda-compact-blocks nil)

    ;; Capture templates
    ;; See also `org-capture-templates-contexts'
    (org-capture-templates
     `(("t" "Todo" entry
        (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
        "* TODO %? :inbox:%^g\n"
        :empty-lines 1)
       ("T" "Todo (without processing)" entry
        (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
        "* TODO %? %^g\n"
        :empty-lines 1)
       ("i" "Idea" entry
        (file+olp+datetree ,(car (denote-directory-files "20221011T101254")))
        "* %?\n"
        :tree-type month
        :empty-lines 1
        :clock-in t
        :clock-resume t
        :kill-buffer t)
       ("I" "Idea with context" entry
        (file+olp+datetree ,(car (denote-directory-files "20221011T101254")))
        "* %?\n\n+ %^{Context string}: %a"
        :tree-type month
        :empty-lines 1
        :clock-in t
        :clock-resume t
        :kill-buffer t)
       ("j" "Journal" entry
        (file+olp+datetree ,(car (denote-directory-files "20241006T214811")))
        "* %<%c>\n\n%?"
        :tree-type month
        :jump-to-captured t
        :immediate-finish t
        :empty-lines 1
        :clock-in t
        :clock-resume t)))
    (org-capture-use-agenda-date t)       ; Use the time-at-point if any

    ;; Todos
    (org-fast-tag-selection-single-key 'expert)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h@/!)" "MAYBE(m)" "|" "DONE(d!/@)" "CANCELED(c@/!)")))
    (org-todo-keyword-faces
     '(("NEXT" . (bold success))
       ("TODO" . org-todo)
       ("HOLD" . (shadow error))
       ("MAYBE" . (shadow org-todo))
       ("DONE" . (bold org-done))
       ("CANCELED" . error)))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-highest-priority ?A)
    (org-default-priority ?E)
    (org-lowest-priority ?F)
    (org-priority-faces
     '((?A . (bold org-priority))
       (?B . (bold org-priority))
       (?C . org-priority)
       (?D . org-priority)
       (?E . (shadow org-priority))
       (?F . (shadow org-priority))))
    ;; FIXME 2024-10-02: Haven't found a way to get this to mesh well with my
    ;; workflow
    (org-stuck-projects
     `("+project/-DONE-CANCELED"
       ("NEXT" "TODO")
       nil
       nil
       ,(rx (regexp org-not-done-heading-regexp))))

    ;; Input
    (org-read-date-prefer-future 'time)
    :custom-face
    (org-drawer ((t (:height 0.9))))
    (org-mode-line-clock ((t (:inherit org-agenda-date))))
    :init
    (defun krisb-org-agenda-breadcrumb (len)
      "Formatted breadcrumb for current `org-agenda' item."
      (org-with-point-at (org-get-at-bol 'org-marker)
        (let ((s (if (derived-mode-p 'org-mode)
                     (org-format-outline-path (org-get-outline-path)
                                              (1- (frame-width))
                                              nil org-agenda-breadcrumbs-separator)
                   ;; Not in Org buffer. This can happen, for example, in
                   ;; `org-agenda-add-time-grid-maybe' where time grid does not
                   ;; correspond to a particular heading.
                   "")))
          (if (equal "" s) ""
            (concat (truncate-string-to-width s len 0 nil (truncate-string-ellipsis)) org-agenda-breadcrumbs-separator)))))
    :config
    ;; Populate `org-agenda-files'
    (dolist (f (directory-files-recursively krisb-org-agenda-directory
                                            (rx (or (literal ".org") (literal ".org_archive")) eol)))
      (add-to-list 'org-agenda-files f))

    ;; Taken from
    ;; https://github.com/psamim/dotfiles/blob/master/doom/config.el#L213
    (defun krisb-org-agenda-format-date-aligned (date)
      "Format a DATE string for display in the agenda or timeline.
  This function makes sure that dates are aligned for easy reading."
      (require 'cal-iso)
      (let* ((dayname (calendar-day-name date 1 nil))
             (day (cadr date))
             (day-of-week (calendar-day-of-week date))
             (month (car date))
             (monthname (calendar-month-name month 1))
             (year (nth 2 date))
             (iso-week (org-days-to-iso-week
                        (calendar-absolute-from-gregorian date)))
             (weekyear (cond ((and (= month 1) (>= iso-week 52))
                              (1- year))
                             ((and (= month 12) (<= iso-week 1))
                              (1+ year))
                             (t year)))
             (weekstring (if (= day-of-week 1)
                             (format " W%02d" iso-week)
                           "")))
        (format " %-2s. %2d %s"
                dayname day monthname)))

    (defun krisb-org-agenda-auto-exclude-function (tag)
      "Set tags based on time of day.
  See ((org) Filtering/limiting agenda items)."
      (when (cond ((member tag '("@home" "@hobbies"))
                   (let ((hr (nth 2 (decode-time))))
                     ;; After 10 or before 21
                     (or (> hr 10) (< hr 21)))))
        (concat "-" tag)))

    (defun krisb-org-agenda-process ()
      "(Bespoke) process org-agenda entry at point."
      (interactive)
      (org-agenda-priority)
      (org-agenda-set-tags)
      (org-agenda-next-item 1)))

  ;;; Org-super-agenda
  (use-package org-super-agenda
    :pin gnu-elpa-devel
    :demand
    :after org-agenda
    :custom
    (org-super-agenda-hide-empty-groups t)
    ;; FIXME 2024-10-06: When trying to set `org-super-agenda-keep-order' to
    ;; non-nil, it causes an error when using :auto-* selectors. This doesn't seem
    ;; to occur in an emacs -Q instances, but I have no clue what is causing the
    ;; error in my config... Although the following PR might fix the issue:
    ;; https://github.com/alphapapa/org-super-agenda/pull/242. Also see the NOTE
    ;; above, near the :vc keword
    (org-super-agenda-keep-order t)
    (org-agenda-cmp-user-defined #'krisb-org-sort-agenda-by-created-time)
    :init
    (defun krisb-org-get-created-time (entry)
      "Return the CREATED time of ENTRY, or an empty string if it doesn't exist."
      (let ((marker (get-text-property 0 'marker entry)))
        (if marker
            (org-entry-get marker "CREATED")
          "")))

    (defun krisb-org-sort-agenda-by-created-time (a b)
      "Compare two agenda items, A and B, by their CREATED property."
      (let* ((time-a (krisb-org-get-created-time a))
             (time-b (krisb-org-get-created-time b)))
        (cond
         ((string= time-a "") +1)         ; A has no CREATED property, put it last
         ((string= time-b "") -1)         ; B has no CREATED property, put it last
         (t
          (if (time-less-p (date-to-time time-a) (date-to-time time-b))
              -1 +1)))))
    :config
    (org-super-agenda-mode 1)
    ;; Relevant variables to set locally in `org-agenda-custom-commands'
    ;; - `org-agenda-overriding-header'
    ;; - `org-agenda-show-inherited-tags'
    ;; - `org-agenda-sorting-strategy'
    ;; - `org-agenda-start-day'
    ;; - `org-agenda-span'
    ;; - `org-agenda-prefix-format'
    ;; - `org-agenda-scheduled-leaders'
    ;; - `org-agenda-deadline-leaders'
    ;; - `org-agenda-skip-deadline-prewarning-if-scheduled'
    ;; - `org-agenda-skip-scheduled-if-deadline-is-shown'
    ;; - `org-habit-show-all-today'
    ;; - `org-habit-show-habits-only-for-today'
    ;; - `org-agenda-dim-blocked-tasks'
    ;; - `org-agenda-include-diary'
    ;; - `org-agenda-insert-diary-extract-time'
    ;; - `org-agenda-skip-function'
    ;; - `org-agenda-entry-types'
    ;; - `org-deadline-warning-days'
    ;; - `org-scheduled-delay-days'
    (setopt org-agenda-custom-commands
            '(("f" "FYP"
               ((agenda ""
                        ((org-agenda-overriding-header "Time-bound tasks")
                         (org-agenda-show-inherited-tags t)
                         (org-agenda-start-day "+0d")
                         (org-agenda-span 'day)
                         (org-habit-show-habits-only-for-today t)
                         (org-agenda-dim-blocked-tasks t)
                         (org-agenda-include-diary t)
                         (org-agenda-insert-diary-extract-time t)
                         (org-super-agenda-groups
                          '((:discard (:and (:tag "inbox" :not (:deadline t)))) ; We want to see deadlines even if they have the inbox tag
                            (:auto-category t)))))
                (tags-todo "+TODO=\"NEXT\"-project-inbox"
                           ((org-agenda-overriding-header "Next")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks 'invisible)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                (tags-todo "+TODO=\"TODO\"-project-inbox"
                           ((org-agenda-overriding-header "Standard")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks 'invisible)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))))
              ("i" "Inbox: process entries"
               ((agenda ""
                        ((org-agenda-overriding-header "Time-bound inbox")
                         (org-agenda-start-day "+0d")
                         (org-agenda-span 5)
                         (org-habit-show-habits nil)
                         (org-agenda-entry-types
                          '(:deadline :scheduled))
                         (org-super-agenda-groups
                          '((:tag "inbox")
                            (:todo "MAYBE")
                            (:discard (:anything t))))))
                (tags-todo "+inbox"
                           ((org-agenda-overriding-header "Regular inbox")
                            (org-agenda-dim-blocked-tasks t)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                (todo "MAYBE"
                      ((org-agenda-overriding-header "Regular maybes")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline))))))
              ("p" "Projects"
               ((tags-todo "project"
                           ((org-agenda-overriding-header "")
                            ;; This lets project sub-tasks be discoverable by a tags
                            ;; search. One might think :auto-parent makes this
                            ;; redundant, but this handles cases where I have a
                            ;; sub-task but its parent is not a project -- I do this
                            ;; sometimes for simple dependencies between todos
                            ;; FIXME 2024-10-07: This shows the project tag for all the
                            ;; sub-tasks, which can be visually noisy. I'm not sure if
                            ;; there is a workaround
                            (org-tags-exclude-from-inheritance
                             (remove "project" org-tags-exclude-from-inheritance))
                            (org-agenda-prefix-format
                             ;; FIXME 2024-10-07: Not sure if this is a tags- or
                             ;; todo-type view
                             '((tags  . " %i %-8:c%-5e%?-12t% s")))
                            (org-super-agenda-groups
                             '(( :auto-parent t
                                 :order 2)
                               ( :name "All projects"
                                 :anything t
                                 :order 1))))))))))
#+end_src

**** Friends of =org-agenda=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-clock
  (use-package org-clock
    :ensure nil
    :custom
    (org-clock-persist t)
    (org-clock-out-when-done t)
    (org-clock-history-length 10)
    (org-clock-in-resume t)
    (org-clock-persist-query-resume t)
    (org-clock-into-drawer t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-report-include-clocking-task t)
    (org-show-notification-handler #'(lambda (str)
                                       (notifications-notify
                                        :title "Org-agenda task overrun!"
                                        :body str
                                        :app-name "GNU Emacs"
                                        :urgency 'normal)))
    ;; Mode line
    (org-clock-string-limit 0)
    (org-clock-heading-function 'krisb-org-clock-get-heading-string)
    :config
    (org-clock-persistence-insinuate)

    ;; Mode line string
    (defun krisb-org-clock-get-heading-string ()
      "Get truncated org heading string.

  Same as default but truncates with `truncate-string-ellipsis'."
      (let ((heading (org-link-display-format
                      (org-no-properties (org-get-heading t t t t)))))
        (truncate-string-to-width heading 40 nil nil (truncate-string-ellipsis)))))

  ;;; Org-habit
  (use-package org-habit
    :after org-agenda
    :ensure nil
    :custom
    (org-habit-show-habits t)
    (org-habit-following-days 1)
    (org-habit-preceding-days 14)
    (org-habit-show-done-always-green t)
    (org-habit-show-habits-only-for-today t)
    (org-habit-graph-column 110)
    (org-habit-today-glyph ?◌)
    (org-habit-completed-glyph ?●)
    (org-habit-missed-glyph ?○))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Provide
  (provide 'krisb-org-agenda)
#+end_src

*** Blogging

**** =krisb-mermaid.el=

#+begin_src emacs-lisp :tangle "modules/krisb-mermaid.el"
  ;;; Mermaid-mode
  (use-package mermaid-mode)

  ;;; Ob-mermaid
  ;; Mermaid diagrams
  (use-package ob-mermaid
    :ensure-system-package (mmdc . mermaid-cli)
    :custom
    (ob-mermaid-cli-path (executable-find "mmdc"))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append '((mermaid . t)) org-babel-load-languages)))

  ;;; Provide
  (provide 'krisb-mermaid)
#+end_src

* Lisp (libraries)
:PROPERTIES:
:VISIBILITY: children
:END:

** =krisb-common.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-common.el"
  ;;; krisb-common.el --- Common variables and functions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Variables and functions I use throughout my Emacs config.

  ;;; Code:

  ;;; Variables

  ;;;; Me
  (setq user-full-name "Kristoffer Balintona"
        user-mail-address "krisbalintona@gmail.com")

  ;;;; System
  (defconst krisb-system-win-p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst krisb-system-mac-p
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst krisb-system-linux-p
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst krisb-linux-distribution
    (when krisb-system-linux-p (shell-command-to-string "printf %s \"$(lsb_release -sd)\""))
    "An escaped string that has the name of my Linux distribution.")

  (defconst krisb-linux-ubuntu-p
    (integerp (string-match "Ubuntu" krisb-linux-distribution))
    "Is this Ubuntu?")

  (defconst krisb-linux-fedora-p
    (integerp (string-match "Fedora" krisb-linux-distribution))
    "Is this Fedora?")

  (defconst krisb-linux-arch-p
    (integerp (string-match "Arch" krisb-linux-distribution))
    "Is this Arch Linux?")

  ;;;; Org
  (defvar krisb-org-directory (expand-file-name "org-database" "~/Documents")
    "The directory holding my org files.
  Meant to be used as the value of `org-directory'.")

  (defvar krisb-notes-directory (expand-file-name "notes" krisb-org-directory)
    "My notes directory.")

  (defvar krisb-blog-directory (expand-file-name "blog" krisb-notes-directory)
    "The directory for my pre-export blog files.")

  (defvar krisb-org-agenda-directory (expand-file-name "agenda" krisb-org-directory)
    "The directory holding my main org-agenda files.")

  (defvar krisb-org-agenda-main-file (expand-file-name "todo.org" krisb-org-agenda-directory)
    "My main org-agenda file.")

  (defvar krisb-org-agenda-directory-files (cl-remove-if
                                            (lambda (f)
                                              (string-match-p (rx "archive.org") f))
                                            (directory-files-recursively krisb-org-agenda-directory ".org$"))
    "A list of all org and org_archive files in `krisb-org-directory'.")

  (defvar krisb-bibliography-files (list (expand-file-name "master-lib.bib" krisb-org-directory))
    "A list of my bibliography (.bib) files.")

  ;;;; Other
  (defvar krisb-zotero-directory (expand-file-name "Zotero" "~")
    "The directory for everything Zotero.
  Useful for some citation-related configurations.")

  ;;; Functions

  ;;; Macros
  (defmacro krisb-evaluate-when-internet (interval &rest body)
    "Asynchronously evaluate BODY once internet connection is available.
  Retries every INTERVAL seconds."
    (declare (indent 0))
    `(let ((url "https://google.com"))
       (cl-labels ((check-connection (status)
                     (if (plist-get status :error)
                         (progn
                           (message "No internet. Retrying in %s seconds..." interval)
                           (run-at-time interval nil
                                        (lambda () (url-retrieve url #'check-connection))))
                       (progn ,@body))))  ; Execute BODY on success.
         (url-retrieve url #'check-connection))))

  ;;; Keymaps
  (defvar-keymap krisb-note-keymap
    :doc "Prefix for my note-taking needs.")
  (bind-key "C-c n" krisb-note-keymap 'global-map)

  (defvar-keymap krisb-lsp-keymap
    :doc "Prefix for lsp-related commands.")
  (with-eval-after-load 'lsp-mode
    (bind-key "C-c l" krisb-lsp-keymap 'lsp-mode-map))

  (defvar-keymap krisb-file-keymap
    :doc "Prefix for file-related commands.")
  (bind-key "C-c f" krisb-file-keymap 'global-map)

  (defvar-keymap krisb-yank-keymap
    :doc "Prefix for yanking stuff.")
  (bind-key "C-c i" krisb-yank-keymap 'global-map)

  (defvar-keymap krisb-open-keymap
    :doc "Prefix for opening various hings.")
  (bind-key "C-c o" krisb-open-keymap 'global-map)

  (defvar-keymap krisb-toggle-keymap
    :doc "Prefix for toggling stuff.")
  (bind-key "C-M-s-t" krisb-toggle-keymap 'global-map)


  ;;; Provide
  (provide 'krisb-common)
  ;;; krisb-common.el ends here
#+end_src

** =krisb-themes-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-themes-ext.el"
  ;;; krisb-themes-ext.el --- Manage switching/toggling of themes  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code for switching between two themes on-demand according to
  ;; time-of-day.

  ;;; Code:
  (require 'color)

  ;;; Variables

  (defgroup krisb-themes-ext ()
    "Extensions for using themes."
    :group 'faces
    :prefix "krisb-themes-ext-")


  (defcustom krisb-themes-ext-dark nil
    "The chosen dark theme."
    :type 'symbol)

  (defcustom krisb-themes-ext-light nil
    "The chosen light theme."
    :type 'symbol)

  ;;; Function definitions
  (defun krisb-themes-ext-ensure-themes-loaded ()
    "Ensure that the themes in `krisb-themes-ext-list' are loaded."
    (unless (or (custom-theme-p krisb-themes-ext-dark)
                (custom-theme-p krisb-themes-ext-light))
      (load-theme krisb-themes-ext-dark t t)
      (load-theme krisb-themes-ext-light t t)))

  (defun krisb-themes-ext-proper-load-theme-light ()
    "Properly load `krisb-theme-light' theme.
  Also disables its light counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-dark)
    (load-theme krisb-themes-ext-light t))

  (defun krisb-themes-ext-proper-load-theme-dark ()
    "Properly load `krisb-theme-dark' theme.
  Also disables its dark counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-light)
    (load-theme krisb-themes-ext-dark t))

  (defun krisb-theme-ext-enable-theme-time-of-day (day-start night-start)
    "Enables the theme based on time of day.
  If daytime, call `krisb-themes-ext-proper-load-theme-light'. If
  nighttime, call `krisb-themes-ext-proper-load-theme-dark'.

  Nighttime begins at NIGHT-START hour and daytime begins at DAY-START
  hour."
    (interactive)
    (let ((hour (string-to-number (format-time-string "%H"))))
      ;; Dark theme between 7 PM or 8 AM
      (if (or (<= night-start hour) (<= hour day-start))
          (krisb-themes-ext-proper-load-theme-dark)
        (krisb-themes-ext-proper-load-theme-light))))

  ;;; Command
  (defun krisb-themes-ext-theme-switcher ()
    "Switch between the light and dark themes."
    (interactive)
    (krisb-themes-ext-ensure-themes-loaded)
    (let* ((current (car custom-enabled-themes)))
      (cond ((equal krisb-themes-ext-light current)
             (krisb-themes-ext-proper-load-theme-dark))
            ((equal krisb-themes-ext-dark current)
             (krisb-themes-ext-proper-load-theme-light)))))

  ;;; Provide
  (provide 'krisb-themes-ext)
  ;;; krisb-themes-ext.el ends here
#+end_src

** =krisb-vertico.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-vertico.el"
  ;;; krisb-vertico.el --- Vertico extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extension to Vertico.

  ;;; Code:
  (require 'vertico)

  ;;; Tab for tramp paths
  ;; Exception for TAB behavior when completing TRAMP paths. See
  ;; https://github.com/minad/vertico/wiki#restore-old-tab-behavior-when-completing-tramp-paths
  (defun krisb-vertico-insert-unless-tramp ()
    "Insert current candidate in minibuffer, except for tramp."
    (interactive)
    (if (vertico--remote-p (vertico--candidate))
        (minibuffer-complete)
      (vertico-insert)))
  (bind-key [remap vertico-insert] #'krisb-vertico-insert-unless-tramp 'vertico-map)

  ;;; Exceptions for org commands
  ;; Special for `org-agenda-filter' and `org-tags-view'. See
  ;; https://github.com/minad/vertico?tab=readme-ov-file#org-agenda-filter-and-org-tags-view
  (defun krisb-vertico-org-enforce-basic-completion (&rest args)
    (minibuffer-with-setup-hook
        (:append
         (lambda ()
           (let ((map (make-sparse-keymap)))
             (define-key map [tab] #'minibuffer-complete)
             (use-local-map (make-composed-keymap (list map) (current-local-map))))
           (setq-local completion-styles (cons 'basic completion-styles)
                       vertico-preselect 'prompt)))
      (apply args)))
  (with-eval-after-load 'org
    (declare-function org-make-tags-matcher "org")
    (advice-add #'org-make-tags-matcher :around #'krisb-vertico-org-enforce-basic-completion))
  (with-eval-after-load 'org-agenda
    (declare-function org-agenda-filter "org-agenda")
    (advice-add #'org-agenda-filter :around #'krisb-vertico-org-enforce-basic-completion))

  ;;; Truncate long filenames
  ;; Left-truncate filename candidates. Taken from
  ;; https://github.com/minad/vertico/wiki#left-truncate-recentf-filename-candidates-eg-for-consult-buffer
  (defun krisb-vertico-truncate-filename-candidates (args)
    (if-let ((arg (car args))
             (type (get-text-property 0 'multi-category arg))
             ((eq (car-safe type) 'file))
             (w (max 30 (- (window-width) 38)))
             (l (length arg))
             ((> l w)))
        (setcar args (concat "…" (truncate-string-to-width arg l (- l w)))))
    args)
  (advice-add #'vertico--format-candidate :filter-args #'krisb-vertico-truncate-filename-candidates)

  ;;; Provide
  (provide 'krisb-vertico)
  ;;; krisb-vertico.el ends here
#+end_src

** =krisb-denote.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-denote.el"
  ;;; krisb-denote.el --- Denote extensions            -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code to extend Denote.

  ;;; Code:
  (require 'denote)

  ;;; Standardizing note front-mattert
  (defun krisb-org-set-keyword (keyword value)
    ;; Got lazy and copied `org-roam-set-keyword'
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" keyword ":\\(.*\\)") (point-max) t)
            (if (string-blank-p value)
                (kill-whole-line)
              (replace-match (concat " " value) 'fixedcase nil nil 1))
          ;; Don't think this is necessary, and it'd be too much code
          ;; to copy if it were
          ;; (org-roam-end-of-meta-data 'drawers)
          (if (save-excursion (end-of-line) (eobp))
              (progn
                (end-of-line)
                (insert "\n"))
            (forward-line)
            (beginning-of-line))
          (insert "#+" keyword ": " value "\n")))))

  (defun krisb-note-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
        (denote-trim-whitespace
         (buffer-substring-no-properties
          (match-beginning 1)
          (match-end 1))))))

  (defun krisb-denote-insert-identifier-maybe ()
    (when (and (buffer-file-name) (denote-file-is-note-p (buffer-file-name)))
      (cond
       ;; ID doesn't exist
       ((not (krisb-note-buffer-prop-get "identifier"))
        (save-excursion
          (beginning-of-buffer)
          ;; Move cursor until after the first of following
          ;; properties exists: filetags, date, or title
          (while (and (not (eobp))
                      (cond
                       ((krisb-note-buffer-prop-get "filetags")
                        (re-search-forward (rx bol "#+"
                                               (or "F" "f")
                                               (or "I" "i")
                                               (or "L" "l")
                                               (or "E" "e")
                                               (or "T" "t")
                                               (or "A" "a")
                                               (or "G" "g")
                                               (or "S" "s")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "date")
                        (re-search-forward (rx bol "#+"
                                               (or "D" "d")
                                               (or "A" "a")
                                               (or "T" "t")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "title")
                        (re-search-forward (rx bol "#+"
                                               (or "T" "t")
                                               (or "I" "i")
                                               (or "T" "t")
                                               (or "L" "l")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))))
            (cond
             ((save-excursion (end-of-line) (eobp))
              (end-of-line)
              (insert "\n"))
             (t
              (forward-line)
              (beginning-of-line))))
          (insert "#+identifier: " (denote-retrieve-filename-identifier (buffer-file-name)) "\n")))
       ;; When file name ID and identifier property value differ
       ((not (string= (denote-retrieve-filename-identifier (buffer-file-name))
                      (krisb-note-buffer-prop-get "identifier")))
        (krisb-org-set-keyword "identifier" (denote-retrieve-filename-identifier (buffer-file-name)))))))
  (defun krisb-denote-rearrange-keywords-maybe ()
    (let* ((f (buffer-file-name))
           (file-type (denote-filetype-heuristics f))
           (cur-keywords (seq-uniq (denote-retrieve-keywords-value f file-type)))
           (sorted-keywords (denote-keywords-sort (copy-list cur-keywords))))
      (denote--rewrite-keywords f sorted-keywords file-type)
      ;; Add empty filetags property if one isn't already present
      (unless (krisb-note-buffer-prop-get "filetags")
        (beginning-of-buffer)
        (while (and (not (eobp))
                    (cond
                     ((krisb-note-buffer-prop-get "date")
                      (re-search-forward (rx bol "#+"
                                             (or "D" "d")
                                             (or "A" "a")
                                             (or "T" "t")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))
                     ((krisb-note-buffer-prop-get "title")
                      (re-search-forward (rx bol "#+"
                                             (or "T" "t")
                                             (or "I" "i")
                                             (or "T" "t")
                                             (or "L" "l")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))))
          (cond
           ((save-excursion (end-of-line) (eobp))
            (end-of-line)
            (insert "\n"))
           (t
            (forward-line)
            (beginning-of-line))))
        (insert "#+filetags:\n"))))
  (defun krisb-denote-ensure-title-space ()
    (save-excursion
      (beginning-of-buffer)
      (if-let ((end-of-title-keyword
                (re-search-forward (rx bol "#+"
                                       (or "T" "t")
                                       (or "I" "i")
                                       (or "T" "t")
                                       (or "L" "l")
                                       (or "E" "e")
                                       ":")
                                   (point-max) t)))
          (progn
            (goto-char end-of-title-keyword)
            (just-one-space))
        (error "No title in %s!" (buffer-file-name)))))

  ;;;###autoload
  (defun krisb-denote-standardize-front-matter ()
    (interactive)
    (let ((existing-buffers (buffer-list)))
      (save-mark-and-excursion
        (dolist (file (denote-directory-files-matching-regexp (rx (literal ".org") eol)))
          ;; Export all the files
          (with-current-buffer (find-file-noselect file)
            (read-only-mode -1)
            (save-restriction
              (widen)
              (krisb-denote-insert-identifier-maybe)
              (krisb-denote-rearrange-keywords-maybe)
              (krisb-denote-ensure-title-space)
              (delete-trailing-whitespace))
            (with-demoted-errors "Error: %S"
              (denote-rename-file-using-front-matter file))
            ;; Kill buffer unless it already exists
            (unless (member (get-buffer (buffer-name)) existing-buffers)
              (kill-buffer)))))))

  ;;; Provide
  (provide 'krisb-denote)
  ;;; krisb-denote.el ends here
#+end_src

** =krisb-pdfs-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-pdfs-ext.el"
  ;;; krisb-pdfs-ext.el --- pdf-view-mode extensions   -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for pdf-view-mode and other PDF-related workflows.

  ;;; Code:
  (require 'cl-macs)
  (require 'pdf-annot)
  (require 'avy)

  ;;; Custom entry formatter
  (declare-function org-noter-pdf--edges-to-region "org-noter")
  (defun krisb-pdf-annot--make-entry-formatter (a)
    "Return a formatter function for annotation A.

  A formatter function takes a format cons-cell and returns
  pretty-printed output."
    (lambda (fmt)
      (let ((entry-type (car fmt))
            (entry-width (cdr fmt))
            ;; Taken from css-mode.el
            (contrasty-color
             (lambda (name)
               (if (> (color-distance name "black") 292485)
                   "black" "white")))
            (prune-newlines
             (lambda (str)
               (replace-regexp-in-string "\n" " " str t t))))
        (cl-ecase entry-type
          (date (propertize (pdf-annot-print-property a 'modified)
                            'date
                            (pdf-annot-get a 'modified)))
          (page (pdf-annot-print-property a 'page))
          (label (funcall prune-newlines
                          (pdf-annot-print-property a 'label)))
          (contents
           (truncate-string-to-width
            (funcall prune-newlines
                     (pdf-annot-print-property a 'contents))
            entry-width))
          (type
           (let ((color (pdf-annot-get a 'color))
                 (type (pdf-annot-print-property a 'type)))
             (if (and pdf-annot-list-highlight-type color)
                 (propertize type 'face
                             `(:background ,color
                                           :foreground ,(funcall contrasty-color color)))
               type)))
          (color
           (let* ((color (pdf-annot-get a 'color)))
             (propertize color 'face
                         `(:background ,color
                                       :foreground ,(funcall contrasty-color color)))))
          (text
           (let* ((page (pdf-annot-get a 'page))
                  (edges (or (when (featurep 'org-noter)
                               (org-noter-pdf--edges-to-region (alist-get 'markup-edges a)))
                             (pdf-annot-get a 'edges)))
                  (raw-text
                   (pdf-info-gettext page
                                     edges
                                     pdf-view-selection-style
                                     pdf-annot-list-document-buffer))
                  (processed-text
                   (replace-regexp-in-string "\n" " "
                                             (replace-regexp-in-string "-\n" "" raw-text)))
                  (text-length (length processed-text)))
             (when (< entry-width text-length)
               (add-text-properties entry-width text-length '(display "…") processed-text))
             processed-text))))))
  (advice-add 'pdf-annot--make-entry-formatter :override 'krisb-pdf-annot--make-entry-formatter)

  ;;; Avy keys to highlight region in PDF
  ;; Use an avy-like interface to highlight region in pdf-view-mode. Heavily based
  ;; off of
  ;; https://github.com/dalanicolai/dala-emacs-lisp/blob/master/pdf-avy-highlight.el
  ;; with modifications
  (defcustom krisb-avy-pdf-links-convert-pointsize-scale 0.02
    "The scale factor for the -pointsize convert command.

  This determines the relative size of the font, when interactively
  reading links."
    :group 'pdf-links
    :type '(restricted-sexp :match-alternatives
                            ((lambda (x) (and (numberp x)
                                         (<= x 1)
                                         (>= x 0))))))

  (defun krisb-avy-pdf-links-read-char-action (query prompt)
    "Using PROMPT, interactively read a link-action.
  BORROWED FROM `pdf-links-read-link-action'.
  See `pdf-links-action-perform' for the interface."
    (pdf-util-assert-pdf-window)
    (let* ((links (pdf-info-search-string
                   query
                   (pdf-view-current-page)
                   (current-buffer)))
           (keys (pdf-links-read-link-action--create-keys
                  (length links)))
           (key-strings (mapcar (apply-partially 'apply 'string)
                                keys))
           (alist (cl-mapcar 'cons keys links))
           (size (pdf-view-image-size))
           (colors (pdf-util-face-colors 'pdf-links-read-link pdf-view-dark-minor-mode))
           (args (list
                  :foreground (car colors)
                  :background (cdr colors)
                  :formats
                  `((?c . ,(lambda (_edges) (pop key-strings)))
                    (?P . ,(number-to-string
                            (max 1 (* (cdr size)
                                      krisb-avy-pdf-links-convert-pointsize-scale)))))
                  :commands pdf-links-read-link-convert-commands
                  :apply (pdf-util-scale-relative-to-pixel
                          (mapcar (lambda (l) (car (cdr (assq 'edges l))))
                                  links)))))
      (unless links
        (error "No links on this page"))
      (unwind-protect
          (let ((image-data nil))
            (unless image-data
              (setq image-data (apply 'pdf-util-convert-page args ))
              (pdf-cache-put-image
               (pdf-view-current-page)
               (car size) image-data 'pdf-links-read-link-action))
            (pdf-view-display-image
             (create-image image-data (pdf-view-image-type) t))
            (pdf-links-read-link-action--read-chars prompt alist))
        (pdf-view-redisplay))))

  (defun krisb-avy-pdf-timed-input ()
    "BORROWED FORM `avy--read-candidates'"
    (let ((str "")
          char break)
      (while (and (not break)
                  (setq char
                        (read-char (format "char%s: "
                                           (if (string= str "")
                                               str
                                             (format " (%s)" str)))
                                   t
                                   (and (not (string= str ""))
                                        avy-timeout-seconds))))
        ;; Unhighlight
        (cond
         ;; Handle RET
         ((= char 13)
          (if avy-enter-times-out
              (setq break t)
            (setq str (concat str (list ?\n)))))
         ;; Handle C-h, DEL
         ((memq char avy-del-last-char-by)
          (let ((l (length str)))
            (when (>= l 1)
              (setq str (substring str 0 (1- l))))))
         ;; Handle ESC
         ((= char 27)
          (keyboard-quit))
         (t
          (setq str (concat str (list char))))))
      str))

  (defun krisb-avy-pdf-get-coordinates (end)
    "Prompt for PDF coordinates using avy-like interface."
    (let* ((query (krisb-avy-pdf-timed-input))
           (coords
            (list (or (krisb-avy-pdf-links-read-char-action query
                                                            (format "Please specify %s (SPC scrolls): "
                                                                    (if end "region end" "region beginning")))
                      (error "No char selected")))))
      (car (alist-get 'edges (car coords)))))

  ;;;###autoload
  (defun krisb-avy-pdf-highlight (&optional activate)
    "Use an avy-like interface to highlight region in PDF.

  If called with ACTIVATE, then also activate the created
  annotation immediately after creation."
    (interactive "P")
    (let* ((start (krisb-avy-pdf-get-coordinates nil))
           (end (krisb-avy-pdf-get-coordinates :end))
           (edges (append (cl-subseq start 0 2) (cl-subseq end 2 4)))
           (pdf-annot-activate-created-annotations activate))
      (pdf-annot-add-markup-annotation edges
                                       (let ((type (completing-read "Markup type (default highlight): "
                                                                    '("squiggly" "highlight" "underline" "strike-out")
                                                                    nil t)))
                                         (if (equal type "") 'highlight (intern type)))
                                       (pdf-annot-read-color "Annotation color: "))))

  ;;; Pdf-annot-list custom (tablist) color filter
  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-color-regexp ()
    "Get a prompt to filter for the color column's colors.
  The offered colors are those already present in the document's
  highlights."
    (interactive)
    (unless (derived-mode-p 'tabulated-list-mode)
      (error "Buffer is not in Tabulated List Mode"))
    (let ((unique-colors
           ;; Get unique colors directly from PDF
           (seq-filter
            #'identity
            (cl-remove-duplicates
             (mapcar
              (lambda (a) (pdf-annot-get a 'color))
              (pdf-annot-getannots nil nil pdf-annot-list-document-buffer))
             :test #'string=)))
          (nearby-color)
          (color-alist))
      ;; Scrape unique colors and closest neighboring defined color name
      (let ((lowest-dist most-positive-fixnum)
            (dist))
        (dolist (uc unique-colors)
          (dolist (c (defined-colors))
            (setq dist (color-distance c uc))
            (when (< dist lowest-dist)
              (setq nearby-color c
                    lowest-dist dist)))
          (push (list (propertize (format "%s (%s)" nearby-color uc)
                                  ;; Taken from pdf-annot.el
                                  'face `(:foreground ,(if (> (color-distance uc "black")
                                                              292485)
                                                           "black" "white")
                                                      :background ,uc))
                      uc)
                color-alist)
          (setq lowest-dist most-positive-fixnum)))

      (let* ((selections (completing-read-multiple "Select color: "
                                                   (mapcar 'car color-alist)
                                                   nil t))
             (color-filter (when selections
                             (concat "("
                                     (string-join
                                      (cl-loop for s in selections
                                               collect (concat "Color =~ " (cadr (assoc-string s color-alist))))
                                      " || ")
                                     ")"))))
        (tablist-push-filter (tablist-filter-parse color-filter)
                             (called-interactively-p 'any)))))

  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-regexp ()
    "Drop-in replacement for `tablist-push-regexp-filter'.
  Calls `krisb-pdf-annot-list-filter-color-regexp' when point is in
  the color column."
    (interactive)
    (if (string= "Color" (tablist-read-column-name nil))
        (krisb-pdf-annot-list-filter-color-regexp)
      (call-interactively 'tablist-push-regexp-filter)))

  ;;; Custom org-link type for PDF annotations
  ;; Code copied from the code shared on Thu, 08 Feb 2024 22:13:50 +0000 by Juan
  ;; Manuel Macías <maciaschain@posteo.net> in the Emacs-devel mailing list. The
  ;; original uses the modification date, whereas this verion uses the annotation
  ;; ID, which should be unique even upon deletions and additions of annotations.
  ;; This is because the annotation IDs are robust (don't change upon modifying
  ;; content of annotation). Additionally, the original version relies on an
  ;; in-buffer `re-search-forward', meaning it only worked if you had the current
  ;; modified date as a column in `pdf-annot-list-format'; this is avoided if we
  ;; use ID's like `pdf-annot-list-display-annotation-from-id' likes.
  (defun krisb-pdf-annot-org-store-link ()
    "Stores link to annotation via its annotate.
  Uses the current annotation at point's ID."
    (when (eq major-mode 'pdf-annot-list-mode)
      (let* ((annot-buf pdf-annot-list-document-buffer)
             (pdf-file (buffer-file-name annot-buf))
             (annot (pdf-annot-getannot (tabulated-list-get-id) annot-buf))
             (id (pdf-annot-print-property annot 'id))
             (page (pdf-annot-print-property annot 'page))
             (link (concat "pdf-annot:" pdf-file "::" id))
             (desc (format "%s (annot. on p. %s)" (file-name-nondirectory pdf-file) page)))
        (org-link-store-props
         :type "pdf-annot"
         :link link
         :description desc))))

  (defun krisb-pdf-annot-org-follow-link (path)
    "Open pdf-tools link."
    (let ((id (if (string-match "::\\(.+\\)" path)
                  (match-string 1 path)
                (error "[krisb-pdf-annot-org-follow-link] Not a valid id!")))
          (file-path (replace-regexp-in-string "::.+" "" path)))
      (find-file file-path)
      (pdf-annot-list-annotations)
      (with-current-buffer (format "*%s's annots*" (file-name-sans-extension (buffer-name)))
        (goto-char (point-min))
        (forward-line (save-excursion
                        (goto-char (point-min))
                        ;; Find line whose tabulated-list-id corresponds to
                        ;; annotation ID
                        (let ((row-id (get-text-property (point) 'tabulated-list-id)))
                          (while (not (or (eq row-id (intern id))
                                          (= (line-number-at-pos (point)) (line-number-at-pos (point-max)))))
                            (forward-line)
                            (setq row-id (get-text-property (point) 'tabulated-list-id))))
                        (1- (line-number-at-pos))))
        (pdf-annot-list-display-annotation-from-id id))))

  (with-eval-after-load 'ol
    (org-link-set-parameters
     "pdf-annot"
     :follow #'krisb-pdf-annot-org-follow-link
     :store #'krisb-pdf-annot-org-store-link))

  ;;; Modify PDF metadata
  ;; Emacs wrapper and convenience functions for changing package metadata using
  ;; `pdftk'. See https://unix.stackexchange.com/a/72457 for more information on
  ;; the CLI commands involved.
  ;;;###autoload
  (defun krisb-pdf-tools--metadata-bookmark-section ()
    "Insert bookmark metadata section."
    (interactive)
    (save-excursion
      (insert "BookmarkBegin\nBookmarkTitle: \nBookmarkLevel: 1\nBookmarkPageNumber: tk\n"))
    (move-end-of-line 2))

  (defvar-keymap krisb-pdf-tools-metadata-mode-map
    :doc "Mode map for `krisb-pdf-tools-metadata-mode'."
    (kbd "C-c C-b") #'krisb-pdf-tools--metadata-bookmark-section)

  (define-derived-mode krisb-pdf-tools-metadata-mode fundamental-mode "Metadata"
    "Major mode for altering and viewing PDF metadata."
    :interactive t
    (use-local-map krisb-pdf-tools-metadata-mode-map))

  ;;;###autoload
  (defun krisb-pdf-tools--metadata-modify (pdf-file)
    "Modify PDF-FILE metadata."
    (interactive (list (buffer-file-name)))
    (unless (string= "pdf" (file-name-extension pdf-file))
      (user-error "File is not a PDF!"))
    (unless (executable-find "pdftk")
      (error "System executable `pdftk' not found. Please install executable on filesystem to proceed"))
    (let* ((pdf-name (file-name-sans-extension (file-name-nondirectory pdf-file)))
           (buf-name (concat "*pdf-tools metadata: " pdf-name))
           (metadata-file (concat "/tmp/pdf-tools-metadata--" pdf-name))
           (temp-pdf (make-temp-file "/tmp/pdf-tools-metadata--temp-pdf"))
           (metadata-dump-command (concat "pdftk \"" pdf-file "\" dump_data"))
           (metadata-update-command
            (concat "pdftk \"" pdf-file "\" update_info \"" metadata-file "\" output \"" temp-pdf "\""))
           (commit-func (lambda ()
                          "Commit the changes to PDF metadata."
                          (interactive)
                          (with-current-buffer buf-name
                            (widen)
                            (write-region (point-min) (point-max) metadata-file))
                          (shell-command metadata-update-command "*pdf-tools metadata: CLI output")
                          (kill-buffer buf-name)
                          ;; Have to do it this way since `pdftk' does not allow
                          ;; having the output file be the input file
                          (rename-file temp-pdf pdf-file t)
                          (message "Updated metadata!"))))
      (save-buffer)
      (with-current-buffer (get-buffer-create buf-name)
        (insert (shell-command-to-string metadata-dump-command))
        (goto-char (point-min))
        (krisb-pdf-tools-metadata-mode))
      (pop-to-buffer buf-name)
      (define-key krisb-pdf-tools-metadata-mode-map (kbd "C-c C-c") commit-func)
      (set-buffer-modified-p nil)
      (message "Press `C-c C-c' when finished editing PDF metadata")))

  ;;; Provide
  (provide 'krisb-pdfs-ext)
  ;;; krisb-pdfs-ext.el ends here
#+end_src

* COMMENT Removed
:PROPERTIES:
:VISIBILITY: folded
:END:

These are lines I've removed while porting to a literate config.
#+begin_src emacs-lisp :tangle no :results none
  ;; Kill child processes without confirm
  (custom-set-variables '(confirm-kill-processes nil))

  ;; Don't confirm when killing a process
  (setq confirm-kill-processes nil)

  ;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
  ;; Emacs to its own devices there.
  (unless krisb-system-win-p
    (setq selection-coding-system 'utf-8))
#+end_src

* Local variables :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

# Local Variables:
# org-src-fontify-natively: nil
# End:

#  LocalWords:  Vertico Minibuffer Todos

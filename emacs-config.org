#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t

* Emacs build
:PROPERTIES:
:VISIBILITY: folded
:END:

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization
:PROPERTIES:
:VISIBILITY: children
:END:

** =early-init.el=

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

*** Garbage collection

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations

**** Doom Emacs' suggestions

All of the settings below are taken from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; These are the three ways to increase scrolling performance.
  ;; See (info "(emacs) Scrolling") for details. Introduced in Emacs HEAD
  ;; (b2f8c9f), this inhibits fontification while receiving input, which should
  ;; help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)
  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)
#+end_src

**** Other optimizations

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Buffer encoding

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=

*** Add modules and bespoke libraries to ~load-path~

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Initial scratch buffer

#+begin_src emacs-lisp :tangle "init.el"
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode'
  (setopt initial-major-mode 'fundamental-mode
          initial-scratch-message "Hello ðŸ‘‹")
#+end_src

*** =package=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Package.el
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil)
#+end_src

*** =use-package=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setopt use-package-always-ensure t
          use-package-expand-minimally t  ; Verbosity of use-package macro
          use-package-always-defer nil)

  ;; Only be verbose when interpreted, otherwise errors are caught at compile time
  (setopt use-package-verbose (not (bound-and-true-p byte-compile-current-file)))

  ;; Compile statistics to be shown in `use-package-report'
  (setopt use-package-compute-statistics t)
#+end_src

*** =no-littering=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set better default package paths
  (use-package no-littering
    :init
    ;; Set these variables prior to loading the feature
    (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory) ; Config files
          no-littering-var-directory (expand-file-name "var/" user-emacs-directory)) ; Persistent files
    :config
    (no-littering-theme-backups)) ; Sets various built-in variables
#+end_src

*** =on=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; On
  ;; Package exposes a number of utility hooks and functions ported from Doom
  ;; Emacs. The hooks make it easier to speed up Emacs startup by providing
  ;; finer-grained control of the timing at which packages are loaded. Provides
  ;; the following hooks:
  ;; - on-first-input-hook
  ;; - on-init-ui-hook
  ;; - on-first-file-hook
  ;; - on-switch-frame-hook
  ;; - on-first-buffer-hook
  ;; - on-switch-buffer-hook
  ;; - on-switch-window-hook
  (use-package on)
#+end_src

*** Load libraries

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Libraries
  (require 'krisb-common)
#+end_src

*** Load modules

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Modules
  (require 'krisb-garbage-collection)
  (require 'krisb-themes)
  (require 'krisb-fonts)
  (require 'krisb-completion)
#+end_src

* Modules
:PROPERTIES:
:VISIBILITY: children
:END:

** =krisb-garbage-collection.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-garbage-collection.el"
  ;; NOTE 2024-02-11: Please reference https://emacsconf.org/2023/talks/gc/ for a
  ;; statistically-informed recommendation for GC variables
  (setq garbage-collection-messages t)
  (setq gc-cons-percentage 0.15)

  ;;; GCMH
  ;; Garbage collect on when idle
  (use-package gcmh
    :diminish
    :hook ((after-init . gcmh-mode)
           (minibuffer-setup . krisb-gcmh-minibuffer-setup)
           (minibuffer-exit . krisb-gcmh-minibuffer-exit))
    :custom
    ;; For a related discussion, see
    ;; https://www.reddit.com/r/emacs/comments/bg85qm/comment/eln27qh/?utm_source=share&utm_medium=web2x&context=3
    (gcmh-high-cons-threshold (* 16       ; 16 mb, as Doom uses in doom-start.el
                                 1024 1024))
    (gcmh-idle-delay 3)
    (gcmh-verbose nil)
    :config
    (setq garbage-collection-messages nil)

    ;; Increase GC threshold when in minibuffer
    (defvar krisb-gc-minibuffer--original gcmh-high-cons-threshold
      "Temporary variable to hold `gcmh-high-cons-threshold'")

    (defun krisb-gcmh-minibuffer-setup ()
      "Temporarily have \"limitless\" `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-setup] Increasing GC threshold")
      (setq gcmh-high-cons-threshold most-positive-fixnum))

    (defun krisb-gcmh-minibuffer-exit ()
      "Restore value of `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-exit] Restoring GC threshold")
      (setq gcmh-high-cons-threshold krisb-gc-minibuffer--original))

    ;; Increase `gc-cons-threshold' while using corfu, like we do for the
    ;; minibuffer
    (with-eval-after-load 'corfu
      (advice-add 'completion-at-point :before 'krisb-gcmh-minibuffer-setup)
      (advice-add 'corfu-quit :before 'krisb-gcmh-minibuffer-exit)
      (advice-add 'corfu-insert :before 'krisb-gcmh-minibuffer-exit)))

  ;;; Diagnose memory usage
  ;; See how Emacs is using memory. From
  ;; https://www.reddit.com/r/emacs/comments/ck4zb3/comment/evji1n7/?utm_source=share&utm_medium=web2x&context=3
  (defun krisb-diagnose-garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))

  ;;; Emacs-gc-stats
  ;; Collect GC statistics. Requested by someone who'd like GC statistics:
  ;; https://www.reddit.com/r/emacs/comments/14dej62/please_help_collecting_statistics_to_optimize/.
  ;; Also see https://elpa.gnu.org/packages/emacs-gc-stats.html
  (use-package emacs-gc-stats
    :disabled t                           ; Dont collecting data
    :hook (on-first-input . emacs-gc-stats-mode)
    :custom
    ;; Optionally reset Emacs GC settings to default values (recommended)
    (emacs-gc-stats-gc-defaults 'emacs-defaults)
    (emacs-gc-stats-remind (* 7))  ; Optionally set reminder to upload the stats
    (emacs-gc-stats-inhibit-command-name-logging nil))

  ;;; Provide
  (provide 'krisb-garbage-collection)
#+end_src

** =krisb-themes.el=

#+begin_src emacs-lisp :tangle "modules/krisb-themes.el"
  ;;; Modus-themes
  (use-package modus-themes
    :custom
    (modus-themes-custom-auto-reload t) ; Only applies to `customize-set-variable' and related
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs nil)
    (modus-themes-mixed-fonts t)
    (modus-themes-prompts '(semibold))
    (modus-themes-completions '(((matches . (heavy))
                                 (selection . (semibold)))))
    (modus-themes-variable-pitch-ui nil)
    (modus-themes-headings '((t . (semibold))))
    :config
    ;; Overrides
    (setopt modus-themes-common-palette-overrides
            `(;; Completion
              (fg-completion-match-0 fg-main) ; See (info "(modus-themes) Make headings more or less colorful")
              (fg-completion-match-1 fg-main)
              (fg-completion-match-2 fg-main)
              (fg-completion-match-3 fg-main)
              (bg-completion-match-0 bg-blue-intense)
              (bg-completion-match-1 bg-yellow-intense)
              (bg-completion-match-2 bg-cyan-intense)
              (bg-completion-match-3 bg-red-intense)

              ;; "Invisible" border in mode line. See (info "(modus-themes) Make the
              ;; mode line borderless")
              (border-mode-line-active bg-mode-line-active)
              (border-mode-line-inactive bg-mode-line-inactive)

              ;; Headings
              (fg-heading-1 red-faint)
              (fg-heading-6 rainbow-0)

              ;; Make the fringe invisible
              (fringe unspecified)

              ;; More noticeable block (e.g. org) backgrounds
              (bg-prose-block-contents bg-active-value))
            modus-operandi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#cab9b2")
              (fg-mode-line-active        "#000000")
              (bg-mode-line-inactive      "#dfd9cf")
              (fg-mode-line-inactive      "#585858")


              )
            modus-vivendi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#484d67")
              (fg-mode-line-active        "#ffffff")
              (bg-mode-line-inactive      "#292d48")
              (fg-mode-line-inactive      "#969696")))

    (defun kb/modus-themes--setup-font-lock (theme)
      "Set up font-lock faces."
      ;; As described in (info "(modus-themes) DIY Measure color contrast"), I can
      ;; check for contrast by making sure the color contrast (relative luminance)
      ;; between the foreground and background color is at least 7:1.
      ;;
      ;; Like:
      ;;    (modus-themes-contrast (modus-themes-with-colors bg-main) (face-foreground 'font-lock-function-call-face))
      (cond
       ((string-match "^modus-operandi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#161BA1"))
       ((string-match "^modus-vivendi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#66B1F2"))))
    (add-hook 'enable-theme-functions #'kb/modus-themes--setup-font-lock))

  ;;; Cursory
  ;; Global and local cursor presets
  (use-package cursory
    :hook ((prog-mode . (lambda () (cursory-set-preset 'code :local)))
           ((org-mode markdown-mode) . (lambda () (cursory-set-preset 'prose :local))))
    :custom
    (cursory-latest-state-file (no-littering-expand-var-file-name "cursory/cursory-latest-state"))
    (cursory-presets
     '((code
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1)
       (prose
        :cursor-type (bar . 2)
        :blink-cursor-mode -1
        :cursor-in-non-selected-windows (hbar . 3))
       (default)
       (t                                 ; The fallback values
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1
        :blink-cursor-blinks 10
        :blink-cursor-delay 5
        :blink-cursor-interval 0.5)))
    :config
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (when (file-exists-p cursory-latest-state-file)
      (cursory-set-preset (or (cursory-restore-latest-preset) 'default)))

    ;; Persist latest preset used across Emacs sessions
    (cursory-mode 1))


  ;;; Lin
  ;; Lin is a stylistic enhancement for Emacs' built-in `hl-line-mode'. It remaps
  ;; the `hl-line' face (or equivalent) buffer-locally to a style that is optimal
  ;; for major modes where line selection is the primary mode of interaction.
  (use-package lin
    :custom
    (lin-face 'lin-cyan)
    :config
    (lin-global-mode 1)

    (add-to-list 'lin-mode-hooks 'LaTeX-mode-hook))

  ;;; Pulsar
  ;; Alternative to `pulse.el'
  (use-package pulsar
    :hook ((consult-after-jump . pulsar-recenter-top)
           (consult-after-jump . pulsar-reveal-entry)
           (imenu-after-jump . pulsar-recenter-top)
           (imenu-after-jump . pulsar-reveal-entry))
    :custom
    (pulsar-pulse t)
    (pulsar-face 'pulsar-red)
    (pulsar-delay 0.05)
    (pulsar-iterations 5)
    :config
    (pulsar-global-mode 1))

  ;;; Provide
  (provide 'krisb-themes)
#+end_src

** =krisb-fonts.el=

#+begin_src emacs-lisp :tangle "modules/krisb-fonts.el"
  ;;; Fontaine
  ;; Define then apply face presets
  (use-package fontaine
    :demand
    :custom
    (fontaine-latest-state-file (no-littering-expand-var-file-name "fontaine/fontaine-latest-state.eld"))
    (fontaine-presets
     '((iosevka-variant
        :default-family "Iosevka SS11"
        :fixed-pitch-family "Iosevka")
       (default)                          ; Use fallback values
       ;; Below are the shared fallback properties. I leave them there also as
       ;; reference for all possible properties
       (t
        ;; Alternatives:
        :default-family "Iosevka Term SS04"
        :default-weight regular
        :default-slant normal
        :default-width normal
        :default-height 165

        ;; Alternatives
        ;; "Hack Nerd Font Mono"
        :fixed-pitch-family "Iosevka"
        :fixed-pitch-weight nil
        :fixed-pitch-slant nil
        :fixed-pitch-width nil
        :fixed-pitch-height 1.0

        :fixed-pitch-serif-family nil
        :fixed-pitch-serif-weight nil
        :fixed-pitch-serif-slant nil
        :fixed-pitch-serif-width nil
        :fixed-pitch-serif-height 1.0

        ;; Alternatives:
        ;; "LiterationSerif Nerd Font"       ; Variable
        ;; "Latin Modern Mono Prop"          ; Monospace
        ;; "Sans Serif"
        ;; "Open Sans" (1.1 height)
        :variable-pitch-family "Overpass Nerd Font Propo"
        :variable-pitch-weight nil
        :variable-pitch-slant nil
        :variable-pitch-width nil
        :variable-pitch-height 1.2

        ;; Alternatives:
        ;; "JetBrainsMono Nerd Font"
        :mode-line-active-family "Iosevka Aile"
        :mode-line-active-weight nil
        :mode-line-active-slant nil
        :mode-line-active-width nil
        :mode-line-active-height 0.93

        :mode-line-inactive-family "Iosevka Aile"
        :mode-line-inactive-weight nil
        :mode-line-inactive-slant nil
        :mode-line-inactive-width nil
        :mode-line-inactive-height 0.93

        :header-line-family nil
        :header-line-weight nil
        :header-line-slant nil
        :header-line-width nil
        :header-line-height 1.0

        :line-number-family nil
        :line-number-weight nil
        :line-number-slant nil
        :line-number-width nil
        :line-number-height 1.0

        :tab-bar-family "Overpass Nerd Font"
        :tab-bar-weight nil
        :tab-bar-slant nil
        :tab-bar-width nil
        :tab-bar-height 0.93

        :tab-line-family nil
        :tab-line-weight nil
        :tab-line-slant nil
        :tab-line-width nil
        :tab-line-height 1.0


        :bold-slant nil
        :bold-weight bold
        :bold-width nil
        :bold-height 1.0

        :italic-family nil
        :italic-weight nil
        :italic-slant italic
        :italic-width nil
        :italic-height 1.0

        :line-spacing nil)))
    :config
    ;; Set the last preset or fall back to desired style from `fontaine-presets'
    (when (file-exists-p fontaine-latest-state-file)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default)))

    ;; Persist the latest font preset when closing/starting Emacs and while
    ;; switching between themes.
    (fontaine-mode 1)

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))

  ;;; Provide
  (provide 'krisb-fonts)
#+end_src

** =krisb-completion.el=

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Marginalia
  ;; Enable richer annotations in minibuffer (companion package of consult.el)
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    (marginalia-field-width 80)
    (marginalia-align-offset -2))         ; Two to the left

  ;;; Provide
  (provide 'krisb-completion)
#+end_src

* Lisp (libraries)
:PROPERTIES:
:VISIBILITY: children
:END:

** =krisb-common.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-common.el"
  ;;; krisb-common.el --- Common variables and functions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Variables and functions I use throughout my Emacs config.

  ;;; Code:

  ;;; Variables

  ;;;; Org

  (defvar krisb-org-directory (expand-file-name "org-database" "~/Documents")
    "The directory holding my org files.
  Meant to be used as the value of `org-directory'.")

  (defvar krisb-notes-directory (expand-file-name "notes" krisb-org-directory)
    "My notes directory.")

  (defvar krisb-blog-directory (expand-file-name "blog" krisb-notes-directory)
    "The directory for my pre-export blog files.")

  (defvar krisb-org-agenda-directory (expand-file-name "agenda" krisb-org-directory)
    "The directory holding my main org-agenda files.")

  (defvar krisb-org-agenda-main-file (expand-file-name "todo.org" krisb-org-agenda-directory)
    "My main org-agenda file.")

  (defvar krisb-org-agenda-directory-files (cl-remove-if
                                            (lambda (f)
                                              (string-match-p (rx "archive.org") f))
                                            (directory-files-recursively krisb-org-agenda-directory ".org$"))
    "A list of all org and org_archive files in `krisb-org-directory'.")

  (defvar krisb-bibliography-files (list (expand-file-name "master-lib.bib" krisb-org-directory))
    "A list of my bibliography (.bib) files.")

  ;;; Leader keymaps

  ;;; Leader keys
  (defvar-keymap krisb-note-keymap
    :doc "Prefix for my note-taking needs.")
  (bind-key "C-c n" krisb-note-keymap 'global-map)

  (defvar-keymap krisb-lsp-keymap
    :doc "Prefix for lsp-related commands.")
  (with-eval-after-load 'lsp-mode
    (bind-key "C-c l" krisb-lsp-keymap 'lsp-mode-map))

  (defvar-keymap krisb-file-keymap
    :doc "Prefix for file-related commands.")
  (bind-key "C-c f" krisb-file-keymap 'global-map)

  (defvar-keymap krisb-yank-keymap
    :doc "Prefix for yanking stuff.")
  (bind-key "C-c i" krisb-yank-keymap 'global-map)

  (defvar-keymap krisb-open-keymap
    :doc "Prefix for opening various hings.")
  (bind-key "C-c o" krisb-open-keymap 'global-map)

  (defvar-keymap krisb-toggle-keymap
    :doc "Prefix for toggling stuff.")
  (bind-key "C-M-s-t" krisb-toggle-keymap 'global-map)


  ;;; Provide
  (provide 'krisb-common)
  ;;; krisb-common.el ends here
#+end_src

* COMMENT Removed
:PROPERTIES:
:VISIBILITY: folded
:END:

These are lines I've removed while porting to a literate config.
#+begin_src emacs-lisp :tangle no :results none
  ;; Kill child processes without confirm
  (custom-set-variables '(confirm-kill-processes nil))

  ;; Don't confirm when killing a process
  (setq confirm-kill-processes nil)

  ;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
  ;; Emacs to its own devices there.
  (unless kb/sys-win
    (setq selection-coding-system 'utf-8))
#+end_src

* Local variables :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

# Local Variables:
# org-src-fontify-natively: nil
# End:

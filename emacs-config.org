#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t

* Table of contents
:PROPERTIES:
:TOC:      :include all :force (nothing) :ignore (this) :local (nothing)
:VISIBILITY: folded
:END:

:CONTENTS:
- [[#emacs-build][Emacs build]]
- [[#initialization][Initialization]]
  - [[#early-initel][early-init.el]]
    - [[#garbage-collection][Garbage collection]]
    - [[#native-compilation][Native compilation]]
    - [[#runtime-optimizations][Runtime optimizations]]
      - [[#doom-emacs-suggestions][Doom Emacs' suggestions]]
      - [[#other-optimizations][Other optimizations]]
    - [[#buffer-encoding][Buffer encoding]]
    - [[#graphical-elements][Graphical elements]]
  - [[#initel][init.el]]
    - [[#add-modules-and-bespoke-libraries-to-load-path][Add modules and bespoke libraries to load-path]]
    - [[#load-libraries][Load libraries]]
    - [[#load-modules][Load modules]]
- [[#modules][Modules]]
  - [[#base][Base]]
    - [[#krisb-garbage-collectionel][krisb-garbage-collection.el]]
    - [[#krisb-system-envel][krisb-system-env.el]]
    - [[#krisb-coreel][krisb-core.el]]
      - [[#package-management-and-configuration][Package management and configuration]]
      - [[#other][Other]]
      - [[#el-patch][el-patch]]
      - [[#asyncel][async.el]]
      - [[#provide][Provide]]
    - [[#krisb-essentialsel][krisb-essentials.el]]
      - [[#preamble][Preamble]]
      - [[#initial-scratch-buffer][Initial scratch buffer]]
      - [[#customize-and-customize-buffers][Customize and customize buffers]]
      - [[#scrolling-behavior][Scrolling behavior]]
      - [[#recognizing-m-spc-under-wslg][Recognizing M-SPC under WSLg]]
      - [[#commands][Commands]]
      - [[#minor-modes][Minor modes]]
      - [[#miscellaneous][Miscellaneous]]
      - [[#provide-0][Provide]]
    - [[#krisb-iconsel][krisb-icons.el]]
    - [[#krisb-completionel][krisb-completion.el]]
      - [[#built-in][Built-in]]
      - [[#completion][Completion]]
        - [[#minibuffer][Minibuffer]]
        - [[#inline][Inline]]
      - [[#accessory-packages][Accessory packages]]
      - [[#provide-1][Provide]]
    - [[#krisb-saving-stateel][krisb-saving-state.el]]
    - [[#krisb-persistenceel][krisb-persistence.el]]
      - [[#persistent-sessions][Persistent sessions]]
      - [[#provide-2][Provide]]
    - [[#krisb-windowsel][krisb-windows.el]]
      - [[#setting-display-buffer-alist][Setting display-buffer-alist]]
      - [[#provide-3][Provide]]
    - [[#krisb-buffersel][krisb-buffers.el]]
    - [[#krisb-expansionel][krisb-expansion.el]]
    - [[#krisb-formattingel][krisb-formatting.el]]
  - [[#appearance][Appearance]]
    - [[#krisb-themesel][krisb-themes.el]]
    - [[#krisb-fontsel][krisb-fonts.el]]
    - [[#krisb-mode-lineel][krisb-mode-line.el]]
  - [[#navigation][Navigation]]
    - [[#krisb-alternative-editing-schemesel][krisb-alternative-editing-schemes.el]]
    - [[#krisb-navigationel][krisb-navigation.el]]
  - [[#writing-and-reading][Writing and reading]]
    - [[#krisb-proseel][krisb-prose.el]]
      - [[#environment][Environment]]
      - [[#spell-checking][Spell checking]]
      - [[#grammar][Grammar]]
      - [[#other-0][Other]]
      - [[#provide-4][Provide]]
    - [[#krisb-orgel][krisb-org.el]]
      - [[#base-0][Base]]
      - [[#extras][Extras]]
      - [[#provide-5][Provide]]
    - [[#krisb-org-exportel][krisb-org-export.el]]
    - [[#krisb-markdownel][krisb-markdown.el]]
    - [[#krisb-flymakeel][krisb-flymake.el]]
    - [[#krisb-spellingel][krisb-spelling.el]]
    - [[#note-taking][Note-taking]]
      - [[#krisb-denoteel][krisb-denote.el]]
      - [[#krisb-org-roamel][krisb-org-roam.el]]
      - [[#krisb-org-nodeel][krisb-org-node.el]]
      - [[#krisb-web-annotationsel][krisb-web-annotations.el]]
      - [[#krisb-citationsel][krisb-citations.el]]
      - [[#krisb-pdfsel][krisb-pdfs.el]]
      - [[#krisb-epubel][krisb-epub.el]]
      - [[#krisb-videosel][krisb-videos.el]]
    - [[#todos][Todos]]
      - [[#krisb-org-agendael][krisb-org-agenda.el]]
        - [[#org-agenda-and-org-super-agenda][Org-agenda and org-super-agenda]]
      - [[#friends-of-org-agenda][Friends of org-agenda]]
      - [[#provide-6][Provide]]
    - [[#blogging][Blogging]]
      - [[#krisb-hugoel][krisb-hugo.el]]
      - [[#krisb-mermaidel][krisb-mermaid.el]]
  - [[#email][Email]]
    - [[#composition][Composition]]
    - [[#notmuch][Notmuch]]
      - [[#notmuch-0][Notmuch]]
      - [[#accessories][Accessories]]
      - [[#provide-7][Provide]]
  - [[#programming][Programming]]
    - [[#krisb-programming-essentialsel][krisb-programming-essentials.el]]
    - [[#krisb-treesitel][krisb-treesit.el]]
    - [[#krisb-vcel][krisb-vc.el]]
    - [[#krisb-shellel][krisb-shell.el]]
      - [[#general][General]]
      - [[#eshell][Eshell]]
      - [[#fish][Fish]]
      - [[#eat][EAT]]
      - [[#provide-8][Provide]]
    - [[#krisb-projectsel][krisb-projects.el]]
    - [[#krisb-infoel][krisb-info.el]]
    - [[#krisb-elispel][krisb-elisp.el]]
      - [[#package-authorship][Package authorship]]
    - [[#krisb-foldingel][krisb-folding.el]]
    - [[#krisb-other-languagesel][krisb-other-languages.el]]
    - [[#krisb-lspel][krisb-lsp.el]]
    - [[#krisb-debuggingel][krisb-debugging.el]]
  - [[#other-1][Other]]
    - [[#krisb-webel][krisb-web.el]]
    - [[#krisb-directoriesel][krisb-directories.el]]
- [[#lisp-libraries][Lisp (libraries)]]
  - [[#krisb-commonel][krisb-common.el]]
  - [[#krisb-themes-extel][krisb-themes-ext.el]]
  - [[#krisb-indentationel][krisb-indentation.el]]
  - [[#krisb-verticoel][krisb-vertico.el]]
  - [[#krisb-consult-extel][krisb-consult-ext.el]]
  - [[#krisb-org-extel][krisb-org-ext.el]]
  - [[#krisb-denote-extel][krisb-denote-ext.el]]
  - [[#krisb-org-roam-extel][krisb-org-roam-ext.el]]
  - [[#krisb-org-remark-extel][krisb-org-remark-ext.el]]
  - [[#krisb-pdfs-extel][krisb-pdfs-ext.el]]
  - [[#krisb-wombag-extel][krisb-wombag-ext.el]]
  - [[#krisb-mpvel][krisb-mpv.el]]
  - [[#krisb-email-composition-extel][krisb-email-composition-ext.el]]
  - [[#krisb-notmuch-extel][krisb-notmuch-ext.el]]
  - [[#krisb-ox-hugo-extel][krisb-ox-hugo-ext.el]]
  - [[#krisb-oblique-strategiesel][krisb-oblique-strategies.el]]
  - [[#krisb-auto-completionel][krisb-auto-completion.el]]
  - [[#packages][Packages]]
    - [[#pinching-marginsel][pinching-margins.el]]
    - [[#krisb-revealel][krisb-reveal.el]]
    - [[#dungeons-and-dragonsel][dungeons-and-dragons.el]]
:END:

* Emacs build
:PROPERTIES:
:VISIBILITY: folded
:CUSTOM_ID: emacs-build
:END:

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization
:PROPERTIES:
:VISIBILITY: children
:CUSTOM_ID: initialization
:END:

** =early-init.el=
:PROPERTIES:
:CUSTOM_ID: early-initel
:END:

Emacs 27 introduces =early-init.el=, which runs before init.el, before package and UI initialization happens.

*** Garbage collection
:PROPERTIES:
:CUSTOM_ID: garbage-collection
:END:

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation
:PROPERTIES:
:CUSTOM_ID: native-compilation
:END:

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations
:PROPERTIES:
:CUSTOM_ID: runtime-optimizations
:END:

**** Doom Emacs' suggestions
:PROPERTIES:
:CUSTOM_ID: doom-emacs-suggestions
:END:

All the settings below come from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)
#+end_src

**** Other optimizations
:PROPERTIES:
:CUSTOM_ID: other-optimizations
:END:

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Buffer encoding
:PROPERTIES:
:CUSTOM_ID: buffer-encoding
:END:

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements
:PROPERTIES:
:CUSTOM_ID: graphical-elements
:END:

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=
:PROPERTIES:
:CUSTOM_ID: initel
:END:

*** Add modules and bespoke libraries to ~load-path~
:PROPERTIES:
:CUSTOM_ID: add-modules-and-bespoke-libraries-to-load-path
:END:

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Add modules and lisp to load path
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Load libraries
:PROPERTIES:
:CUSTOM_ID: load-libraries
:END:

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load libraries
  (require 'krisb-common)
  (require 'krisb-oblique-strategies)
#+end_src

*** Load modules
:PROPERTIES:
:CUSTOM_ID: load-modules
:END:

#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Modules
  (require 'krisb-core)
  (require 'krisb-garbage-collection)
  (require 'krisb-system-env)
  (require 'krisb-essentials)

  (require 'krisb-icons)
  (require 'krisb-themes)
  (require 'krisb-fonts)
  (require 'krisb-mode-line)

  (require 'krisb-saving-state)
  (require 'krisb-persistence)
  (require 'krisb-completion)
  (require 'krisb-expansion)
  (require 'krisb-formatting)
  (require 'krisb-windows)
  (require 'krisb-buffers)
  (require 'krisb-navigation)

  (require 'krisb-alternative-editing-schemes)

  (require 'krisb-prose)
  (require 'krisb-org)
  (require 'krisb-org-agenda)
  (require 'krisb-org-export)
  ;; 2024-11-06: Migrating to org-roam.  We remove the require altogether since
  ;; some of my Denote packages are lazy-loaded after Denote is, and they
  ;; overshadow some of the functionality from my org-roam related packages.  I
  ;; don't use Denote, but I still keep the package around (for now) since I
  ;; depend on some Denote forms throughout my configuration currently.
  ;; (require 'krisb-denote)
  (require 'krisb-org-roam)
  (require 'krisb-org-node)
  (require 'krisb-markdown)
  (require 'krisb-citations)
  (require 'krisb-spelling)

  (require 'krisb-pdfs)
  (require 'krisb-web-annotations)
  (require 'krisb-epub)

  (require 'krisb-programming-essentials)
  (require 'krisb-directories)
  (require 'krisb-treesit)
  (require 'krisb-vc)
  (require 'krisb-projects)
  (require 'krisb-shell)
  (require 'krisb-flymake)
  (require 'krisb-folding)
  (require 'krisb-other-languages)
  (require 'krisb-lsp)
  (require 'krisb-debugging)

  (require 'krisb-elisp)
  (require 'krisb-info)

  (require 'krisb-hugo)
  (require 'krisb-mermaid)

  (require 'krisb-email-composition)
  (require 'krisb-notmuch)

  (require 'krisb-web)
#+end_src

* Modules
:PROPERTIES:
:VISIBILITY: children
:CUSTOM_ID: modules
:END:

** Base
:PROPERTIES:
:CUSTOM_ID: base
:END:

*** =krisb-garbage-collection.el=
:PROPERTIES:
:CUSTOM_ID: krisb-garbage-collectionel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-garbage-collection.el"
  ;; NOTE 2024-02-11: Please reference https://emacsconf.org/2023/talks/gc/ for a
  ;; statistically-informed recommendation for GC variables
  (setq garbage-collection-messages t)
  (setq gc-cons-percentage 0.15)

  ;;; GCMH
  ;; Garbage collect on when idle
  (use-package gcmh
    :diminish
    :hook ((on-first-buffer . gcmh-mode)
           (minibuffer-setup . krisb-gcmh-minibuffer-setup)
           (minibuffer-exit . krisb-gcmh-minibuffer-exit))
    :custom
    ;; For a related discussion, see
    ;; https://www.reddit.com/r/emacs/comments/bg85qm/comment/eln27qh/?utm_source=share&utm_medium=web2x&context=3.
    ;; 2025-04-06: The value below is taken from Doom Emacs; it was bumped up from
    ;; 16mb on commit 80566503646dd80c7604220f184076e190144675, on Dec 6, 2024.
    (gcmh-high-cons-threshold (* 64 1024 1024)) ; 64 mb
    ;; If the idle delay is too long, we run the risk of runaway memory usage in
    ;; busy sessions.  And if it's too low, then we may as well not be using gcmh
    ;; at all.
    (gcmh-idle-delay 'auto)               ; Taken from Doom Emacs
    (gcmh-auto-idle-delay-factor 10)      ; Taken from Doom Emacs
    (gcmh-verbose nil)
    :config
    (setq garbage-collection-messages nil)

    ;; Increase GC threshold when in minibuffer
    (defvar krisb-gc-minibuffer--original gcmh-high-cons-threshold
      "Temporary variable to hold `gcmh-high-cons-threshold'")

    (defun krisb-gcmh-minibuffer-setup ()
      "Temporarily have \"limitless\" `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-setup] Increasing GC threshold")
      (setq gcmh-high-cons-threshold most-positive-fixnum))

    (defun krisb-gcmh-minibuffer-exit ()
      "Restore value of `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-exit] Restoring GC threshold")
      (setq gcmh-high-cons-threshold krisb-gc-minibuffer--original))

    ;; Increase `gc-cons-threshold' while using corfu, like we do for the
    ;; minibuffer
    (with-eval-after-load 'corfu
      (advice-add 'completion-at-point :before 'krisb-gcmh-minibuffer-setup)
      (advice-add 'corfu-quit :before 'krisb-gcmh-minibuffer-exit)
      (advice-add 'corfu-insert :before 'krisb-gcmh-minibuffer-exit)))

  ;;; Diagnose memory usage
  ;; See how Emacs is using memory. From
  ;; https://www.reddit.com/r/emacs/comments/ck4zb3/comment/evji1n7/?utm_source=share&utm_medium=web2x&context=3
  (defun krisb-diagnose-garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))

  ;;; Emacs-gc-stats
  ;; Collect GC statistics. Requested by someone who'd like GC statistics:
  ;; https://www.reddit.com/r/emacs/comments/14dej62/please_help_collecting_statistics_to_optimize/.
  ;; Also see https://elpa.gnu.org/packages/emacs-gc-stats.html
  (use-package emacs-gc-stats
    :disabled t                           ; Dont collecting data
    :hook (on-first-input . emacs-gc-stats-mode)
    :custom
    ;; Optionally reset Emacs GC settings to default values (recommended)
    (emacs-gc-stats-gc-defaults 'emacs-defaults)
    (emacs-gc-stats-remind (* 7))  ; Optionally set reminder to upload the stats
    (emacs-gc-stats-inhibit-command-name-logging nil))

  ;;; Provide
  (provide 'krisb-garbage-collection)
#+end_src

*** =krisb-system-env.el=
:PROPERTIES:
:CUSTOM_ID: krisb-system-envel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-system-env.el"
  ;;; Exec-path-from-shell
  ;; Ensure Emacs' and system shell have same path
  (use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-variables
     '("PATH" "MANPATH" "BROWSER"
       ;; Language paths
       "GOPATH"
       ;; `ssh-agent' environment variables. See
       ;; https://wiki.archlinux.org/title/SSH_keys#Start_ssh-agent_with_systemd_user
       "SSH_AGENT_PID" "SSH_AUTH_SOCK"
       ;; For LSP-mode. See
       ;; https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization
       "LSP_USE_PLISTS"))
    :config
    (exec-path-from-shell-initialize)

    ;; For npm. Found here:
    ;; https://www.reddit.com/r/emacs/comments/s6zkb6/comment/ht794j7/?utm_source=share&utm_medium=web2x&context=3
    (when (eq (length (getenv "NODE_PATH")) 0)
      (setenv "NODE_PATH" "/usr/local/lib/node_modules")))

  ;;; Provide
  (provide 'krisb-system-env)
#+end_src

*** =krisb-core.el=
:PROPERTIES:
:CUSTOM_ID: krisb-coreel
:END:

**** Package management and configuration
:PROPERTIES:
:CUSTOM_ID: package-management-and-configuration
:END:

I use =package.el=. =Package.el= (henceforth =package=) is the built-in package manager for Emacs. =package= downloads packages into ~package-user-dir~ from online package archives (defined in ~package-archives~). Every package download creates a directory in ~package-user-dir~ that holds that package files and whose name is the package followed by the version downloaded. The version downloaded depends on ~package-archive-priorities~: =package= will download from the highest priority archive that offers the desired package. Additionally, users can "pin" packages to a particular version via ~package-pinned-packages~.[fn:2]

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
  ;;; Package.el
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil

          load-prefer-newer t)            ; Do not load outdated byte code files

  ;; As recommended in https://elpa.gnu.org/
  (unless (fboundp 'package-activate-all) (package-initialize))
#+end_src

[fn:2] Those who use =use-package= can use the convenient ~:pin~ keyword instead of modifying ~package-pinned-packages~ directly.

Releases of Emacs 29.1 and above come with =use-package= built-in. =use-package= offers an array of easy-to-use user-facing macros for setting user options, adding hooks, controlling the loading packages (order, lazily, dependencies, etc.), and setting keybindings (via =bind-key=).

Uncommonly known are the commands =use-package= offers that help users debug and introspect the loading of their packages. The following is a non-exhaustive list:
+ ~use-package-jump-to-package-form~ :: Prompts the user for a package configured using use-package and jumps to its corresponding use-package declaration. Useful for navigating a large =.init.el= or many small config files.
+ ~use-package-lint~ :: Reports any syntax errors in use-package declarations in the current buffer.
+ ~use-package-report~ :: Show statistics about all your use--package declarations. Requires ~use-package-compute-statistics~ to be non-nil.

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  ;; 2025-04-10: I think I must require use-package for subsequent NAblocks on a
  ;; fresh install to be respected and those packages installed?
  (require 'use-package)

  (setopt use-package-always-ensure t
          use-package-expand-minimally t  ; Verbosity of use-package macro
          ;; 2025-04-08: I do not set `use-package-always-defer' to non-nil
          ;; because I have had bad experiences trying to troubleshoot packages
          ;; because of the many potential deferral conditions.  Package deferrals
          ;; overlap and become interwoven.  It becomes harder when I don't notice
          ;; things are broken because a package's features were lazily loaded.
          ;;
          ;; Instead, I choose to opt-in to deferring packages (e.g. through
          ;; :defer, :bind, :after, etc.)
          use-package-always-defer nil)

  ;; Only be verbose when interpreted, otherwise errors are caught at compile time
  (setopt use-package-verbose (not (bound-and-true-p byte-compile-current-file)))

  ;; Compile statistics to be shown in `use-package-report'
  (setopt use-package-compute-statistics t)
#+end_src

**** Other
:PROPERTIES:
:CUSTOM_ID: other
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
  ;; Set better default package paths
  (use-package no-littering
    :init
    ;; According to the package instructions, these variables must be set prior to
    ;; loading the feature
    (eval-and-compile                 ; Ensure values don't differ at compile time
      (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory) ; Config files
            no-littering-var-directory (expand-file-name "var/" user-emacs-directory))) ; Persistent files
    :config
    ;; Ensure the directories exist
    (mkdir no-littering-etc-directory t)
    (mkdir no-littering-var-directory t)

    ;; Read docstring.  Sets more secure values for
    ;; `auto-save-file-name-transforms', `backup-directory-alist', and
    ;; `undo-tree-history-directory-alist'.
    (no-littering-theme-backups))

  ;;; On
  ;; Package exposes a number of utility hooks and functions ported from Doom
  ;; Emacs.  The hooks make it easier to speed up Emacs startup by providing
  ;; finer-grained control of the timing at which packages are loaded.  Provides
  ;; the following hooks:
  ;; - on-first-input-hook
  ;; - on-init-ui-hook
  ;; - on-first-file-hook
  ;; - on-switch-frame-hook
  ;; - on-first-buffer-hook
  ;; - on-switch-buffer-hook
  ;; - on-switch-window-hook
  (use-package on)

  ;;; System-packages
  ;; Install system packages via Emacs. Necessary for use-package's
  ;; `:ensure-system-package' flag
  (use-package system-packages
    :custom
    (system-packages-noconfirm nil)
    :config
    (when (executable-find "paru")
      (add-to-list 'system-packages-supported-package-managers
                   '(paru . ((default-sudo . nil)
                             (install . "paru -S")
                             (search . "paru -Ss")
                             (uninstall . "paru -Rns")
                             (update . "paru -Syu")
                             (clean-cache . "paru -Sc")
                             (change-log . "paru -Qc")
                             (log . "cat /var/log/paru.log")
                             (get-info . "paru -Qi")
                             (get-info-remote . "paru -Si")
                             (list-files-provided-by . "paru -qQl")
                             (owning-file . "paru -Qo")
                             (owning-file-remote . "paru -F")
                             (verify-all-packages . "paru -Qkk")
                             (verify-all-dependencies . "paru -Dk")
                             (remove-orphaned . "paru -Rns $(paru -Qtdq)")
                             (list-installed-packages . "paru -Qe")
                             (list-installed-packages-all . "paru -Q")
                             (list-dependencies-of . "paru -Qi")
                             (noconfirm . "--noconfirm"))))
      (setq system-packages-package-manager 'paru
            system-packages-use-sudo nil)))
#+end_src

**** =el-patch=
:PROPERTIES:
:CUSTOM_ID: el-patch
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
  ;;; El-patch
  (use-package el-patch)
#+end_src

**** =async.el=
:PROPERTIES:
:CUSTOM_ID: asyncel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
   ;;; Async.el
  ;; Async library and a few small but useful implementations
  (use-package async
    :custom
    (async-bytecomp-allowed-packages 'all)
    :config
    (async-bytecomp-package-mode 1))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-core.el"
  ;;; Provide
  (provide 'krisb-core)
#+end_src

*** =krisb-essentials.el=
:PROPERTIES:
:CUSTOM_ID: krisb-essentialsel
:END:

**** Preamble
:PROPERTIES:
:CUSTOM_ID: preamble
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; krisb-essentials.el --- Essential Emacs-wide settings  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Setting general user options.

  ;;; Code:
#+end_src

**** Initial scratch buffer
:PROPERTIES:
:CUSTOM_ID: initial-scratch-buffer
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Set initial scratch buffer major mode and message
  (setopt initial-scratch-message "Hello 👋"
          ;; Shave seconds off startup time by starting the scratch buffer in
          ;; `fundamental-mode'
          initial-major-mode 'fundamental-mode)
#+end_src

**** Customize and customize buffers
:PROPERTIES:
:CUSTOM_ID: customize-and-customize-buffers
:END:

=Custom= is a built-in way to modify user options, face attributes, and more. ~customize-group~ is an exceptionally good way to discover the options a package provides.[fn:1] Customize buffers are also very mouse friendly (Sometimes it's better to use the mouse!).

A useful command added in Emacs 30.1 is ~customize-dirlocals~, which is a way to set directory local settings (see =(info "(emacs) Directory Variables")=; there are also the command ~add-dir-local-variable~) using the customize UI.

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Custom
  (setopt custom-file (no-littering-expand-etc-file-name "custom.el")
          custom-safe-themes t
          custom-theme-allow-multiple-selections t
          custom-unlispify-tag-names nil
          custom-buffer-style 'links
          custom-search-field nil)

  (when (and custom-file (file-exists-p custom-file))
    (load custom-file))
#+end_src

[fn:1] This is because the =:group= keyword is available and customarily used by package authors.

**** Scrolling behavior
:PROPERTIES:
:CUSTOM_ID: scrolling-behavior
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Scrolling
  (setopt scroll-error-top-bottom nil
          scroll-preserve-screen-position t
          scroll-margin 0
          next-screen-context-lines 6
          scroll-minibuffer-conservatively t
          scroll-conservatively 1         ; Affects `scroll-step'
          scroll-up-aggressively nil      ; Center after point leaves window?
          scroll-down-aggressively nil)   ; Center after point leaves window?

  ;;;;; Font locking
  ;; NOTE 2024-09-16: The below are used by Doom Emacs.
  ;; There are the three ways to increase scrolling performance.  See
  ;;
  ;; (info "(emacs) Scrolling")
  ;;
  ;; for details.
  (setopt
   ;; Introduced in Emacs commit b2f8c9f, this inhibits fontification while
   ;; receiving input, which should help a little with scrolling performance.
   redisplay-skip-fontification-on-input t
   ;; More performant rapid scrolling over unfontified regions.  May cause brief
   ;; spells of inaccurate syntax highlighting right after scrolling, which should
   ;; quickly self-correct.
   fast-but-imprecise-scrolling t)
#+end_src

**** Recognizing =M-SPC= under WSLg
:PROPERTIES:
:CUSTOM_ID: recognizing-m-spc-under-wslg
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Recognizing `M-SPC' under WSLg
  ;; 2024-10-29: There is currently an issue in WSLg that prevents Alt+Space from
  ;; being caught by X11.  A workaround is described in
  ;; https://github.com/microsoft/wslg/issues/1068#issuecomment-1817786154.  Use
  ;; PowerToys Keyboard Manager to rebind Alt+Space to Alt+F13 in then using
  ;; xmodmap to redirect Alt+F13 to M-SPC.  (Instead of creating a file, I do it
  ;; using a shell command below.)
  (shell-command "xmodmap -e 'keycode 191 = space'")
#+end_src

**** Commands
:PROPERTIES:
:CUSTOM_ID: commands
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Commands
  ;;;; Restart or close Emacs
  (defun krisb-restart-or-kill-emacs (&optional arg restart)
    "Kill Emacs.
  If called with RESTART (`universal-argument’ interactively) restart
  Emacs instead. Passes ARG to `save-buffers-kill-emacs'."
    (interactive "P")
    (save-buffers-kill-emacs arg (or restart (equal arg '(4)))))
  (bind-key [remap save-buffers-kill-terminal] #'krisb-restart-or-kill-emacs)

  ;;;; Scrolling
  (bind-keys
   ("C-M-S-s-p" . scroll-down-line)
   ("C-M-S-s-n" . scroll-up-line))

  ;;;; Joining lines
  (defun krisb-open-line-above-goto ()
    "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current
  mode. Credit to
  https://emacsredux.com/blog/2013/06/15/open-line-above/"
    (interactive)
    (beginning-of-line)
    (newline)
    (previous-line)
    (indent-according-to-mode))

  (defun krisb-open-line-below-goto ()
    "Insert an empty line after the current line.
  Position the cursor at its beginning, according to the current mode.
  Credit to https://emacsredux.com/blog/2013/03/26/smarter-open-line/"
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun krisb-join-line-above ()
    "Join the current line with the line above."
    (interactive)
    (save-excursion (delete-indentation))
    (when (string-match-p "\\`\\s-*$" (thing-at-point 'line))
      (funcall indent-line-function)))

  (defun krisb-join-line-below ()
    "Join the current line with the line below."
    (interactive)
    (save-excursion (delete-indentation t))
    (when (bolp)
      (funcall indent-line-function)))

  (bind-keys
   ("C-S-p" . krisb-open-line-above-goto)
   ("C-S-n" . krisb-open-line-below-goto)
   ("C-S-k" . krisb-join-line-above)
   ("C-S-j" . krisb-join-line-below))

  ;;;; Empty trash
  (defun krisb-empty-trash ()
    "Empty the trash directory."
    (interactive)
    (let ((size (string-trim (shell-command-to-string (concat"du -sh " trash-directory " | cut -f1")))))
      (when (and delete-by-moving-to-trash
                 (yes-or-no-p (format "Empty trash directory of %s size? " size)))
        (save-window-excursion (async-shell-command (concat "rm -rf " trash-directory))))))

  ;;;; Remove all advice from a function
  ;; Thanks to
  ;; https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it
  (defun krisb-advice-unadvice (sym)
    "Remove all advices from symbol SYM."
    (interactive "aFunction symbol: ")
    (advice-mapc (lambda (advice _props)
                   (advice-remove sym advice))
                 sym))

  ;;;; Delete this file
  (defun krisb-delete-this-file (&optional path force-p)
    "Delete PATH, kill its buffers and expunge it from vc/magit cache.
    If PATH is not specified, default to the current buffer's file.

    If FORCE-P, delete without confirmation."
    (interactive
     (list (buffer-file-name (buffer-base-buffer))
           current-prefix-arg))
    (let* ((path (or path (buffer-file-name (buffer-base-buffer))))
           (short-path (abbreviate-file-name path)))
      (unless (and path (file-exists-p path))
        (user-error "Buffer is not visiting any file"))
      (unless (file-exists-p path)
        (error "File doesn't exist: %s" path))
      (unless (or force-p (y-or-n-p (format "Really delete %S? " short-path)))
        (user-error "Aborted"))
      (let ((buf (current-buffer)))
        (unwind-protect
            (progn (delete-file path) t)
          (if (file-exists-p path)
              (error "Failed to delete %S" short-path)
            ;; ;; Ensures that windows displaying this buffer will be switched to
            ;; ;; real buffers (`doom-real-buffer-p')
            ;; (doom/kill-this-buffer-in-all-windows buf t)
            ;; (doom--update-files path)
            (kill-this-buffer)
            (message "Deleted %S" short-path))))))
  (bind-key "D" #'krisb-delete-this-file 'krisb-file-keymap)

  ;;;; Yank current buffer's file-path
  (defun krisb-yank-buffer-filename ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (if-let ((filename (or buffer-file-name list-buffers-directory)))
        (progn (kill-new filename)
               (message "Copied %s" filename))
      (error "Couldn't find filename in current buffer")))
  (bind-key "w" #'krisb-yank-buffer-filename 'krisb-file-keymap)

  ;;;; Unfill paragraph
  ;; Protesilaos's `prot-simple-unfill-region-or-paragraph'
  (defun krisb-unfill-region-or-paragraph (&optional beg end)
    "Unfill paragraph or, when active, the region.
  Join all lines in region delimited by BEG and END, if active, while
  respecting any empty lines (so multiple paragraphs are not joined, just
  unfilled).  If no region is active, operate on the paragraph.  The idea
  is to produce the opposite effect of both `fill-paragraph' and
  `fill-region'."
    (interactive "r")
    (let ((fill-column most-positive-fixnum))
      (if (use-region-p)
          (fill-region beg end)
        (fill-paragraph))))
  (bind-key "M-Q" #'krisb-unfill-region-or-paragraph)
#+end_src

**** Minor modes
:PROPERTIES:
:CUSTOM_ID: minor-modes
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Minor modes
  ;;;; Recognize camel case as words
  (global-subword-mode 1)

  ;;;; Repeat-mode
  (repeat-mode 1)

  ;;;; Delete-selection-mode
  ;; When selecting text, if typing new text, replace the selected text with the
  ;; new text
  (delete-selection-mode t)

  ;;;; Show context menu from right-click
  (when (display-graphic-p)
    (context-menu-mode 1))

  ;;;; Avoid collision of mouse with point
  (mouse-avoidance-mode 'jump)

  ;;;; Find-funtion-mode
  ;; Binds useful commands for jumping to variables, functions, and libraries
  (find-function-mode 1)

  ;; Useful keybind for my usage
  (defun krisb-find-library-other-tab (library)
    "Find LIBRARY in other tab."
    (interactive (list (read-library-name)))
    (switch-to-buffer-other-tab (save-window-excursion (funcall-interactively #'find-library library))))
  (bind-key "L" #'krisb-find-library-other-tab tab-prefix-map)

  ;;;; Visual-line-mode in *Messages* buffer
  (add-hook 'messages-buffer-mode-hook #'visual-line-mode)

  ;;;; Undo frame deletions
  (undelete-frame-mode 1)

  ;;;; So-long-mode everywhere
  (global-so-long-mode 1)

  ;;;; Show a default value only when default is applicable
  (minibuffer-electric-default-mode 1)

  ;;;; Display-line-numbers
  ;; Show line numbers on the left fringe
  (use-package display-line-numbers
    :ensure nil
    :bind ( :map krisb-toggle-keymap
            ("l" . display-line-numbers-mode))
    :custom
    (display-line-numbers-type t)
    (display-line-numbers-width-start t)) ; Keep width consistent in buffer

  ;;;; Krisb-reveal
  (use-package krisb-reveal
    :ensure nil
    :config
    (krisb-reveal-global-mode 1))
#+end_src

**** Miscellaneous
:PROPERTIES:
:CUSTOM_ID: miscellaneous
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Miscellaneous
  ;;;; Enable all disabled commands
  (setopt disabled-command-function nil)

  ;;;; Stretch cursor to the glyph width
  (setopt x-stretch-cursor t)

  ;;;; Middle-click pastes at point, not at mouse
  (setopt mouse-yank-at-point t)

  ;;;; More leeway for Emacs subprocesses
  ;; Let Emacs subprocesses read more data per chunk
  (setopt read-process-output-max (* 4 1024 1024)) ; 4mb
  ;; Recommend here
  ;; https://www.reddit.com/r/emacs/comments/17nl7cw/comment/k7u1ueu/?utm_source=share&utm_medium=web2x&context=3
  (setopt process-adaptive-read-buffering nil)

  ;;;; Don't do anything with inactive mark
  (setopt mark-even-if-inactive nil)

  ;;;; Strategy for uniquifying buffer names
  (setopt uniquify-buffer-name-style 'post-forward-angle-brackets)

  ;;;; Don't show "obsolete" byte-compile warnings
  (setopt byte-compile-warnings (remove 'obsolete byte-compile-warning-types))

  ;;;; Enable `view-mode' when calling `read-only-mode'
  (setopt view-read-only t)

  ;;;; Behavior for `cycle-spacing-actions'
  ;; Read the docstring for an explanation (or try it out!)
  (setopt cycle-spacing-actions '(just-one-space (delete-all-space -) restore))

  ;;;; Word wrapping
  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)

  ;;;; Repeatedly pop mark with C-u SPC
  (setopt set-mark-command-repeat-pop t)

  ;;;; Default fill column
  (setq-default fill-column 80)

  ;;;; Insert spaces instead of tab characters
  (setq-default indent-tabs-mode nil)

  ;;;; Trash
  (setq-default trash-directory (no-littering-expand-var-file-name "trash")
                delete-by-moving-to-trash t)

  ;;;; Don't create lock files
  (setopt create-lockfiles nil)

  ;;;; Confirm to kill emacs
  (setopt confirm-kill-emacs 'y-or-n-p)

  ;;;; Don’t warn when advising
  (setopt ad-redefinition-action 'accept)

  ;;;; Double space delimits end of sentence?
  (setq-default sentence-end-double-space nil)
  (add-hook 'prog-mode-hook (lambda () (setq-local sentence-end-double-space t)))
  (add-hook 'conf-mode-hook (lambda () (setq-local sentence-end-double-space t)))

  ;;;; Keep the cursor out of the read-only portions of the minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;;; Allow minibuffer commands in minibuffer
  (setq enable-recursive-minibuffers t)

  ;;;; Ignore case basically everywhere
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  (setq-default case-fold-search t)

  ;;;; `indent-for-tab-command' functionality.
  (setopt tab-always-indent 'complete
          tab-first-completion 'word)

  ;;;; Duplicate-dwim binding
  (bind-key "C-x ;" #'duplicate-dwim)
  (setopt duplicate-line-final-position -1
          duplicate-region-final-position 1)

  ;;;; Rebind case commands
  ;; Remap these defaults; they are effectively the same while phasing out the
  ;; need the *-region binds
  (bind-keys
   ([remap upcase-word] . upcase-dwim)
   ([remap downcase-word] . downcase-dwim)
   ([remap capitalize-word] . capitalize-dwim))

  ;;;; Echo unfinished keystrokes quicker
  ;; Echo keystrokes (of unfinished commands) much quicker
  (setopt echo-keystrokes 0.5)

  ;;;; Quitting windows to match my intentions more
  (setopt quit-restore-window-no-switch t)

  ;;;; Killing buffers smartly deletes windows too sometimes
  (setopt kill-buffer-quit-windows t)

  ;;;; Don't display warning buffer at the bottom of frame
  (setopt warning-display-at-bottom nil)

  ;;;; Change highlighting behavior of `exchange-point-and-mark'
  (setopt exchange-point-and-mark-highlight-region nil) ; New in Emacs 31.1

  ;;;; Don't visually shift text when using `rectangle-mark-mode'
  (setopt rectangle-indicate-zero-width-rectangle nil) ; New in Emacs 31.1

  ;;;; Recenter upon `next-error'
  (setopt next-error-recenter '(4))

  ;;;; Header line text scaling
  (setq-default text-scale-remap-header-line t)

  ;;;; Truncate lines
  ;; If non-nil and `truncate-lines' is disabled, soft wrapping will not occur
  ;; when the window is narrower than `truncate-partial-width-windows' characters.
  ;; So we set this to nil.
  (setopt truncate-partial-width-windows nil)

  ;;;; Continuation line indicator character
  ;; See for an explanation of these concepts
  ;; https://www.reddit.com/r/emacs/comments/1fxr1ci/comment/lqpf2bz/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
  (set-display-table-slot standard-display-table 1 ?⏎)

  ;;;; Prefer UTF-8 file and selection encoding
  (prefer-coding-system 'utf-8)
  ;; The clipboard on Windows is often a wider encoding (UTF-16), so leave Emacs
  ;; to its own devices there.  Otherwise, encode text into the clipboard into UTF-8
  (unless (eq system-type 'windows-nt)
    (setopt selection-coding-system 'utf-8))

  ;;;; Prefer unicode charset
  (set-charset-priority 'unicode)
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-0
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; krisb-essentials.el ends here
  (provide 'krisb-essentials)
#+end_src

*** =krisb-icons.el=
:PROPERTIES:
:CUSTOM_ID: krisb-iconsel
:END:

Where I set global options for icon libraries. I currently (as of 2024-10-21) prefer the Nerd Icons.
#+begin_src emacs-lisp :tangle "modules/krisb-icons.el"
  ;;; Nerd-icons
  (use-package nerd-icons
    :custom
    (nerd-icons-scale-factor 0.9))

  ;;; All-the-icons
  (use-package all-the-icons
    :custom
    (all-the-icons-scale-factor 1.1))

  ;;; Provide
  (provide 'krisb-icons)
#+end_src

*** =krisb-completion.el=
:PROPERTIES:
:CUSTOM_ID: krisb-completionel
:END:

**** Built-in
:PROPERTIES:
:CUSTOM_ID: built-in
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Minibuffer.el
  (use-package minibuffer
    :ensure nil
    :hook (after-init . krisb-completion-styles-setup)
    :custom
    (completion-cycle-threshold nil)
    (completion-lazy-hilit t)             ; Lazy highlighting; added Emacs 30.1
    (completions-max-height 20)
    (completion-ignore-case t)
    (completion-flex-nospace t)
    (minibuffer-default-prompt-format " [%s]") ; Format of portion for default value

    ;; Completions buffer
    (completion-auto-help 'visible)
    (completion-auto-select 'second-tab)
    (completions-format 'one-column)
    (completions-detailed t) ; Show more details in completion minibuffer (inspired by `marginalia')
    (completions-group t)    ; Groups; Emacs 28
    (completions-sort 'historical)        ; Emacs 30.1

    ;; Category settings. A non-exhaustve list of known completion categories:
    ;; - `bookmark'
    ;; - `buffer'
    ;; - `charset'
    ;; - `coding-system'
    ;; - `color'
    ;; - `command' (e.g. `M-x')
    ;; - `customize-group'
    ;; - `environment-variable'
    ;; - `expression'
    ;; - `face'
    ;; - `file'
    ;; - `function' (the `describe-function' command bound to `C-h f')
    ;; - `info-menu'
    ;; - `imenu'
    ;; - `input-method'
    ;; - `kill-ring'
    ;; - `library'
    ;; - `minor-mode'
    ;; - `multi-category'
    ;; - `package'
    ;; - `project-file'
    ;; - `symbol' (the `describe-symbol' command bound to `C-h o')
    ;; - `theme'
    ;; - `unicode-name' (the `insert-char' command bound to `C-x 8 RET')
    ;; - `variable' (the `describe-variable' command bound to `C-h v')
    ;; - `consult-grep'
    ;; - `consult-isearch'
    ;; - `consult-kmacro'
    ;; - `consult-location'
    ;; - `embark-keybinding'
    (completion-category-defaults
     '((calendar-month (display-sort-function . identity))))
    (completion-category-overrides
     '((file (styles . (basic partial-completion flex))))) ; Include `partial-completion' to enable wildcards and partial paths.
    :config
    (defun krisb-completion-styles-setup ()
      "Set up `completion-styes'."
      ;; I do this manually last because the final styles I want depend on the
      ;; packages I want enabled, and so setting this within each use-package,
      ;; independently of other use-packages, means I have to make sure various
      ;; packages are loaded after other ones so my `completion-styles' setting
      ;; isn't overridden in an undesirable way.  Instead, I opt to just set it
      ;; finally after all those packages are set.
      (setopt completion-styles (list (if (featurep 'orderless)
                                          'orderless 'basic)
                                      (if (featurep 'hotfuzz)
                                          'hotfuzz 'flex)))))

  ;;; Completion-preview
  (use-package completion-preview
    :ensure nil
    :hook (((prog-mode log-edit-mode eval-expression-minibuffer-setup) . completion-preview-mode)
           (eshell-mode . krisb-completion-preview-mode-setup-eshell))
    :bind ( :map completion-preview-active-mode-map
            ("M-n" . completion-preview-next-candidate)
            ("M-p" . completion-preview-prev-candidate))
    :custom
    (completion-preview-ignore-case t)
    (completion-preview-minimum-symbol-length 3)
    :config
    ;; Use prescient or corfu-prescient's sorting function if they are available.
    ;; With this, the completion candidates shown by corfu align with the
    ;; completion candidate shown by `completion-preview-mode'.  The reason we use
    ;; this variable watcher is that it is an inexpensive solution to changing
    ;; `corfu-sort-function' values.
    (with-eval-after-load 'prescient
      ;; Use this as a fallback value: if `corfu-sort-function' isn't changed,
      ;; `completion-preview-sort-function' will remain
      ;; `prescient-completion-sort'
      (setopt completion-preview-sort-function #'prescient-completion-sort))
    (add-variable-watcher 'corfu-sort-function
                          (lambda (_symbol newval operation where)
                            "Match the value of `completion-preview-sort-function' to `corfu-sort-function'.
  If `corfu-sort-function' is set buffer-locally, also set
  `completion-preview-sort-function' buffer-locally.  Otherwise, change
  the default value of `completion-preview-sort-function' accordingly.

  This action only applies when the value of `corfu-sort-function' is
  set (i.e., OPERATION is \\='set).  This excludes, e.g., let bindings."
                            (when (equal operation 'set)
                              (if where
                                  (with-current-buffer where
                                    (setq-local completion-preview-sort-function newval))
                                (setopt completion-preview-sort-function newval)))))

    ;; Add these bespoke self-insert commands to the list of recognized preview
    ;; commands
    (dolist (command '(org-self-insert-command
                       outshine-self-insert-command))
      (add-to-list 'completion-preview-commands command))

    ;; Special settings for eshell buffers
    (defun krisb-completion-preview-mode-setup-eshell ()
      "Set specific settings in eshell buffers."
      (setq-local completion-preview-minimum-symbol-length 1)
      (completion-preview-mode 1)))

  ;;; Crm
  (use-package crm
    :ensure nil
    :config
    ;; Add prompt indicator to `completing-read-multiple'. We display
    ;; [CRM<separator>], e.g., [CRM,] if the separator is a comma. Taken from
    ;; https://github.com/minad/vertico
    (defun krisb-crm-indicator (args)
      (cons (format "[completing-read-multiple: %s]  %s"
                    (propertize
                     (replace-regexp-in-string
                      "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                      crm-separator)
                     'face 'error)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'krisb-crm-indicator))
#+end_src

**** Completion
:PROPERTIES:
:CUSTOM_ID: completion
:END:

***** Minibuffer
:PROPERTIES:
:CUSTOM_ID: minibuffer
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Vertico
  ;;;; Itself
  (use-package vertico
    :pin gnu-elpa-devel
    :demand t
    :bind (("C-c v r" . vertico-repeat)
           ("C-c v s" . vertico-suspend))
    :hook (minibuffer-setup . vertico-repeat-save)
    :custom
    (vertico-count 13)
    (vertico-resize 'grow-only)
    (vertico-cycle nil)
    :config
    (vertico-mode 1)
    (require 'krisb-vertico))

  ;;;; Vertico-directory
  ;; More convenient path modification commands
  (use-package vertico-directory
    :requires vertico
    :ensure nil
    :bind ( :map vertico-map
            ("RET" . vertico-directory-enter)
            ("DEL" . vertico-directory-delete-char)
            ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  ;;;; Vertico-multiform
  (use-package vertico-multiform
    :requires vertico
    :ensure nil
    :custom
    (vertico-multiform-categories
     '((buffer (vertico-sort-function . nil))
       (color (vertico-sort-function . vertico-sort-history-length-alpha))
       (jinx grid
             (vertico-grid-annotate . 20)
             (vertico-grid-max-columns . 12)
             (vertico-grid-separator
              . #("    |    " 4 5 (display (space :width (1)) face (:inherit shadow :inverse-video t)))))))
    (vertico-multiform-commands
     '((pdf-view-goto-label (vertico-sort-function . nil))
       (".+-history" (vertico-sort-function . nil))
       ("^org-node-"
        (completion-styles . (orderless))
        (orderless-matching-styles . (orderless-prefixes orderless-regexp orderless-literal orderless-flex)))))
    :config
    (vertico-multiform-mode 1))

  ;;;; Vertico-buffer
  (use-package vertico-buffer
    :requires vertico
    :ensure nil
    :custom
    (vertico-buffer-hide-prompt nil)
    (vertico-buffer-display-action '(display-buffer-reuse-window)))

  ;;;; Vertico-prescient
  (use-package vertico-prescient
    :requires vertico
    :after prescient
    :custom
    ;; Sorting
    (vertico-prescient-enable-sorting t)
    (vertico-prescient-override-sorting nil) ; Don't override `display-sort-function'

    ;; Filtering. Below only applies when `vertico-prescient-enable-filtering' is
    ;; non-nil
    (vertico-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (vertico-prescient-completion-styles '(prescient flex))
    ;; Only set if `vertico-prescient-enable-filtering' is non-nil. See also
    ;; `prescient--completion-recommended-overrides'
    (vertico-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (vertico-prescient-mode 1))
#+end_src

***** Inline
:PROPERTIES:
:CUSTOM_ID: inline
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Corfu
  ;; Faster, minimal, and more lightweight autocomplete that is more faithful to
  ;; the Emacs infrastructure
  ;;;;; Itself
  (use-package corfu
    :demand t
    :bind (("M-i" . completion-at-point) ; For harmony with "M-i" in `completion-preview-active-mode-map'
           :map corfu-map
           ("M-d" . corfu-info-documentation)
           ("M-m" . krisb-corfu-move-to-minibuffer))
    :custom
    (corfu-auto nil)
    (corfu-preselect 'valid)
    (corfu-preview-current t)
    (corfu-on-exact-match 'insert)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)     ; Always have the same width
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle nil)

    (corfu-quit-at-boundary nil)
    (corfu-separator ?\s)            ; Use space
    (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
    :custom-face
    ;; Always use a fixed-pitched font for corfu; variable pitch fonts (which will
    ;; be adopted in a variable pitch buffer) have inconsistent spacing
    (corfu-default ((t (:inherit 'default))))
    :config
    (global-corfu-mode 1)

    ;; Enable corfu in minibuffer if `vertico-mode' is disabled.  From
    ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
    (defun krisb-corfu-enable-in-minibuffer-conditionally ()
      "Enable Corfu in the minibuffer if vertico is not active."
      (unless (bound-and-true-p vertico-mode)
        (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'krisb-corfu-enable-in-minibuffer-conditionally 1)

    ;; Transfer corfu completion to the minibuffer
    (defun krisb-corfu-move-to-minibuffer ()
      "Transfer corfu completion to the minibuffer.
  Taken from
  https://github.com/minad/corfu?tab=readme-ov-file#transfer-completion-to-the-minibuffer."
      (interactive)
      (pcase completion-in-region--data
        (`(,beg ,end ,table ,pred ,extras)
         (let ((completion-extra-properties extras)
               completion-cycle-threshold completion-cycling)
           (consult-completion-in-region beg end table pred)))))
    (add-to-list 'corfu-continue-commands #'krisb-corfu-move-to-minibuffer))

  ;;;;; Corfu-history
  ;; Save the history across Emacs sessions
  (use-package corfu-history
    :disabled t                    ; 2025-04-05: I use corfu-prescient for sorting
    :ensure nil
    :hook (corfu-mode . corfu-history-mode)
    :config
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;;;;; Corfu-popupinfo
  ;; Documentation window for corfu!
  (use-package corfu-popupinfo
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind ( :map corfu-map
            ([remap corfu-info-documentation] . corfu-popupinfo-toggle)
            ("M-l" . corfu-popupinfo-location))
    :custom
    (corfu-popupinfo-delay '(nil . 0.3))  ; Don't display initially
    (corfu-popupinfo-direction '(right left vertical))
    (corfu-popupinfo-hide t)
    (corfu-popupinfo-resize t)
    (corfu-popupinfo-max-height 70)
    (corfu-popupinfo-max-width 80)
    (corfu-popupinfo-min-height 1)
    (corfu-popupinfo-min-width 25))

  ;;;;; Corfu-prescient
  (use-package corfu-prescient
    :demand t
    :after corfu prescient
    :custom
    ;; Sorting
    (corfu-prescient-enable-sorting t)
    (corfu-prescient-override-sorting nil) ; Don't override `display-sort-function'

    ;; Filtering.  Below only applies when `corfu-prescient-enable-filtering' is
    ;; non-nil
    (corfu-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (corfu-prescient-completion-styles '(prescient flex))
    ;; See also `prescient--completion-recommended-overrides'
    (corfu-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (corfu-prescient-mode 1))

  ;;; Kind-icon
  ;; Icons for corfu! An alternative is nerd-icons-corfu for specifically nerd
  ;; icons.
  (use-package kind-icon
    :requires corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; To unify background color
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    (kind-icon-default-style
     '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.8 :scale 0.9))
    ;; Use VSCode's icons (i.e. nerd icons' codicons set). Read about it from my
    ;; write-up in the kind-icon wiki here:
    ;; https://github.com/jdtsmith/kind-icon/wiki#using-svg-icons-from-a-nerd-fonts-icon-collection
    (kind-icon-mapping
     '((array          "a"   :icon "symbol-array"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (boolean        "b"   :icon "symbol-boolean"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (color          "#"   :icon "symbol-color"       :face success                          :collection "nerd-fonts-codicons")
       (command        "cm"  :icon "chevron-right"      :face default                          :collection "nerd-fonts-codicons")
       (constant       "co"  :icon "symbol-constant"    :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (class          "c"   :icon "symbol-class"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (constructor    "cn"  :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (enum           "e"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enummember     "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enum-member    "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (event          "ev"  :icon "symbol-event"       :face font-lock-warning-face           :collection "nerd-fonts-codicons")
       (field          "fd"  :icon "symbol-field"       :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (file           "f"   :icon "symbol-file"        :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (folder         "d"   :icon "folder"             :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (function       "f"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (interface      "if"  :icon "symbol-interface"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (keyword        "kw"  :icon "symbol-keyword"     :face font-lock-keyword-face           :collection "nerd-fonts-codicons")
       (macro          "mc"  :icon "lambda"             :face font-lock-keyword-face)
       (magic          "ma"  :icon "lightbulb-autofix"  :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (method         "m"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (module         "{"   :icon "file-code-outline"  :face font-lock-preprocessor-face)
       (numeric        "nu"  :icon "symbol-numeric"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (operator       "op"  :icon "symbol-operator"    :face font-lock-comment-delimiter-face :collection "nerd-fonts-codicons")
       (param          "pa"  :icon "gear"               :face default                          :collection "nerd-fonts-codicons")
       (property       "pr"  :icon "symbol-property"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (reference      "rf"  :icon "library"            :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (snippet        "S"   :icon "symbol-snippet"     :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (string         "s"   :icon "symbol-string"      :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (struct         "%"   :icon "symbol-structure"   :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (text           "tx"  :icon "symbol-key"         :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (typeparameter  "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (type-parameter "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (unit           "u"   :icon "symbol-ruler"       :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (value          "v"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (variable       "va"  :icon "symbol-variable"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (t              "."   :icon "question"           :face font-lock-warning-face           :collection "nerd-fonts-codicons")))
    :init
    (require 'svg-lib)
    (add-to-list 'svg-lib-icon-collections
                 '("nerd-fonts-codicons" . "https://github.com/microsoft/vscode-codicons/raw/HEAD/src/icons/%s.svg"))
    :config
    ;; TODO 2022-05-24: See if I can use the cooler icons from
    ;; `lsp-bridge-icon--icons' without requiring the package
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)

    ;; Reset cache on loading new theme
    (add-hook 'enable-theme-functions (lambda (_) (funcall-interactively 'kind-icon-reset-cache))))

  ;;; Cape
  ;; Expand capf functionality with corfu! See an updated list of the defined capf
  ;; functions in the package's commentary.
  (use-package cape
    :bind (("C-c C p" . completion-at-point)
           ("C-c C d" . cape-dabbrev)
           ("C-c C h" . cape-history)
           ("C-c C f" . cape-file)
           ("C-c C k" . cape-keyword)
           ("C-c C s" . cape-elisp-symbol)
           ("C-c C a" . cape-abbrev)
           ("C-c C w" . cape-dict)
           ([remap ispell-complete-word] . cape-dict)
           ("C-c C l" . cape-line)
           ("C-c C \\" . cape-tex)
           ("C-c C _" . cape-tex)
           ("C-c C ^" . cape-tex)
           ("C-c C &" . cape-sgml)
           ("C-c C r" . cape-rfc1345)
           ([remap dabbrev-completion] . cape-dabbrev))
    :custom
    (cape-dabbrev-min-length 2)
    ;; Recommended in
    ;; https://github.com/minad/corfu?tab=readme-ov-file#configuration: Emacs 30
    ;; and newer: Disable Ispell completion function.  Try `cape-dict' as an
    ;; alternative.
    (text-mode-ispell-word-completion nil)
    :init
    ;; These are added to the global definition of
    ;; `completion-at-point-functions', which acts as a fallback if buffer-local
    ;; values end in `t'. Read (info "(cape) Configuration") for an explanation.

    ;; TODO 2025-03-26: Should I just add these as separate capfs? The use for
    ;; super-capfs is described here:
    ;; (info "(cape) Super-Capf - Merging multiple Capfs")
    (defun krisb-cape-super-capf--dict-dabbrev ()
      "Super-capf of `cape-dict' and `cape-dabbrev'."
      (cape-wrap-super 'cape-dict :with 'cape-dabbrev))

    (defvar krisb-cape-fallback-capfs '(krisb-cape-super-capf--dict-dabbrev)
      "Capfs added to the end of the global value of `completion-at-point-functions'.")

    (dolist (capf krisb-cape-fallback-capfs)
      (add-hook 'completion-at-point-functions capf 100))

    ;; Macro to help adding capfs via hooks
    (defmacro krisb-cape-setup-capfs (label hooks capfs)
      "Set up `completion-at-point-functions' for HOOKS.
  CAPFS are a list of `completion-at-point-functions'. Adds CAPFS when a
  hook in HOOKS is run. These effects are added by a defined function with
  LABEL appended to `krisb-cape-setup-capfs-'.

  The order of elements in CAPFS are the order they will appear in
  `completion-at-point-functions' for that buffer. That is, the first
  element in CAPFS will be the first element in
  `completion-at-point-functions'.

  This macro does not affect capfs already in
  `completion-at-point-functions' nor how later capfs are added to
  `completion-at-point-functions'."
      (declare (indent 0))
      `(dolist (hook ,hooks)
         (add-hook hook
                   (defun ,(intern (concat "krisb-cape-setup-capfs-" label)) ()
                     (dolist (capf (reverse ,capfs))
                       (add-to-list 'completion-at-point-functions capf))))))

    (krisb-cape-setup-capfs
      "elisp"
      '(emacs-lisp-mode-hook lisp-interaction-mode-hook)
      (list #'cape-file #'cape-elisp-symbol))

    (krisb-cape-setup-capfs
      "commit"
      '(git-commit-setup-hook log-edit-mode-hook)
      (list #'cape-elisp-symbol #'cape-dabbrev))
    :config
    ;; Use enchant en_US dictionary
    (with-eval-after-load 'jinx
      (setopt cape-dict-file
              (list (expand-file-name "enchant/en_US.dic" (xdg-config-home)))))

    ;; Resolve the undesirable behavior of `cape-elisp-symbol' and the *Help*
    ;; buffer described in
    ;; https://github.com/minad/corfu/discussions/504#discussioncomment-12592545.
    (defun krisb-corfu-popupinfo--doc-buffer (str)
      "Wrapper around `elisp--company-doc-buffer'.
  This function is a replacement for `elisp--company-doc-buffer', which
  normally returns the main Help buffer (returned by `help-buffer').
  Instead, this function returns a separate buffer to use as the Help
  buffer.

  Accepts the same argument as `elisp--company-doc-buffer' (STR).

  Meant to be used with `cape-capf-properties' on the `cape-elisp-symbol'
  completion at point function.  This ameliorates the sometimes
  undesirable issue described in
  https://github.com/minad/corfu/discussions/504#discussioncomment-12592545.

  This solution was taken from the suggestion of
  https://github.com/minad/corfu/discussions/504#discussioncomment-12593463."
      (let* ((help-xref-following t)
             (new-help-buf-name
              "*corfu-popupinfo documentation*")
             (new-help-buf (get-buffer-create new-help-buf-name)))
        (with-current-buffer new-help-buf
          (help-mode)
          (elisp--company-doc-buffer str))))

    (defun krisb-cape-elisp--around-advice (orig-fun &rest _args)
      "Advice to use a different doc buffer for documentation.
  This solution was taken from the suggestion of
  https://github.com/minad/corfu/discussions/504#discussioncomment-12593463."
      (cape-wrap-properties orig-fun :company-doc-buffer #'krisb-corfu-popupinfo--doc-buffer))

    (dolist (capf '(cape-elisp-symbol elisp-completion-at-point))
      (advice-add capf :around #'krisb-cape-elisp--around-advice))

    ;; NOTE 2025-03-26: The below does not apply because I've set
    ;; `text-mode-ispell-word-completion' to nil.  I've left it here for future
    ;; reference and just in case I revert the value to 'completion-at-point.
    ;; Resolve `ispell-completion-at-point' error when there is no dictionary
    ;; available
    (defun krisb-cape-ispell--around-advice (orig-fun &rest _args)
      "Advice to remove an error from missing ispell dictionary.
  There is an error when using `ispell-completion-at-point' without a
  dictionary.  The error is this:

  (error \"ispell-lookup-words: No plain word-list found at systemdefault locations.  Customize ‘ispell-alternate-dictionary’ to set yours.\")

  ORIG-FUN should be `ispell-completion-at-point'."
      (cape-wrap-silent orig-fun))

    (advice-add 'ispell-completion-at-point :around #'krisb-cape-ispell--around-advice)

    ;; Make eglot's capf non-exclusive
    (with-eval-after-load 'eglot
      (advice-add #'eglot-completion-at-point :around #'cape-wrap-nonexclusive)))

  ;;; Krisb-auto-completion
  (use-package krisb-auto-completion
    :ensure nil
    ;; 2025-04-08: I didn't end up liking this behavior.  Might revisit this in
    ;; the future; keeping here for reference, if anything.
    ;; :hook ((log-edit-mode eval-expression-minibuffer-setup) . krisb-auto-completion-mode)
    )
#+end_src

**** Accessory packages
:PROPERTIES:
:CUSTOM_ID: accessory-packages
:END:

Enhancements to all built-in-based completions.
#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Marginalia
  ;; Enable richer annotations in minibuffer (companion package of consult.el)
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    (marginalia-field-width 80)
    (marginalia-align-offset -2)          ; Two to the left
    :config
    (marginalia-mode 1))

  ;;; Nerd-icons-completion
  ;; Use nerd-icons in completing-read interfaces. An alternative would be
  ;; all-the-icons-completion which uses all-the-icons -- I prefer nerd-icons.
  (use-package nerd-icons-completion
    :demand t
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode 1))

  ;;; Prescient
  ;; Sorting and filtering of minibuffer candidates. The difference between
  ;; `orderless' and this package is that `orderless' filters but does not sort -
  ;; it leaves that up to the "candidate source and the completion UI."
  ;; Additionally, `orderless' has style "dispatchers," i.e., I can define
  ;; predicates for what filtering style to use for which token
  (use-package prescient
    :custom
    ;; (completion-styles '(prescient flex))
    ;; NOTE 2024-02-03: Flex is chosen as a backup in case nothing in prescient is
    ;; matched, which only happens if I'm clueless about what I'm searching for.
    ;; We prefer this over adding the fuzzy matching in `prescient-filter-method'
    ;; because we don't want a bunch of random results included in the filtered
    ;; prescient results and cluttering it
    (prescient-filter-method '(literal initialism regexp))
    (prescient-aggressive-file-save t)
    (prescient-sort-length-enable nil)
    (prescient-sort-full-matches-first t)
    (prescient-history-length 200)
    (prescient-frequency-decay 0.997)
    (prescient-frequency-threshold 0.05)
    :config
    (prescient-persist-mode 1))

  ;;; Orderless
  ;; Alternative and powerful completion style (i.e. filters candidates)
  (use-package orderless
    :custom
    (orderless-matching-styles
     '(orderless-regexp
       orderless-prefixes
       orderless-initialism
       ;; orderless-literal
       ;; orderless-flex
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-component-separator 'orderless-escapable-split-on-space)
    :config
    ;; Eglot forces `flex' by default.
    (add-to-list 'completion-category-overrides '(eglot (styles . (orderless flex)))))

  ;;; Hotfuzz
  ;; Faster version of the flex completion style.  Hotfuzz is a much faster
  ;; version of the built-in flex style.  See
  ;; https://github.com/axelf4/emacs-completion-bench#readme
  (use-package hotfuzz)
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-1
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Provide
  (provide 'krisb-completion)
#+end_src

*** =krisb-saving-state.el=
:PROPERTIES:
:CUSTOM_ID: krisb-saving-stateel
:END:

Configuration related to "saving a state," that is, storing or restoring anything about the point, window configuration, file, buffer, et cetera.
#+begin_src emacs-lisp :tangle "modules/krisb-saving-state.el"
  ;;; Register
  (use-package register
    :ensure nil
    :custom
    (register-preview-delay 0)
    (register-separator "  ")
    (register-use-preview 'traditional)
    (register-preview-display-buffer-alist
     '(display-buffer-at-bottom
       (window-height . fit-window-to-buffer)
       (preserve-size . (nil . t))
       (window-parameters . ((mode-line-format . none)
                             (no-other-window . t)))))
    :config
    (with-eval-after-load 'consult
      ;; Better than `consult-register'
      (setq register-preview-function #'consult-register-format)
      ;; Adds thin lines, sorting and hides the mode line of the register preview
      ;; window. Copied from https://github.com/minad/consult#use-package-example
      (advice-add #'register-preview :override #'consult-register-window)))

  ;;; Files
  ;; No-littering's `no-littering-theme-backups' sets the values for
  ;; `auto-save-file-name-transforms', `backup-directory-alist', and
  ;; `undo-tree-history-directory-alist'. Read its docstring for more information.

  ;;;; Backup
  ;; Backup files. "Emacs makes a backup for a file only the first time the file
  ;; is saved from the buffer that visits it."
  (setopt make-backup-files t
          backup-by-copying t         ; See (info "(emacs) Backup Copying")
          vc-make-backup-files t)     ; Still backup even if under version control

  ;; Numbering backups
  (setopt version-control t
          kept-new-versions 6
          kept-old-versions 2
          delete-old-versions t)

  ;; Modified from Doom Emacs. Backup files have names that are hashed.
  (defun krisb-backup-file-name-hash (fn file)
    "Hash the backup file name.
  A few places use the backup file name so paths don't get too long.

  Takes any FILE and return a hashed version."
    (let ((alist backup-directory-alist)
          backup-directory)
      (while alist
        (let ((elt (car alist)))
          (if (string-match (car elt) file)
              (setq backup-directory (cdr elt)
                    alist nil)
            (setq alist (cdr alist)))))
      (let ((file (funcall fn file)))
        (if (or (null backup-directory)
                (not (file-name-absolute-p backup-directory)))
            file
          (expand-file-name (sha1 (file-name-nondirectory file))
                            (file-name-directory file))))))
  (advice-add 'make-backup-file-name-1 :around #'krisb-backup-file-name-hash)

  ;;;; Auto-save
  (setopt auto-save-default t ; Only a local minor mode exists; this variable influences the global value
          auto-save-timeout 3
          auto-save-interval 150
          auto-save-no-message t
          auto-save-include-big-deletions t)

  (setopt delete-auto-save-files t
          kill-buffer-delete-auto-save-files nil)

  ;; Prevent auto-save from complaining about long file names by hashing them.
  ;; Copied from Doom Emacs.
  (defun krisb-auto-save-hash-file-name (&rest args)
    "Turn `buffer-file-name' into a hash.
  Then apply ARGS."
    (let ((buffer-file-name
           (if (or
                ;; Don't do anything for non-file-visiting buffers. Names
                ;; generated for those are short enough already.
                (null buffer-file-name)
                ;; If an alternate handler exists for this path, bow out. Most of
                ;; them end up calling `make-auto-save-file-name' again anyway, so
                ;; we still achieve this advice's ultimate goal.
                (find-file-name-handler buffer-file-name
                                        'make-auto-save-file-name))
               buffer-file-name
             (sha1 buffer-file-name))))
      (apply args)))
  (advice-add 'make-auto-save-file-name :around #'krisb-auto-save-hash-file-name)

  ;;;; Autosave-visited
  ;; Save visited files after an idea time
  (setopt auto-save-visited-interval 8
          auto-save-visited-predicate ; Value Inspired by `super-save'
          (lambda ()
            (or (< (save-restriction (widen) (count-lines (point-min) (point-max)))
                   5000)
                (derived-mode-p 'pdf-view-mode)))
          remote-file-name-inhibit-auto-save-visited nil)
  (add-hook 'on-first-file-hook #'auto-save-visited-mode)

  ;;;; Autorevert
  ;; Automatically update buffers as files are externally modified
  (use-package autorevert
    :diminish auto-revert-mode
    :ensure nil
    :hook (on-first-file . global-auto-revert-mode)
    :custom
    (auto-revert-interval 3)
    (auto-revert-avoid-polling t)
    (auto-revert-check-vc-info t)
    (auto-revert-verbose t))

  ;;; Provide
  (provide 'krisb-saving-state)
#+end_src

*** =krisb-persistence.el=
:PROPERTIES:
:CUSTOM_ID: krisb-persistenceel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-persistence.el"
  ;;; Savehist
  ;; Make history of certain things (e.g. minibuffer) persistent across sessions
  (use-package savehist
    :ensure nil
    :custom
    (history-length 10000)
    (history-delete-duplicates t)
    (savehist-save-minibuffer-history t)
    (savehist-autosave-interval 30)
    :config
    (dolist (var '(kill-ring
                   Info-history-list
                   last-kbd-macro
                   kmacro-ring
                   shell-command-history))
      (add-to-list 'savehist-additional-variables var))
    (savehist-mode 1))

  ;;; Saveplace
  ;; Save and restore the point's location in files
  (use-package saveplace
    :ensure nil
    :hook (on-first-file . save-place-mode)
    :custom
    (save-place-forget-unreadable-files t)
    (save-place-limit 3000))

  ;;; Bookmark
  (use-package bookmark
    :ensure nil
    :hook (on-buffer-file . bookmark-maybe-load-default-file)
    :custom
    (bookmark-save-flag 1)                 ; Save bookmarks file every new entry
    (bookmark-watch-bookmark-file 'silent) ; Reload bookmarks file without query
    (bookmark-fringe-mark 'bookmark-mark)
    (bookmark-sort-flag 'last-modified)
    (bookmark-use-annotations nil)
    (bookmark-version-control 'nospecial))

  ;;; Activities
  (use-package activities
    :pin gnu-elpa-devel
    :hook (kill-emacs . activities-save-all)
    :bind (("C-c a d" . activities-define)
           ("C-c a n" . activities-new)
           ("C-c a a" . activities-resume)
           ("C-c a g" . activities-revert)
           ("C-c a r" . activities-rename)
           ("C-c a D" . activities-discard)
           ("C-c a b" . activities-switch-buffer)
           ("C-c a B" . activities-switch)
           ("C-c a s" . activities-suspend)
           ("C-c a k" . activities-kill)
           ("C-c a l" . activities-list))
    :custom
    (activities-kill-buffers t)
    (activities-bookmark-store nil)
    (activities-bookmark-warnings t)
    :config
    (activities-mode 1)
    (activities-tabs-mode 1))

  ;;; Persist-state
  ;; Thin helper package that makes sure other packages' data are saved on-disk
  ;; via those packages' own saving utilities.  The problem this package aims to
  ;; resolve is data not being saved on disk when Emacs unexpectedly quits.
  (use-package persist-state
    :custom
    (persist-state-save-interval 600)
    (persist-state-wait-idle 3)
    :config
    (persist-state-mode 1))

  ;;; Savefold
  (use-package savefold
    :vc (:url "https://github.com/jcfk/savefold.el.git")
    :custom
    (savefold-backends '(outline
                         org
                         ;; origami
                         ;; hideshow
                         ))
    (savefold-directory (no-littering-expand-var-file-name "savefold"))
    :config
    (savefold-mode 1)

    ;; Hash file names.  Instead of using the absolute path of a file, turn that
    ;; absolute path into a hash.  This resolves the issue of file paths being
    ;; longer than what the OS permits.  See also `krisb-auto-save-hash-file-name'
    ;; and `krisb-backup-file-name-hash'.
    (el-patch-defun savefold-utils--get-attr-table-fpath (fpath)
      "Return the fpath of the attribute table file for FPATH.

  This naively replaces path slashes with ! (/a/b/c -> !a!b!c) leading to a chance
  of collision."
      (expand-file-name
       (el-patch-swap
         (string-replace "/" "!" (expand-file-name fpath))
         (sha1 (expand-file-name fpath)))
       savefold-directory)))
#+end_src

**** Persistent sessions
:PROPERTIES:
:CUSTOM_ID: persistent-sessions
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-persistence.el"
  ;;; Persistent desktops
  ;;;; Desktop
  ;; Save buffers across Emacs sessions
  (use-package desktop
    :ensure nil
    :custom
    (desktop-load-locked-desktop 'check-pid)
    (desktop-save 'ask-if-exists)
    (desktop-auto-save-timeout 3)
    (desktop-files-not-to-save
     (rx (or (regexp "\\(\\`/[^/:]*:\\|(ftp)\\'\\)")
             ;; Don't save files from other Emacs repos because sometimes they
             ;; have local variables that mess with desktop's loading of files
             (literal (expand-file-name "emacs-repos/" "~"))
             ;; Don't want to open my large org-agenda files which I'll open
             ;; eventually anyway
             (literal krisb-org-agenda-directory))))
    (desktop-globals-to-save '(desktop-missing-file-warning
                               tags-file-name
                               tags-table-list
                               search-ring
                               regexp-search-ring
                               ;; REVIEW 2024-10-13: The previews in
                               ;; `jump-to-register' cause errors when trying to
                               ;; visit a buffer or window which no longer exists.
                               ;; Removing it from the saved globals list is the
                               ;; workaround I choose for now.
                               ;; register-alist
                               file-name-history))
    (desktop-locals-to-save '(desktop-locals-to-save
                              truncate-lines
                              case-fold-search
                              case-replace
                              fill-column

                              overwrite-mode
                              change-log-default-name
                              line-number-mode

                              column-number-mode
                              size-indication-mode

                              buffer-file-coding-system
                              buffer-display-time

                              indent-tabs-mode
                              tab-width
                              indicate-buffer-boundaries

                              indicate-empty-lines
                              show-trailing-whitespace))

    (desktop-restore-eager 10)
    (desktop-restore-forces-onscreen nil)
    (desktop-restore-frames t)
    (desktop-restore-in-current-display nil)
    :config
    (desktop-save-mode 1)

    (defun krisb-desktop--save-narrowing ()
      "Save narrowed information.
  Taken from
  https://www.reddit.com/r/emacs/comments/162cjki/comment/jxzrthx/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1."
      (setq desktop-save-buffer
            (lambda (_d) (if (buffer-narrowed-p)
                             (list 'narrowed (point-min) (point-max))))))
    (add-hook 'text-mode-hook #'krisb-desktop--save-narrowing)
    (add-hook 'prog-mode-hook #'krisb-desktop--save-narrowing)

    (defun krisb-desktop--restore-narrowing (_f n misc &rest _)
      "Restore narrowing of buffer.
  Taken from
  https://www.reddit.com/r/emacs/comments/162cjki/comment/jxzrthx/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1."
      (when (and misc (eq (car misc) 'narrowed))
        (apply #'narrow-to-region (cdr misc))
        (message "Narrowed %s" n)))
    (advice-add 'desktop-restore-file-buffer :after #'krisb-desktop--restore-narrowing))

  ;;;; Easysession
  (use-package easysession
    :disabled t
    :diminish easysession-save-mode
    :custom
    (easysession-directory (no-littering-expand-var-file-name "easysession"))
    (easysession-save-interval (* 2 60))
    (easysession-mode-line-misc-info nil) ; I manually add to `global-mode-string' instead
    :init
    (add-hook 'emacs-startup-hook #'easysession-load-including-geometry 102)
    (add-hook 'emacs-startup-hook #'easysession-save-mode 102)
    :config
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'easysession--current-session-name))

    ;; Add session infor to `global-mode-string'
    (add-to-list 'global-mode-string `easysession-mode-line-misc-info-format)

    ;; Kill old session buffers before loading a new session.  Taken from
    ;; https://github.com/jamescherti/easysession.el?tab=readme-ov-file#how-to-make-easysession-kill-all-buffers-before-loading-a-session
    (defun krisb-easysession-kill-old-session-buffers ()
      (save-some-buffers t)
      (mapc #'kill-buffer
            (cl-remove-if
             (lambda (buffer)
               (string= (buffer-name buffer) messages-buffer-name))
             (buffer-list)))
      (delete-other-windows))
    (add-hook 'easysession-before-load-hook #'krisb-easysession-kill-old-session-buffers)
    (add-hook 'easysession-new-session-hook #'krisb-easysession-kill-old-session-buffers))

  ;;;; Psession
  (use-package psession
    :disabled t
    :custom
    (psession-auto-save-delay 60)
    :config
    (psession-mode 1)
    (psession-autosave-mode 1))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-2
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-persistence.el"
  ;;; Provide
  (provide 'krisb-persistence)
#+end_src

*** =krisb-windows.el=
:PROPERTIES:
:CUSTOM_ID: krisb-windowsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;; Window
  (use-package window
    :ensure nil
    :bind* ("M-o" . other-window)
    :bind (([remap other-window] . krisb-other-window-mru)
           :repeat-map other-window-repeat-map
           ("o" . krisb-other-window-mru))
    :custom
    (split-width-threshold 130)
    (split-height-threshold 80)
    (window-sides-vertical t)
    (window-resize-pixelwise t)
    (window-combination-resize t) ; Allow to resize existing windows when splitting?
    (fit-window-to-buffer-horizontally t)

    (switch-to-buffer-obey-display-actions t) ; As per suggestion of Mastering Emacs
    (switch-to-buffer-in-dedicated-window 'pop)
    :config
    ;; Modified version of "other-window-mru" taken from
    ;; https://karthinks.com/software/emacs-window-management-almanac/#the-back-and-forth-method
    ;; that accepts a prefix arg
    (defun krisb-other-window-mru (&optional arg)
      "Select the most recently used window on this frame."
      (interactive "p")
      (when-let ((windows-by-mru              ; Used `get-mru-window' as a reference
                  (sort (delq nil
                              (mapcar
                               (lambda (win)
                                 (when (and (not (eq win (selected-window)))
                                            (not (window-no-other-p win)))
                                   (cons (window-use-time win) win)))
                               (window-list-1 nil nil nil)))
                        :lessp #'>
                        :key #'car)))
        (select-window (cdr (nth (1- (min (length windows-by-mru) (or arg 1))) windows-by-mru)))))


    ;; More predictable (at least, if I use `krisb-other-window-mru') window
    ;; selection of `scroll-other-window' and `scroll-other-window-down'.  Taken
    ;; from
    ;; https://karthinks.com/software/emacs-window-management-almanac/#scroll-other-window--built-in
    (setq-default other-window-scroll-default
                  (lambda ()
                    (or (get-mru-window nil nil 'not-this-one-dummy)
                        (next-window)             ; Fall back to next window
                        (next-window nil nil 'visible)))))

  ;;; Stillness-mode
  ;; This package solves an annoyance: when invoking a tall minibuffer, if there
  ;; are other windows present with points low enough in their buffers, those
  ;; windows will scroll.  This is because points must be visible in buffers, so
  ;; Emacs must scroll to keep the point visible when e.g. tall minibuffer windows
  ;; are created.  As such, `stillness-mode' moves the points in existing buffers
  ;; lower such that Emacs does not need to scroll to keep them visible.
  ;;
  ;; 2025-04-07: I know of two other very similar packages: sinister.el
  ;; (https://github.com/positron-solutions/sinister) and mini-ontop.el
  ;; (https://github.com/hkjels/mini-ontop.el).  I have not had the time to
  ;; thoroughly test out the differences between each package (all of them seem to
  ;; have been written in a similar time period, and none of them compare and
  ;; contrast the merits with the other packages...), but for now I go with
  ;; stillness-mode.
  (use-package stillness-mode
    :config
    (stillness-mode 1))

  ;;; Tab-bar
  (use-package tab-bar
    :ensure nil
    :bind ( :map tab-prefix-map
            ("w" . tab-bar-move-window-to-tab)
            ("w" . tab-bar-move-window-to-tab)
            ("c" . tab-bar-change-tab-group)
            ("C-S-g" . tab-bar-move-tab-to-group)
            ("D" . tab-bar-close-group-tabs)
            :repeat-map krisb-tab-bar-repeat-map
            ("C-c <left>" . tab-bar-history-back)
            ("C-c <right>" . tab-bar-history-forward)
            :continue
            ("<left>" . tab-bar-history-back)
            ("<right>" . tab-bar-history-forward))
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-new-tab-choice 'clone)
    (tab-bar-close-last-tab-choice 'delete-frame)
    (tab-bar-select-tab-modifiers '(meta))
    (tab-bar-tab-hints t)
    (tab-bar-show t)
    (tab-bar-separator " ")
    (tab-bar-format
     '(tab-bar-format-tabs-groups
       tab-bar-separator
       tab-bar-format-align-right
       tab-bar-format-global))
    :config
    (tab-bar-mode 1)
    (tab-bar-history-mode 1))

  ;;; Ace-window
  (use-package ace-window
    :bind (("C-; w" . ace-window)
           ("C-; W" . krisb-ace-window-prefix))
    :custom
    (aw-scope 'global)
    (aw-swap-invert t)
    (aw-background t)
    (aw-display-mode-overlay nil)
    (aw-dispatch-always t) ; Dispatch available even when less than three windows are open
    (aw-minibuffer-flag t)
    (aw-keys '(?q ?w ?e ?r ?t ?y ?u ?i ?p))
    (aw-fair-aspect-ratio 3)
    :custom-face
    (aw-leading-char-face ((t (:height 3.0 :weight bold))))
    :config
    ;; Is not a defcustom, so use setq
    (setq aw-dispatch-alist
          '((?k aw-delete-window "Delete window")
            (?K delete-other-windows "Delete other windows")
            (?s aw-swap-window "Swap windows")
            (?m krisb-ace-window-take-over-window "Go to window and delete current window")
            (?c aw-copy-window "Copy window")
            (?o aw-flip-window "Other window")
            (?v krisb-ace-window-set-other-window "Set to other-scroll-window's window")
            (?b aw-switch-buffer-in-window "Switch to buffer in window")
            (?B aw-switch-buffer-other-window "Change buffer in window")
            (?2 aw-split-window-vert "Split vertically")
            (?3 aw-split-window-horz "Split horizontally")
            (?+ aw-split-window-fair "Split heuristically") ; See `aw-fair-aspect-ratio'
            (?? aw-show-dispatch-help)))

    ;; Taken from Karthink's config
    (defun krisb-ace-window-take-over-window (window)
      "Move from current window to WINDOW.

    Delete current window in the process."
      (let ((buf (current-buffer)))
        (if (one-window-p)
            (delete-frame)
          (delete-window))
        (aw-switch-to-window window)
        (switch-to-buffer buf)))

    ;; Taken from Karthink's config
    (defun krisb-ace-window-prefix ()
      "Use `ace-window' to display the buffer of the next command.
    The next buffer is the buffer displayed by the next command invoked
    immediately after this command (ignoring reading from the minibuffer).
    Creates a new window before displaying the buffer. When
    `switch-to-buffer-obey-display-actions' is non-nil, `switch-to-buffer'
    commands are also supported."
      (interactive)
      (display-buffer-override-next-command
       (lambda (buffer _)
         (let (window type)
           (setq
            window (aw-select (propertize " ACE" 'face 'mode-line-highlight))
            type 'reuse)
           (cons window type)))
       nil "[ace-window]")
      (message "Use `ace-window' to display next command buffer..."))

    ;; Based off of similar code taken from
    ;; https://karthinks.com/software/emacs-window-management-almanac/#scroll-other-window--built-in
    (defun krisb-ace-window-set-other-window (window)
      "Set WINDOW as the \"other window\" for the current one.
    \"Other window\" is the window scrolled by `scroll-other-window' and
    `scroll-other-window-down'."
      (setq-local other-window-scroll-buffer (window-buffer window))))

  ;;; Pinching-margins
  (use-package pinching-margins
    :ensure nil
    :custom
    (pinching-margins-visible-width 140)
    (pinching-margins-ignore-predicates
     '(window-minibuffer-p
       (lambda (win)
         (with-selected-window win
           (member major-mode '(exwm-mode doc-view-mode))))
       (lambda (win)
         (cl-some (lambda (regexp) (string-match-p regexp (buffer-name (window-buffer win))))
                  '("^[[:space:]]*\\*")))
       (lambda (win)
         (with-selected-window win (bound-and-true-p olivetti-mode)))))
    (pinching-margins-force-predicates
     '((lambda (win)
         (with-selected-window win
           (member major-mode '())))
       (lambda (win)
         (cl-some (lambda (regexp) (string-match-p regexp (buffer-name (window-buffer win))))
                  '("^\\*vc-")))))
    :config
    (pinching-margins-mode 1))

  ;;; Window-x
  ;; Awesome new window moving commands in Emacs 31.1 that took the former role of
  ;; transpose-frame.el.  See for more information about the commands themselves
  ;; as well as a little background on the development challenges that overcome to
  ;; make these commands possible:
  ;; https://p.bauherren.ovh/blog/tech/new_window_cmds.
  (use-package window-x
    :ensure nil
    :bind ( :map window-prefix-map
            ("t" . transpose-window-layout) ; Diagonal reflection
            ;; Rotate window layout
            ("r" . rotate-window-layout-clockwise)
            ("R" . rotate-window-layout-counterclockwise)
            ;; Flipping
            ("f" . flip-window-layout-horizontally)
            ("F" . flip-window-layout-vertically)
            ;; Rotate buffers (keep window placements)
            ("c" . rotate-windows)
            ("C" . rotate-windows-back)
            ;; Repeat-mode map
            :repeat-map krisb-window-x-repeat-map
            ("t" . transpose-window-layout) ; Diagonal reflection
            ("r" . rotate-window-layout-clockwise)
            ("R" . rotate-window-layout-counterclockwise)
            ("f" . flip-window-layout-horizontally)
            ("F" . flip-window-layout-vertically)
            ("c" . rotate-windows)
            ("C" . rotate-windows-back)))
#+end_src

**** Setting =display-buffer-alist=
:PROPERTIES:
:CUSTOM_ID: setting-display-buffer-alist
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;;; Display-buffer-alist
  (with-eval-after-load 'window
  ;;;;; Messages
    (setq display-buffer-alist
          `((,(rx (literal messages-buffer-name))
             (display-buffer-in-side-window)
             (window-height . 0.36)
             (side . top)
             (slot . 1)
             (post-command-select-window . t))
  ;;;;; Org-mime
            ("OrgMimeMailBody"
             (display-buffer-same-window))

  ;;;;; Diff-mode
            ((major-mode . diff-mode)
             (display-buffer-same-window))

  ;;;;; VC
            ((or . ((major-mode . vc-dir-mode)
                    (major-mode . vc-git-log-view-mode)

                    (major-mode . vc-git-region-history-mode)))
             (display-buffer-same-window))
            ("\\*\\vc-\\(incoming\\|outgoing\\|git : \\).*"
             (display-buffer-reuse-mode-window display-buffer-below-selected)
             (window-height . 20)
             (dedicated . t)
             (preserve-size . (t . t)))
            ("\\*vc-log\\*"
             (display-buffer-reuse-mode-window display-buffer-below-selected)
             (dedicated . t))

  ;;;;; Help
            ((major-mode . help-mode)
             (display-buffer-reuse-window display-buffer-pop-up-window display-buffer-below-selected)
             (window-height . shrink-window-if-larger-than-buffer))

  ;;;;; Eldoc
            ("^\\*eldoc"
             (display-buffer-at-bottom)
             (post-command-select-window . t)
             (window-height . shrink-window-if-larger-than-buffer)
             (window-parameters . ((mode-line-format . none))))

  ;;;;; Org and calendar
            ("\\*\\(?:Org Select\\|Agenda Commands\\)\\*"
             (display-buffer-in-side-window)
             (window-height . fit-window-to-buffer)
             (side . top)
             (slot . -2)
             (preserve-size . (nil . t))
             (window-parameters . ((mode-line-format . none)))
             (post-command-select-window . t))
            ("\\*Calendar\\*"
             (display-buffer-below-selected)
             (window-height . fit-window-to-buffer))

  ;;;;; Embark
            ("\\*Embark Actions\\*"
             (display-buffer-in-direction)
             (window-height . fit-window-to-buffer)
             (direction . above)
             (window-parameters . ((no-other-window . t)
                                   (mode-line-format . none))))

  ;;;;; Occur
            ("\\*Occur"
             (display-buffer-reuse-mode-window display-buffer-pop-up-window display-buffer-below-selected)
             (window-height . fit-window-to-buffer)
             (post-command-select-window . t))

  ;;;;; Denote-interface
            ((major-mode . denote-interface-mode)
             (display-buffer-same-window))

  ;;;;; Org-roam
            ("\\*org-roam\\*"
             (display-buffer-below-selected)
             (window-height . fit-window-to-buffer))

  ;;;;; Customize buffers
            ("\\*Customize Group:"
             (display-buffer-reuse-mode-window display-buffer-pop-up-window display-buffer-below-selected))

  ;;;;; Notmuch-hello buffer
            ("\\*notmuch-hello\\*"
             (display-buffer-in-tab display-buffer-full-frame)
             (tab-group . "media"))))

  ;;;;; Xref
    (with-eval-after-load 'xref
      (add-to-list 'display-buffer-alist
                   `((or (major-mode . xref--xref-buffer-mode)
                         (,(rx (literal xref-buffer-name))))
                     (display-buffer-below-selected display-buffer-at-bottom)
                     (window-height . 0.25)))

      ;; For buffers opened by xref
      (add-to-list 'display-buffer-alist
                   '(((category . xref)
                      (display-buffer-reuse-window display-buffer-use-some-window)
                      (some-window . mru))))))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-3
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;; Provide
  (provide 'krisb-windows)
#+end_src

*** =krisb-buffers.el=
:PROPERTIES:
:CUSTOM_ID: krisb-buffersel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-buffers.el"
  ;;; Bufler
  (use-package bufler
    :custom
    (bufler-groups
     (bufler-defgroups
       (group
        ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
        ;; `org-directory' is not yet defined).
        (dir (if (bound-and-true-p org-directory)
                 org-directory
               "~/org"))
        (group
         ;; Subgroup collecting indirect Org buffers, grouping them by file.
         ;; This is very useful when used with `org-tree-to-indirect-buffer'.
         (auto-indirect)
         (auto-file))
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode))
       ;; All buffers under "~/.emacs.d" (or wherever it is).
       (dir user-emacs-directory)
       (group
        ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
        (group-or "*Help/Info*"
                  (mode-match "*Help*" (rx bos "help-"))
                  (mode-match "*Info*" (rx bos "info-"))))
       (group
        ;; Subgroup collecting all special buffers (i.e. ones that are not file-backed),
        ;; except certain ones like Dired, Forge, or Magit buffers (which are allowed to
        ;; fall through to other groups, so they end up grouped with their project buffers).
        (group-not "*Special"
                   (group-or "*Special*"
                             (mode-match "Magit" (rx bos "magit-"))
                             (mode-match "Forge" (rx bos "forge-"))
                             (mode-match "Dired" (rx bos "dired"))
                             (mode-match "grep" (rx bos "grep-"))
                             (mode-match "compilation" (rx bos "compilation-"))
                             (auto-file)))
        (group
         ;; Subgroup collecting these "special special" buffers
         ;; separately for convenience.
         (name-match "**Special**"
                     (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
         ;; Subgroup collecting all other Magit buffers, grouped by directory.
         (mode-match "*Magit* (non-status)" (rx bos "magit-"))
         (auto-directory))
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
       (group
        ;; Subgroup collecting buffers in a version-control project,
        ;; grouping them by directory (using the parent project keeps,
        ;; e.g. git worktrees with their parent repos).
        (auto-parent-project)
        (group-not "special"
                   ;; This subgroup collects special buffers so they are
                   ;; easily distinguished from file buffers.
                   (group-or "Non-file-backed and neither Dired nor Magit"
                             (mode-match "Magit Status" (rx bos "magit-status"))
                             (mode-match "Dired" (rx bos "dired-"))
                             (auto-file))))
       ;; Group remaining buffers by directory
       (auto-directory))))

  ;;; Ibuffer
  (use-package ibuffer
    :bind (([remap list-buffers] . ibuffer))
    :bind* ( :map ibuffer-mode-map
             ("SPC" . scroll-up-command)
             ("DEL" . scroll-down-command))
    :custom
    (ibuffer-save-with-custom nil)
    (ibuffer-default-sorting-mode 'recency)
    (ibuffer-jump-offer-only-visible-buffers t)
    (ibuffer-old-time 48)
    (ibuffer-expert nil)
    (ibuffer-show-empty-filter-groups t)
    (ibuffer-filter-group-name-face '(:inherit (success bold)))
    ;; Be aware that this value gets overridden by `all-the-icons-ibuffer-formats'
    ;; and `nerd-icons-ibuffer-mode'
    (ibuffer-formats
     '((mark modified read-only locked
             " " (name 18 18 :left :elide)
             " " (krisb-size 9 -1 :right)
             " " (mode 16 16 :right :elide)
             " " filename-and-process)
       (mark " " (name 16 -1) " " filename)))
    :config
    (define-ibuffer-column krisb-size
      (:name "Size"
             :inline t
             :header-mouse-map ibuffer-size-header-map)
      (file-size-human-readable (buffer-size))))

  ;;; Nerd-icons-ibuffer
  (use-package nerd-icons-ibuffer
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
    :custom
    (nerd-icons-ibuffer-color-icon t)
    (nerd-icons-ibuffer-icon-size 0.97)
    (nerd-icons-ibuffer-formats           ; See my value for `ibuffer-formats'
     '((mark modified read-only locked
             " " (icon 2 2 :right)
             " " (name 18 18 :left :elide)
             " " (size-h 12 -1 :right)
             " " (mode+ 16 16 :right :elide)
             " " filename-and-process+)
       (mark " " (name 16 -1) " " filename))))

  ;;; Buffer-terminator
  (use-package buffer-terminator
    :disabled t
    :custom
    (buffer-terminator-inactivity-timeout (* 60 60)) ; 60 minutes
    (buffer-terminator-interval (* 60 10))           ; 10 minutes
    (buffer-terminator-verbose t)
    :init
    (defun krisb-buffer-terminator-predicate ()
      "Buffer predicate for buffer-terminator.
  Meant to be the value of `buffer-terminator-predicate'.  See its
  docstring for the expected return values."
      (let* ((buffer (current-buffer))
             (buffer-name (buffer-name buffer))
             (file (or (buffer-file-name) (buffer-base-buffer buffer))))
        (cond
         ((and file
               (functionp 'org-agenda-files)
               (member file (org-agenda-files)))
          :keep)
         ((buffer-local-value 'org-capture-mode buffer)
          :keep)
         ((and file (file-in-directory-p file user-emacs-directory))
          :keep)
         ((string-match-p "^marginalia\\.org$" buffer-name)
          :keep)
         ((string-match-p "^diary$" buffer-name)
          :keep)
         (t nil))))                       ; buffer-terminator decides
    :config
    ;; This is a variable currently so we use `setq'
    (setq buffer-terminator-rules-alist
          '((keep-buffer-property . special)
            (keep-buffer-property . process)
            (keep-buffer-property . visible)
            (kill-buffer-property . inactive)
            (call-function . krisb-buffer-terminator-predicate)))

    (buffer-terminator-mode 1))

  ;;; Provide
  (provide 'krisb-buffers)
#+end_src

*** =krisb-expansion.el=
:PROPERTIES:
:CUSTOM_ID: krisb-expansionel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-expansion.el"
  ;;; Abbrev
  ;; Automatically correct typed strings (e.g. words).  Most useful for correcting
  ;; spelling mistakes as they are made.
  (use-package abbrev
    :ensure nil
    :diminish
    :custom
    (save-abbrevs 'silently)
    (abbrev-suggest t)
    (abbrev-suggest-hint-threshold 2)
    :config
    (defun krisb-abbrev-todo-keyword--string ()
      "Select a todo keyword."
      ;; OPTIMIZE 2024-10-12: Don't rely on `hl-todo-keyword-faces'
      (completing-read "Keyword: " (split-string (key-description nil hl-todo-keyword-faces))))

    (defun krisb-abbrev-todo-keyword ()
      "Insert the a todo keyword."
      (insert (krisb-abbrev-todo-keyword--string)))

    (defun krisb-abbrev-current-date--string ()
      "Return the current date formatted."
      (format-time-string "%F"))

    (defun krisb-abbrev-current-date ()
      "Insert the current date."
      (insert (krisb-abbrev-current-date--string)))

    (defun krisb-abbrev-todo-keyword-and-date ()
      "Insert a todo keyword followed by the current date and colon."
      (insert (krisb-abbrev-todo-keyword--string) " " (krisb-abbrev-current-date--string) ":"))
    :config
    ;; Enable the mode globally
    (setq-default abbrev-mode t)

    ;; Allow abbrevs with a prefix colon, semicolon, or underscore. See:
    ;; <https://protesilaos.com/codelog/2024-02-03-emacs-abbrev-mode/>.
    (abbrev-table-put global-abbrev-table :regexp "\\(?:^\\|[\t\s]+\\)\\(?1:[:;_].*\\|.*\\)")

    ;; Predefined abbrevs
    (define-abbrev global-abbrev-table ";t" "" #'krisb-abbrev-todo-keyword)
    (define-abbrev global-abbrev-table ";d" "" #'krisb-abbrev-current-date)
    (define-abbrev global-abbrev-table ";td" "" #'krisb-abbrev-todo-keyword-and-date))

  ;;; Dabbrev
  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    :ensure nil
    :config
    (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
    (dolist (mode '(doc-view-mode
                    pdf-view-mode
                    tags-table-mode))
      (add-to-list 'dabbrev-ignored-buffer-modes mode)))

  ;;; Hippie-expand
  (use-package hippie-exp
    :ensure nil
    :bind ([remap dabbrev-expand] . hippie-expand))

  ;;; Provide
  (provide 'krisb-expansion)
#+end_src

*** =krisb-formatting.el=
:PROPERTIES:
:CUSTOM_ID: krisb-formattingel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-formatting.el"
  ;;; Apheleia
  ;; Quality code formatting for (arbitrarily) many languages
  (use-package apheleia
    ;; For AUR:
    ;; :ensure-system-package ((black . python-black)
    ;;                         (prettier)
    ;;                         (clang-format . clang-format-all-git)
    ;;                         (latexindent . texlive-binextra)
    ;;                         (stylua)
    ;;                         (google-java-format)
    ;;                         (shfmt)
    ;;                         (rustfmt))
    :hook (apheleia-post-format . delete-trailing-whitespace)
    :custom
    (apheleia-mode-lighter "")
    (apheleia-remote-algorithm 'local)

    (apheleia-log-only-errors t)
    (apheleia-log-debug-info nil)         ; Can be useful to set to non-nil in order to temporarily debug
    (apheleia-hide-log-buffers nil)

    (apheleia-formatters-respect-fill-column t)
    (apheleia-formatters-respect-indent-level t)
    :config
    ;; Configure `apheleia-formatters' and `apheleia-mode-alist' here. I use setf
    ;; instead of defining the variables directly so that it is agnostic to any
    ;; package changes. Take a look at the `format-all' package for how to install
    ;; particular formatters as well as their proper CLI commands. Namely, inspect
    ;; `format-all-formatters'.

    ;; Major modes
    (setf
     (alist-get 'lua-mode apheleia-mode-alist) '(stylua)
     (alist-get 'ruby-mode apheleia-mode-alist) '(rufo)
     (alist-get 'haskell-mode apheleia-mode-alist) '(fourmolu))

    ;; Formatters
    (setf
     (alist-get 'black apheleia-formatters)
     '("black"
       "-l 80"
       "-")
     (alist-get 'google-java-format apheleia-formatters)
     '("google-java-format"
       "--aosp"
       "--skip-removing-unused-imports"
       "-")
     (alist-get 'stylua apheleia-formatters)
     `("stylua"
       "--indent-type" "Spaces"
       "--line-endings" "Unix"
       "--column-width" ,(number-to-string fill-column)
       "--quote-style" "ForceDouble"
       "-")
     (alist-get 'latexindent apheleia-formatters)
     '("latexindent"
       "--cruft=/tmp/"
       "--logfile"
       "indent.log")
     (alist-get 'rufo apheleia-formatters)
     '("rufo"
       "--simple-exit"
       "--filename"
       filepath)
     (alist-get 'fourmolu apheleia-formatters)
     '("fourmolu")
     (alist-get 'latexindent apheleia-formatters)
     '("latexindent"
       ;; 4-space indentation is more readable
       "-y=defaultIndent:'    '"
       "--cruft=/tmp/" "--logfile" "indent.log"))

    ;; Custom formatters
    (cl-defun krisb-apheleia-format-org-buffer
        (&key buffer scratch callback &allow-other-keys)
      "Format an Org BUFFER.
  Use SCRATCH as a temporary buffer and CALLBACK to apply the
  transformation.

  For more implementation detail, see `apheleia--run-formatter-function'."
      (with-current-buffer scratch
        (funcall (with-current-buffer buffer major-mode))
        (setq-local indent-line-function (buffer-local-value 'indent-line-function buffer)
                    indent-tabs-mode (buffer-local-value 'indent-tabs-mode buffer))
        (goto-char (point-min))
        (let ((inhibit-message t)
              (message-log-max nil))
          (org-align-tags 'all)
          (krisb-org-ext-add-blank-lines 'whole-buffer)
          (indent-region (point-min) (point-max)))
        (funcall callback)))
    (add-to-list 'apheleia-mode-alist '(org-mode . krisb-org-formatter))
    (add-to-list 'apheleia-formatters '(krisb-org-formatter . krisb-apheleia-format-org-buffer)))

  ;;; Krisb-indentation
  (use-package krisb-indentation
    :ensure nil
    :bind ([remap indent-region] . krisb-format-buffer-indentation))

  ;;; Provide
  (provide 'krisb-formatting)
#+end_src

** Appearance
:PROPERTIES:
:CUSTOM_ID: appearance
:END:

*** =krisb-themes.el=
:PROPERTIES:
:CUSTOM_ID: krisb-themesel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-themes.el"
  (require 'color)

  ;;; Krisb-themes-ext
  (use-package krisb-themes-ext
    :ensure nil
    :demand t
    :bind (("<f8>" . krisb-themes-ext-theme-switcher)
           ("<f9>" . krisb-themes-ext-toggle-window-transparency))
    :custom
    (krisb-themes-ext-light 'modus-operandi)
    (krisb-themes-ext-dark 'modus-vivendi)
    :config
    (krisb-theme-ext-enable-theme-time-of-day 8 19))

  ;;; Modus-themes
  (use-package modus-themes
    :custom
    (modus-themes-custom-auto-reload t) ; Only applies to `customize-set-variable' and related
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs nil)
    (modus-themes-mixed-fonts t)
    (modus-themes-variable-pitch-ui nil)
    (modus-themes-prompts '(semibold))
    (modus-themes-completions '((matches . (semibold))
                                (selection . (regular))))
    (modus-themes-headings '((0 . (semibold 1.1))
                             (1 . (regular 1.1))
                             (2 . (regular 1.1))
                             (agenda-date . (1.1))
                             (agenda-structure . (variable-pitch 1.2))
                             (t . (regular 1.0))))
    :config
    ;; Overrides
    (setopt modus-themes-common-palette-overrides
            `(;; Completion
              (fg-completion-match-0 fg-main) ; See (info "(modus-themes) Make headings more or less colorful")
              (fg-completion-match-1 fg-main)
              (fg-completion-match-2 fg-main)
              (fg-completion-match-3 fg-main)
              (bg-completion-match-0 bg-blue-intense)
              (bg-completion-match-1 bg-yellow-intense)
              (bg-completion-match-2 bg-cyan-intense)
              (bg-completion-match-3 bg-red-intense)

              ;; "Invisible" border in mode line. See (info "(modus-themes) Make the
              ;; mode line borderless")
              (border-mode-line-active bg-mode-line-active)
              (border-mode-line-inactive bg-mode-line-inactive)

              ;; Headings
              (fg-heading-1 red-faint)
              (fg-heading-6 rainbow-0)

              ;; Make the fringe invisible
              (fringe unspecified)

              ;; More noticeable block (e.g. org) backgrounds
              (bg-prose-block-contents bg-active-value)

              ;; Region
              (fg-region unspecified)
              (bg-region bg-dim))
            modus-operandi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#cab9b2")
              (fg-mode-line-active        "#000000")
              (bg-mode-line-inactive      "#dfd9cf")
              (fg-mode-line-inactive      "#585858")


              )
            modus-vivendi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#484d67")
              (fg-mode-line-active        "#ffffff")
              (bg-mode-line-inactive      "#292d48")
              (fg-mode-line-inactive      "#969696")))

    ;; Set up essential faces
    (krisb-modus-themes-setup-faces
     "mode-line"
     (set-face-attribute 'mode-line-active nil
                         :background bg-mode-line-active
                         :box `( :line-width 3
                                 :color ,bg-mode-line-active))

     (let ((bg-color (cond
                      ((eq theme krisb-themes-ext-dark)
                       (color-darken-name bg-mode-line-inactive 13))
                      ((eq theme krisb-themes-ext-light)
                       (color-lighten-name bg-mode-line-inactive 13)))))
       (set-face-attribute 'mode-line-inactive nil
                           :background bg-color
                           :box `( :line-width 3
                                   :color ,bg-color))))

    (krisb-modus-themes-setup-faces
     "cursor"
     (set-face-attribute 'cursor nil :background magenta-cooler))

    (krisb-modus-themes-setup-faces
     "fringe"
     (set-face-background 'fringe (face-attribute 'default :background)))

    (krisb-modus-themes-setup-faces
     "font-lock"
     ;; As described in (info "(modus-themes) DIY Measure color contrast"), I can
     ;; check for contrast by making sure the color contrast (relative luminance)
     ;; between the foreground and background color is at least 7:1.
     ;;
     ;; Like:
     ;;    (modus-themes-contrast (modus-themes-with-colors bg-main) (face-foreground 'font-lock-function-call-face))
     (cond
      ((string-match "^modus-operandi" (symbol-name theme))
       (set-face-attribute 'font-lock-function-call-face nil :foreground "#161BA1"))
      ((string-match "^modus-vivendi" (symbol-name theme))
       (set-face-attribute 'font-lock-function-call-face nil :foreground "#66B1F2")))))

  ;;; Cursory
  ;; Global and local cursor presets
  (use-package cursory
    :hook ((prog-mode . (lambda () (cursory-set-preset 'code :local)))
           ((org-mode markdown-mode git-commit-setup log-edit-mode message-mode) . (lambda () (cursory-set-preset 'prose :local))))
    :custom
    (cursory-latest-state-file (no-littering-expand-var-file-name "cursory/cursory-latest-state"))
    (cursory-presets
     '((code
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1)
       (prose
        :cursor-type (bar . 2)
        :blink-cursor-mode -1
        :cursor-in-non-selected-windows (hbar . 3))
       (default)
       (t                                 ; The fallback values
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1
        :blink-cursor-blinks 10
        :blink-cursor-delay 5
        :blink-cursor-interval 0.5)))
    :config
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (when (file-exists-p cursory-latest-state-file)
      (cursory-set-preset (or (cursory-restore-latest-preset) 'default)))

    ;; Persist latest preset used across Emacs sessions
    (cursory-mode 1))


  ;;; Lin
  ;; Lin is a stylistic enhancement for Emacs' built-in `hl-line-mode'. It remaps
  ;; the `hl-line' face (or equivalent) buffer-locally to a style that is optimal
  ;; for major modes where line selection is the primary mode of interaction.
  (use-package lin
    :custom
    (lin-face 'lin-cyan)
    :config
    (lin-global-mode 1)

    (add-to-list 'lin-mode-hooks 'LaTeX-mode-hook))

  ;;; Pulsar
  ;; Alternative to `pulse.el'
  (use-package pulsar
    :custom
    (pulsar-pulse t)
    (pulsar-face 'pulsar-red)
    (pulsar-delay 0.05)
    (pulsar-iterations 5)
    :config
    (pulsar-global-mode 1))

  ;;; Provide
  (provide 'krisb-themes)
#+end_src

*** =krisb-fonts.el=
:PROPERTIES:
:CUSTOM_ID: krisb-fontsel
:END:

This section is for setting up fonts as well as how they appear.

Particularly useful packages for the /display/ of certain punctuation and typography are =ligature= and =astute=.
#+begin_src emacs-lisp :tangle "modules/krisb-fonts.el"
  ;;; Fontaine
  ;; Define then apply face presets
  (use-package fontaine
    :demand t
    :custom
    (fontaine-latest-state-file (no-littering-expand-var-file-name "fontaine/fontaine-latest-state.eld"))
    (fontaine-presets
     '((default-wsl2
        :default-height 180
        :inherit iosevka-variants)
       (iosevka-variants
        ;; NOTE 2025-04-14: On Arch Linux, Iosevka fonts have associated packages
        ;; for each variant in the AUR (though not necessarily the Nerd Fonts
        ;; versions).
        :default-family "Iosevka SS 11 Nerd Font" ; 2025-04-14: Must be a bug that there is a space between "SS" and "11" in the font name
        :fixed-pitch-family "Iosevka Nerd Font"
        :mode-line-active-family "Iosevka Aile Nerd Font"
        :mode-line-inactive-family "Iosevka Aile Nerd Font")
       ;; Below are the shared fallback properties. I leave them there also as
       ;; reference for all possible properties
       (t
        ;; Alternatives:
        :default-family "Iosevka Term SS04"
        :default-weight regular
        :default-slant normal
        :default-width normal
        :default-height 165

        ;; Alternatives
        ;; "Hack Nerd Font Mono"
        :fixed-pitch-family "Iosevka"
        :fixed-pitch-weight nil
        :fixed-pitch-slant nil
        :fixed-pitch-width nil
        :fixed-pitch-height nil

        :fixed-pitch-serif-family nil
        :fixed-pitch-serif-weight nil
        :fixed-pitch-serif-slant nil
        :fixed-pitch-serif-width nil
        :fixed-pitch-serif-height nil

        ;; Alternatives:
        ;; "LiterationSerif Nerd Font"       ; Variable
        ;; "Latin Modern Mono Prop"          ; Monospace
        ;; "Sans Serif"
        ;; "Open Sans" (1.1 height)
        :variable-pitch-family "Overpass Nerd Font Propo"
        :variable-pitch-weight nil
        :variable-pitch-slant nil
        :variable-pitch-width nil
        :variable-pitch-height 1.2

        :mode-line-active-family "JetBrainsMono Nerd Font"
        :mode-line-active-weight nil
        :mode-line-active-slant nil
        :mode-line-active-width nil
        :mode-line-active-height 0.93

        :mode-line-inactive-family "JetBrainsMono Nerd Font"
        :mode-line-inactive-weight nil
        :mode-line-inactive-slant nil
        :mode-line-inactive-width nil
        :mode-line-inactive-height 0.93

        :header-line-family nil
        :header-line-weight nil
        :header-line-slant nil
        :header-line-width nil
        :header-line-height 1.0

        :line-number-family nil
        :line-number-weight nil
        :line-number-slant nil
        :line-number-width nil
        :line-number-height nil

        :tab-bar-family "Overpass Nerd Font"
        :tab-bar-weight nil
        :tab-bar-slant nil
        :tab-bar-width nil
        :tab-bar-height 0.93

        :tab-line-family nil
        :tab-line-weight nil
        :tab-line-slant nil
        :tab-line-width nil
        :tab-line-height nil


        :bold-slant nil
        :bold-weight bold
        :bold-width nil
        :bold-height nil

        :italic-family nil
        :italic-weight nil
        :italic-slant italic
        :italic-width nil
        :italic-height nil

        :line-spacing nil)))
    :config
    ;; 2025-04-14: I manually create the parent directory if it doesn't already
    ;; exist; this is not yet implemented upstream, so I do it manually here for
    ;; fresh installs of Emacs.
    (make-directory (file-name-directory fontaine-latest-state-file) t)

    ;; Set the last preset or fall back to desired style from `fontaine-presets'
    (when (file-exists-p fontaine-latest-state-file)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default)))

    ;; Persist the latest font preset when closing/starting Emacs and while
    ;; switching between themes.
    (fontaine-mode 1)

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))

  ;;; Mixed-pitch
  ;; Locally remap default face to variable-pitch.
  (use-package mixed-pitch
    :diminish
    :custom
    ;; We don't want to set the height of variable-pitch faces because
    ;; non-variable-pitch faces will be "out of sync" with the height.  Therefore,
    ;; to have larger font sizes in these buffers, we have to remap those faces
    ;; manually and locally.
    (mixed-pitch-set-height nil)
    (mixed-pitch-variable-pitch-cursor nil))

  ;;; Ligature
  ;; Ligatures!  Be aware that this differs from `prettify-symbols-mode' because
  ;; ligatures are provided by and must be supported by the particular font.  See
  ;; for configuration examples: https://github.com/j/wiki
  (use-package ligature
    :hook (window-setup . global-ligature-mode)
    :config
    ;; Enables simple HTML ligations for web-related major modes using the string
    ;; notation to create ligations
    (ligature-set-ligatures
     '(html-mode nxml-mode web-mode)
     '("<!--" "-->" "</>" "</" "/>" "://"))

    ;; Enable all Iosevka ligatures in programming modes.  Taken from
    ;; https://github.com/mickeynp/ligature.el/wiki#iosevka
    (ligature-set-ligatures
     '(prog-mode conf-mode)
     '("<---" "<--"  "<<-" "<-" "->" "-->" "--->" "<->" "<-->" "<--->" "<---->" "<!--"
       "<==" "<===" "<=" "=>" "=>>" "==>" "===>" ">=" "<=>" "<==>" "<===>" "<====>" "<!---"
       "<~~" "<~" "~>" "~~>" "::" ":::" "==" "!=" "===" "!=="
       ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+:" "-:" "=:" "<******>" "++" "+++")))

  ;;; Astute.el
  ;; Redisplay typographical punctuation (e.g., em-dashes as "—" and en-dashes as
  ;; "–")
  (use-package astute
    :hook (text-mode . astute-mode)
    :custom
    (astute-lighter "")
    (astute-prefix-single-quote-exceptions
     '("bout"
       "em"
       "n'"
       "cause"
       "round"
       "twas"
       "tis")))

  ;;; Prettify-symbols-mode
  (setopt prettify-symbols-unprettify-at-point 'right-edge)

  ;; Org-mode
  (defun krisb-prettify-symbols--org-mode-setup ()
    "Set up pretty symbols in `org-mode'."
    (add-to-list 'prettify-symbols-alist '("->" . ?→))
    (add-to-list 'prettify-symbols-alist '("<-" . ?←)))
  (add-hook 'org-mode-hook #'krisb-prettify-symbols--org-mode-setup)

  ;; Prog-mode
  (defun krisb-prettify-symbols--prog-mode-setup ()
    "Set up pretty symbols in `prog-mode'."
    (add-to-list 'prettify-symbols-alist '("->" . ?→))
    (add-to-list 'prettify-symbols-alist '("<-" . ?←))
    (add-to-list 'prettify-symbols-alist '("<->" . ?↔))
    (add-to-list 'prettify-symbols-alist '("lambda" . ?λ)))
  (add-hook 'prog-mode-hook #'krisb-prettify-symbols--prog-mode-setup)

  ;;; Show-font
  ;; Best font previewer
  (use-package show-font)

  ;;; Default-text-scale
  ;; Text-scale-mode but Emacs-wide
  (use-package default-text-scale)

  ;;; Provide
  (provide 'krisb-fonts)
#+end_src

*** =krisb-mode-line.el=
:PROPERTIES:
:CUSTOM_ID: krisb-mode-lineel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-mode-line.el"
  ;;; Hide-mode-line
  (use-package hide-mode-line
    :bind ( :map krisb-toggle-keymap
            ("m" . hide-mode-line-mode)))

  ;;; Diminish
  (use-package diminish
    :config
    (with-eval-after-load 'subword
      (diminish 'subword-mode))
    (with-eval-after-load 'simple
      (diminish 'visual-line-mode))
    (with-eval-after-load 'face-remap
      (diminish 'buffer-face-mode)))

  ;;; Time
  ;; Enable time in the mode-line
  (use-package time
    :ensure nil
    :custom
    (display-time-24hr-format t)
    (display-time-format "%R")
    (display-time-interval 60)
    (display-time-default-load-average nil)
    (world-clock-list
     '(("America/Los_Angeles" "Seattle")
       ("America/New_York" "New York")
       ("Europe/London" "London")
       ("Europe/Paris" "Paris")
       ("Europe/Nicosia" "Nicosia (capital of Cyprus)")
       ("Asia/Calcutta" "Bangalore")
       ("Asia/Tokyo" "Tokyo")
       ("Asia/Shanghai" "Beijing")))
    :config
    (display-time-mode 1))

  ;;; Recursion-indicator
  (use-package recursion-indicator
    :custom
    (recursion-indicator-symbols
     '((completion "C" recursion-indicator-completion)
       (prompt     "P" recursion-indicator-prompt)
       (suspend    "S" recursion-indicator-suspend)
       (t          "R" recursion-indicator-default)))
    :config
    (recursion-indicator-mode 1)
    (minibuffer-depth-indicate-mode -1))

  ;;; Mode line format
  (setq mode-line-defining-kbd-macro (propertize " Macro" 'face 'mode-line-emphasis))

  (setopt mode-line-compact 'long         ; Emacs 28
          mode-line-right-align-edge 'window
          mode-line-percent-position '(-3 "%p") ; Don't show percentage of position in buffer
          mode-line-position-line-format '(" %l")
          mode-line-position-column-line-format '(" %l,%c")) ; Emacs 28

  (setq-default mode-line-format
                '("%e"
                  mode-line-front-space
                  (:propertize
                   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote
                    mode-line-window-dedicated)
                   display (min-width (6.0)))
                  mode-line-frame-identification
                  mode-line-buffer-identification "   "
                  mode-line-position
                  mode-line-format-right-align
                  (project-mode-line project-mode-line-format) "   "
                  mode-line-modes
                  mode-line-misc-info
                  mode-line-end-spaces))

  ;; Add segments to `global-mode-string'
  (add-to-list 'global-mode-string '(vc-mode (:eval (concat vc-mode " "))))

  ;;; Provide
  (provide 'krisb-mode-line)
#+end_src

** Navigation
:PROPERTIES:
:CUSTOM_ID: navigation
:END:

*** =krisb-alternative-editing-schemes.el=
:PROPERTIES:
:CUSTOM_ID: krisb-alternative-editing-schemesel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-alternative-editing-schemes.el"
  ;;; Puni
  ;; Major-mode agnostic structural editing, faithful to built-ins
  (use-package puni
    :custom
    (puni-confirm-when-delete-unbalanced-active-region t)
    :config
    (puni-global-mode 1)

    ;; Replace the default mode map with my own version
    (defvar-keymap krisb-puni-mode-map
      :doc "Keymap used for `puni-mode'.")
    ;; We use bind-keys because (i) I can use the [remap ...] form and (ii)
    ;; because it integrates with `describe-personal-keybindings'
    (bind-keys :map krisb-puni-mode-map
               ;; ("DEL" . puni-backward-delete-char)
               ;; ("C-d" . puni-forward-delete-char)
               ;; ("C-S-k" . puni-backward-kill-line)
               ;; ("C-c DEL" . puni-force-delete)
               ;; ("C-w" . puni-kill-region)
               ([remap kill-word] . puni-forward-kill-word)
               ([remap backward-kill-word] . puni-backward-kill-word)
               ([remap kill-line] . puni-kill-line)
               ([remap forward-sexp] . puni-forward-sexp)
               ([remap backward-sexp] . puni-backward-sexp)
               ([remap beginning-of-defun] . puni-beginning-of-sexp)
               ([remap end-of-defun] . puni-end-of-sexp)
               ([remap backward-list] . puni-backward-sexp-or-up-list)
               ([remap forward-list] . puni-forward-sexp-or-up-list)
               ("C-M-9" . puni-syntactic-backward-punct)
               ("C-M-0" . puni-syntactic-forward-punct)
               ("C-M-r" . puni-raise)
               ("C-M-=" . puni-splice)
               ("C-M-S-o" . puni-split)
               ("C-M-[" . puni-slurp-backward)
               ("C-M-]" . puni-slurp-forward)
               ("C-M-{" . puni-barf-backward)
               ("C-M-}" . puni-barf-forward))
    (setf (alist-get 'puni-mode minor-mode-map-alist) krisb-puni-mode-map))

  ;;; God-mode
  (use-package god-mode
    ;; 2025-04-01: I find the need for a toggle key to defeat the purpose of the
    ;; package: you can move around quickly, but when it comes to editing, you
    ;; have to enter a "new mode"...  Why not just do modal editing?
    ;; 2025-04-03: Trying out motion-selection, which has its own "escape"
    ;; command; it also uses god-mode so I don't disable this config so my
    ;; god-mode :custom can be applied.
    ;; :disabled t
    ;; :bind ("<escape>" . god-local-mode)
    :custom
    (god-mode-enable-function-key-translation nil)
    (god-exempt-major-modes
     '(Custom-mode Info-mode ag-mode calculator-mode calendar-mode
                   cider-test-report-mode compilation-mode debugger-mode dired-mode
                   edebug-mode ediff-mode eww-mode geben-breakpoint-list-mode
                   git-commit-mode grep-mode ibuffer-mode magit-popup-mode
                   org-agenda-mode pdf-outline-buffer-mode recentf-dialog-mode
                   sldb-mode sly-db-mode vc-annotate-mode wdired-mode))
    (god-exempt-predicates
     '(god-exempt-mode-p god-comint-mode-p god-git-commit-mode-p god-view-mode-p
                         god-special-mode-p)))

  ;;; Meow
  (use-package meow
    ;; 2025-04-01: Best modal editing scheme, as far as I can tell. But I don't
    ;; want a modal editing package
    :disabled t
    :config
    (meow-global-mode 1)

    ;; Set up QWERTY
    (defun krisb-alternative-editing-schemes-setup ()
      "Set up QWERTY bindings with meow."
      (setopt meow-cheatsheet-layout meow-cheatsheet-layout-qwerty
              meow--kbd-splice-sexp "C-M-="
              meow--kbd-forward-slurp "C-M-]"
              meow--kbd-backward-slurp "C-M-]"
              meow--kbd-forward-barf "C-M-}"
              meow--kbd-forward-barf "C-M-{"
              meow--kbd-split-sexp "C-M-S-o")
      (meow-motion-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)
       ;; Bespoke bindings
       '(")" . puni-syntactic-forward-punct)
       '("(" . puni-syntactic-backward-punct)
       '("}" . meow-forward-slurp)
       '("{" . meow-backward-slurp)
       '("C-}" . meow-forward-barf)
       '("C-{" . meow-backward-barf)
       '("C-=" . meow-splice-sexp)
       '("C-o" . meow-split-sexp)))
    (krisb-alternative-editing-schemes-setup))

  ;;; Boon
  (use-package boon
    :disabled t                ; 2025-04-02: Ergonomic but... what is the benefit?
    :config
    (require 'boon-qwerty)
    (boon-mode 1))

  ;;; Motion-selection-mode
  ;; Modify god-mode to emulate kakoune and meow's "motion selection" approach
  ;; (i.e. noun-verb, or select-as-you-move-then-act). (But, remember, god-mode
  ;; sticks with base Emacs keybindings, so this stays close to vanilla Emacs.)
  ;; This is basically god-mode but with selection during motion. Interesting...
  (use-package motion-selection-mode
    :disabled t ; 2025-04-03: I think the premise of this package is neat, but I don't think god-mode is for me.
    :config
    (motion-selection-mode 1))

  ;;; Provide
  (provide 'krisb-alternative-editing-schemes)
#+end_src

*** =krisb-navigation.el=
:PROPERTIES:
:CUSTOM_ID: krisb-navigationel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-navigation.el"
  ;;; Consult
  ;; Counsel equivalent for default Emacs completion. It provides many useful
  ;; commands.
  (use-package consult
    :bind (("C-x B" . consult-buffer)
           ;; Remaps
           ([remap bookmark-jump] . consult-bookmark)
           ([remap yank-pop] . consult-yank-pop)
           ([remap goto-line] . consult-goto-line)
           ([remap recentf-open-files] . consult-recent-file)
           ([remap Info-search] . consult-info)
           ([remap point-to-register] . consult-register-store)
           ([remap repeat-complex-command] . consult-complex-command)
           ([remap imenu] . consult-imenu)
           ([remap flymake-show-buffer-diagnostics] . consult-flymake)
           :map consult-narrow-map
           ("?" . consult-narrow-help)          ; Show available narrow keys
           :map goto-map                  ; The `M-g' prefix
           ("f" . consult-flymake)
           ("o" . consult-outline)
           ("e" . consult-compile-error)
           ("l" . consult-line)
           ("a" . consult-org-agenda)
           :map search-map                ; The `M-s' prefix
           ("i" . consult-info)
           ("g" . consult-git-grep)
           ("G" . consult-grep)
           ("r" . consult-ripgrep)
           ("f" . consult-find)
           ("F" . consult-locate)
           :map org-mode-map
           ([remap consult-outline] . consult-org-heading))
    :custom
    (consult-preview-key "C-M-;")
    (consult-bookmark-narrow
     '((?f "File" bookmark-default-handler)
       (?i "Info" Info-bookmark-jump)
       (?h "Help" help-bookmark-jump Info-bookmark-jump
           Man-bookmark-jump woman-bookmark-jump)
       (?p "PDFs" pdf-view-bookmark-jump-handler)
       (?a "Activities" activities-bookmark-handler)
       (?d "Docview" doc-view-bookmark-jump)
       (?s "Eshell" eshell-bookmark-jump)
       (?w "Web" eww-bookmark-jump xwidget-webkit-bookmark-jump-handler)
       (?v "VC Directory" vc-dir-bookmark-jump)
       (?o "Org headings" org-bookmark-heading-jump)
       (nil "Other")))
    (consult-ripgrep-args
     (concat
      "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /\
     --smart-case --no-heading --with-filename --line-number --search-zip"
      ;; Additional args
      " --line-number --hidden"))
    :config
    (require 'krisb-consult-ext)

    ;; Log-edit history
    (add-to-list 'consult-mode-histories
                 '(log-edit-mode log-edit-comment-ring log-edit-comment-ring-index log-edit-beginning-of-line))

    ;; Use the faster plocate rather than locate
    (when (executable-find "plocate")
      (setopt consult-locate-args "plocate --ignore-case --existing --regexp"))

    ;; Use consult UI with xref
    (with-eval-after-load 'xref
      ;; Use Consult to select xref locations with preview
      (setopt xref-show-definitions-function #'consult-xref
              xref-show-xrefs-function #'consult-xref))

    ;; Registers
    (with-eval-after-load 'register
      ;; Fancier formatting of preview
      (setopt register-preview-function #'consult-register-format)
      ;; Fancier formatting of preview window. Adds thin lines, sorting and hides
      ;; the mode line of the register preview window. Copied from
      ;; https://github.com/minad/consult#use-package-example
      (advice-add 'register-preview :override #'consult-register-window))

    ;; Pulsar pulses
    (with-eval-after-load 'pulsar
      (add-hook 'consult-after-jump-hook #'pulsar-reveal-entry)))

  ;;; Ultra-scroll
  (use-package ultra-scroll
    :vc (:url "https://github.com/jdtsmith/ultra-scroll")
    :init
    (setq scroll-conservatively 101       ; As instructed by the README
          scroll-margin 0)
    :config
    (ultra-scroll-mode 1))

  ;;; Jump

  ;;;; Intra-file

  ;;;;; Isearch
  ;; Incremental search
  (use-package isearch
    :ensure nil
    :custom
    (isearch-repeat-on-direction-change t)
    (isearch-allow-scroll t)
    (isearch-allow-motion t)
    (isearch-lazy-count t)
    (isearch-wrap-pause 'no)
    ;; Make regular Isearch interpret the empty space as a regular expression that
    ;; matches any character between the words you give it. Learned from
    ;; Protesilaos. Also be aware of `isearch-toggle-lax-whitespace'
    (isearch-lax-whitespace t)
    (search-whitespace-regexp ".*?"))

  ;;;;; Imenu
  (use-package imenu
    :ensure nil
    :custom
    (org-imenu-depth 7)                   ; Show more than just 2 levels...
    (imenu-auto-rescan t)
    (use-package-enable-imenu-support t)
    (imenu-flatten 'group)
    :config
    (with-eval-after-load 'pulsar
      (add-hook 'imenu-after-jump-hook #'pulsar-reveal-entry)))

  ;;;;; Occur
  (use-package replace
    :ensure nil
    :config
    (with-eval-after-load 'krisb-reveal
      (defun kris-reveal-occur-find-information ()
        "Return information required by `krisb-reveal-fold-commands'.
  See the docstring of `krisb-reveal-fold-commands'."
        (save-window-excursion
          (save-excursion
            (occur-mode-goto-occurrence)
            (cons (point) (current-buffer)))))
      (dolist (command '(next-error-no-select
                         previous-error-no-select
                         occur-mode-display-occurrence
                         occur-mode-goto-occurrence
                         occur-mode-goto-occurrence-other-window))
        (add-to-list 'krisb-reveal-fold-commands
                     (list :command command
                           :location #'kris-reveal-occur-find-information
                           :predicate (lambda () (eq major-mode 'occur-mode)))))))

  ;;;;; Avy
  ;; Quickly jump to any character.  For a great resource on the power of avy, see
  ;; https://karthinks.com/software/avy-can-do-anything/.
  (use-package avy
    :commands krisb-avy-goto-parens
    :bind (("C-; C-;" . avy-goto-char-timer)
           ("C-; s" . avy-goto-symbol-1)
           ("C-; l" . avy-goto-line)
           ("C-; p" . krisb-avy-goto-parens))
    :custom
    ;; For descriptions of all the options, see the avy wiki:
    ;; https://github.com/abo-abo/avy/wiki/defcustom
    (avy-all-windows t)
    (avy-case-fold-search nil)
    (avy-single-candidate-jump nil)
    (avy-timeout-seconds 0.3)
    (avy-keys '(?a ?w ?r ?u ?i ?o ?p))
    (avy-background nil)
    (avy-highlight-first t)
    ;; 2025-04-03: For a description of the styles see
    ;; https://github.com/abo-abo/avy/wiki/defcustom#avy-style.  The primary
    ;; considerations are readability with many candidates and ability see and
    ;; input the sequences quickly.  I typically favor the speedy input of
    ;; sequences over readability.  So, I set a default to 'words but for commands
    ;; that have many candidates I prefer 'at (which shows single characters only;
    ;; this is good for readability but unfavorable for speed).  (Note: The 'pre
    ;; and 'post options make the text shift.)
    (avy-style 'words)
    (avy-styles-alist
     '((krisb-avy-goto-parens . at)))
    ;; Alist of avy actions.  See the "Remembering to Avy" section in in
    ;; https://karthinks.com/software/avy-can-do-anything/ for the rationale
    ;; behind the bindings below
    (avy-dispatch-alist
     '((?k . avy-action-kill-stay)
       (?K . krisb-avy-action-kill-whole-line)
       (?t . avy-action-teleport)
       (?T . krisb-avy-action-teleport-whole-line)
       (?w . avy-action-copy)
       (?W . krisb-avy-action-copy-whole-line)
       (?y . avy-action-yank)
       (?Y . krisb-avy-action-yank-whole-line)
       (?m . avy-action-mark)
       (?z . avy-action-zap-to-char)
       (?. . krisb-avy-action-embark)
       (?h . krisb-avy-action-help)
       (?= . krisb-avy-action-dictionary)
       (?e . krisb-avy-action-eval)
       (?w . krisb-avy-action-kill-ring-save)))
    (avy-orders-alist
     '((avy-goto-char . krisb-avy-order-farthest)
       (avy-goto-char-2 . krisb-avy-order-farthest)
       (avy-goto-word-0 . krisb-avy-order-farthest)
       (avy-goto-word-1 . krisb-avy-order-farthest)
       (avy-goto-char-timer . krisb-avy-order-farthest)
       (krisb-avy-goto-parens . krisb-avy-order-farthest)))
    :config
    (krisb-modus-themes-setup-faces
     "avy"
     ;; Don't bold so text isn't shifted much
     (set-face-attribute 'avy-lead-face nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-0 nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-1 nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-2 nil :inherit 'modus-themes-reset-soft))

    (defun krisb-avy-order-farthest (x)
      (- (abs (- (if (numberp (car x))
                     (car x)
                   (caar x))
                 (point)))))

    ;; Goto (i.e. selection) commands
    (defun krisb-avy-goto-parens ()
      "Go to an open or close parens."
      (interactive)
      (let ((avy-command this-command))
        (avy-with krisb-avy-goto-parens
          ;; There will be many candidates if called in an e.g. elisp buffer.  The
          ;; solution is changing the `avy-style' appropriately, either by setting
          ;; `avy-style' directly or `avy-styles-alist'.
          (avy-jump (rx (or "(" ")")))
          ;; When jumping to a closing parens, move the point forward one
          ;; character, since in these cases, I want the point to end after the
          ;; parens, not before
          (when (eq (char-after) (string-to-char ")"))
            (forward-char))))
      t)

    ;; Actions
    (defun krisb-avy-action-help (pt)
      "Help avy action."
      (save-excursion
        (goto-char pt)
        (if (featurep 'helpful)
            (helpful-at-point)
          (describe-symbol (symbol-at-point))))
      (when (featurep 'helpful)
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; Additional avy dispatch actions. Most are inspired or taken from
    ;; https://karthinks.com/software/avy-can-do-anything/
    ;; Embark
    (defun krisb-avy-action-embark (pt)
      "Embark avy action."
      (require 'embark)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (defun krisb-avy-action-dictionary (pt)
      "Dictionary avy action."
      (require 'checking-words-rcp)
      (save-excursion
        (goto-char pt)
        (krisb-dictionary-at-point))
      ;; If with `universal-arg', don't switch to help buffer
      (when current-prefix-arg
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    (defun krisb-avy-action-eval (pt)
      "Eval avy action."
      (save-excursion
        (goto-char pt)
        (if (fboundp 'eros-eval-last-sexp)
            (call-interactively 'eros-eval-last-sexp)
          (call-interactively 'eval-last-sexp)))
      t)

    (defun krisb-avy-action-kill-whole-line (pt)
      "Kill whole line avy action.
  Taken from https://karthinks.com/software/avy-can-do-anything/."
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun krisb-avy-action-teleport-whole-line (pt)
      "Teleport whole line avy action.
  Taken from https://karthinks.com/software/avy-can-do-anything/."
      (krisb-avy-action-kill-whole-line pt)
      (save-excursion (yank) t))

    (defun krisb-avy-action-copy-whole-line (pt)
      "Copy whole line avy action.
  Taken from https://karthinks.com/software/avy-can-do-anything/."
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)

    (defun krisb-avy-action-yank-whole-line (pt)
      "Yank whole line avy action.
  Taken from https://karthinks.com/software/avy-can-do-anything/."
      (krisb-avy-action-copy-whole-line pt)
      (save-excursion (yank) t)))


  ;;;;; Smart-mark
  ;; When pressing C-g while marking a region, move point to the location the
  ;; marking command was invoked from.
  (use-package smart-mark
    :config
    (smart-mark-mode 1))

  ;;;; Inter-file

  ;;;;; Grep
  (use-package grep
    :custom
    (grep-save-buffers 'ask)
    (grep-use-headings t)
    :config
    (with-eval-after-load 'krisb-reveal
      (defun kris-reveal-grep-find-information ()
        "Return information required by `krisb-reveal-fold-commands'.
  See the docstring of `krisb-reveal-fold-commands'."
        (save-window-excursion
          (save-excursion
            (compile-goto-error)
            (cons (point) (current-buffer)))))
      (dolist (command '(next-error-no-select
                         previous-error-no-select
                         compilation-display-error))
        (add-to-list 'krisb-reveal-fold-commands
                     (list :command command
                           :location #'kris-reveal-grep-find-information
                           :predicate (lambda () (eq major-mode 'grep-mode)))))))

  ;;;;; Recentf
  ;; Enable logging of recent files
  (use-package recentf
    :demand t
    :ensure nil
    :bind ( :map krisb-file-keymap
            ("r" . recentf-open-files))
    :custom
    (recentf-max-saved-items 1000)
    (recentf-max-menu-items 15)
    :config
    (recentf-mode 1))

  ;;; Provide
  (provide 'krisb-navigation)
#+end_src

** Writing and reading
:PROPERTIES:
:CUSTOM_ID: writing-and-reading
:END:

*** =krisb-prose.el=
:PROPERTIES:
:CUSTOM_ID: krisb-proseel
:END:

**** Environment
:PROPERTIES:
:CUSTOM_ID: environment
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Environment
  ;;;; Visual-wrap
  ;; Visually indent lines wrapped visually! This makes long-lines in lists
  ;; properly indented!
  ;; NOTE: This package is the same as the more often referred to
  ;; `adaptive-wrap-prefix-mode'.
  (use-package visual-wrap
    ;; 2024-10-30: Using adaptive-wrap for now since there seems to be some kind
    ;; of error between the interactions of visual-wrap and org-modern.  See
    ;; https://github.com/minad/org-modern/discussions/238.
    :disabled t
    :ensure nil
    :config
    (global-visual-wrap-prefix-mode 1))

  ;;;; Adaptive-wrap
  (use-package adaptive-wrap
    :hook (visual-line-mode . adaptive-wrap-prefix-mode))

  ;;;; Olivetti
  (use-package olivetti
    :hook (((org-mode Info-mode emacs-news-view-mode org-msg-edit-mode markdown-mode) . olivetti-mode)
           (olivetti-mode . krisb-olivetti-set-bookmark-face))
    :custom
    (olivetti-lighter nil)
    (olivetti-body-width 0.55)
    (olivetti-minimum-body-width 80)
    (olivetti-margin-width 8)
    (olivetti-style 'fancy)              ; Fancy makes the buffer look like a page
    ;; FIXME 2024-01-11: This is a temporary solution. Olivetti's changing of
    ;; margins and fringes messes with the calculation of
    ;; `mode--line-format-right-align', which determines where the right side of
    ;; the mode line is placed.
    (mode-line-format-right-align
     '(:eval (if (and (bound-and-true-p olivetti-mode)
                      olivetti-style)     ; 'fringes or 'fancy
                 (let ((mode-line-right-align-edge 'right-fringe))
                   (mode--line-format-right-align))
               (mode--line-format-right-align))))
    :config
    (krisb-modus-themes-setup-faces
     "olivetti"
     (set-face-attribute 'olivetti-fringe nil
                         :background bg-dim
                         :inherit 'unspecified))

    ;; Set `bookmark-face' buffer-locally
    (defun krisb-olivetti-set-bookmark-face ()
      "Sets the buffer-local specification of `bookmark-face'.
  We do this because the olivetti settings may change the background color
  of the fringe, meaning bookmark fringe marks, which use the default
  fringe background color, are out of place."
      (face-remap-add-relative 'bookmark-face
                               :inherit '(olivetti-fringe success))))

  ;;;; Darkroom
  (use-package darkroom
    :bind ( :map krisb-toggle-keymap
            ("d" . darkroom-mode)
            ("D" . darkroom-tentative-mode))
    :custom
    (darkroom-text-scale-increase 1.3))

  ;;;; Typewriter-roll-mode
  (use-package typewriter-roll-mode
    :bind ( :map krisb-toggle-keymap
            ("r" . typewriter-roll-mode)))

  ;;;; Timers
  ;;;;; Tmr
  (use-package tmr
    :bind ( :map krisb-open-keymap
            ("t" . krisb-tmr-dispatch))
    :custom
    ;; Useful variables
    (tmr-descriptions-list
     '("Stop working!" "Work time 😄"))
    (tmr-notification-urgency 'normal)
    (tmr-sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")
    :config
    (require 'transient)
    (transient-define-prefix krisb-tmr-dispatch ()
      "Invoke a transient menu for `tmr'."
      ["Create or remove timers"
       [("t" "Create a timer" tmr)
        ("T" "Create a timer with description" tmr-with-details)
        ("C" "Clone a timer" tmr-clone)]
       [("r" "Remove finished" tmr-remove-finished)
        ("c" "Cancel timer" tmr-cancel)]]
      ["View timers"
       [("v" "Tabulated view" tmr-tabulated-view)]]))


  ;;;;; Hammy
  (use-package hammy
    :bind ( :map krisb-open-keymap
            ("h S" . hammy-start)
            ("h n" . hammy-next)
            ("h s" . hammy-stop)
            ("h r" . hammy-reset)
            ("h t" . hammy-toggle)
            ("h a" . hammy-adjust)
            ("h v" . hammy-view-log)
            ("h R" . hammy-status)
            ("h I" . hammy-start-org-clock-in)
            ;; Bespoke commands
            ("h h" . krisb-hammy-dwim)
            ("h d" . krisb-hammy-modify-duration)
            ("h e" . krisb-hammy-modify-elapsed))
    :custom
    ;; TODO 2024-09-25: Have this found more locally.  When I do, also change
    ;; `tmr-sound' to this file
    (hammy-sound-end-work "/home/krisbalintona/.emacs.d/elpa/work-timer/simple-notification.mp3")
    (hammy-sound-end-break "/home/krisbalintona/.emacs.d/elpa/work-timer/simple-notification.mp3")

    ;; Mode line
    (hammy-mode-always-show-lighter nil)
    (hammy-mode-update-mode-line-continuously t)
    (hammy-mode-lighter-seconds-format "%.2m:%.2s")
    (hammy-mode-lighter-prefix "[H]")
    (hammy-mode-lighter-overdue "!")
    (hammy-mode-lighter-pie t)
    (hammy-mode-lighter-pie-height 0.65)
    :config
    ;; Mode line
    (hammy-mode 1)

    ;; Override `hammy-start-org-clock-in' to work in org-agenda
    (el-patch-defun hammy-start-org-clock-in (&rest _ignore)
      "Call `org-clock-in' and start a hammy (or use an already-started one).
  If point is in an Org entry, clock into it; otherwise, offer a
  list of recently clocked tasks to clock into.  The Org task will
  then automatically be clocked out during the hammy's second
  interval (and when the hammy is stopped), and back in when the
  first interval resumes.  (If the user clocks into a different
  task while the hammy is running, the task that is clocked-in when
  the work interval ends will be clocked back into when the next
  work interval begins.)

  Returns the hammy from `hammy-start'.  Assumes that the hammy's
  first interval is the work interval (i.e. the one during which
  the task should be clocked in)."
      (interactive)
      (require 'org)
      ;; MAYBE: Take a point-or-marker argument for the task to clock into.
      (el-patch-swap
        (if (and (eq major-mode 'org-mode)
                 (not (org-before-first-heading-p)))
            ;; At an Org entry: clock in to heading at point.
            (org-clock-in)
          ;; Not in an Org entry: offer a list to choose from.
          (org-clock-in '(4)))
        (cond
         ;; At an Org entry: clock in to heading at point.
         ((and (eq major-mode 'org-mode)
               (not (org-before-first-heading-p)))
          (org-clock-in))
         ;; At an Org-agenda entry: clock in to entry at point.
         ((eq major-mode 'org-agenda-mode)
          (org-agenda-clock-in))
         ;; Not in an Org entry: offer a list to choose from.
         (t (org-clock-in '(4)))))
      (let ((hammy (hammy-complete "Clock in with Hammy: " hammy-hammys)))
        (unless (hammy-interval hammy)
          (hammy-start hammy))
        (cl-macrolet ((pushfn (fn place)
                        `(cl-pushnew ,fn ,place :test #'equal)))
          (pushfn #'hammy--org-clock-in (hammy-interval-before (hammy-interval hammy)))
          (pushfn #'hammy--org-clock-out (hammy-interval-after (hammy-interval hammy)))
          (pushfn #'hammy--org-clock-out (hammy-stopped hammy)))
        hammy))

    ;; Custom lighter
    (defun krisb-hammy-mode-lighter ()
      "Return lighter for `hammy-mode'."
      (cl-labels
          ((format-hammy (hammy)
             (let ((remaining
                    (abs
                     ;; We use the absolute value because `ts-human-format-duration'
                     ;; returns 0 for negative numbers.
                     (- (hammy-current-duration hammy)
                        (float-time (time-subtract (current-time)
                                                   (hammy-current-interval-start-time hammy)))))))
               (format "%s(%s%s:%s)"
                       (propertize (hammy-name hammy)
                                   'face 'hammy-mode-lighter-name)
                       (if (hammy-overduep hammy)
                           (propertize hammy-mode-lighter-overdue
                                       'face 'hammy-mode-lighter-overdue)
                         "")
                       (propertize (hammy-interval-name (hammy-interval hammy))
                                   'face `(hammy-mode-lighter-interval
                                           ,(hammy-interval-face (hammy-interval hammy))))
                       (concat (when hammy-mode-lighter-pie
                                 (propertize " " 'display (hammy--pie hammy)))
                               (if (hammy-overduep hammy)
                                   ;; We use the negative sign when counting down to
                                   ;; the end of an interval (i.e. "T-minus...") .
                                   "+" "-")
                               (format-seconds (if (< remaining 60)
                                                   "%2ss" hammy-mode-lighter-seconds-format)
                                               remaining))))))
        (if hammy-active
            (concat (mapconcat #'format-hammy hammy-active ",") " ")
          ;; No active hammys.
          (when hammy-mode-always-show-lighter
            (concat (propertize hammy-mode-lighter-prefix
                                'face 'hammy-mode-lighter-prefix-inactive)
                    (if hammy-mode-lighter-suffix-inactive
                        (concat ":" hammy-mode-lighter-suffix-inactive))
                    " ")))))
    (advice-add 'hammy-mode-lighter :override #'krisb-hammy-mode-lighter)

    ;; Dwim command
    (defun krisb-hammy-dwim ()
      "DWIM with hammy."
      (interactive)
      (if (equal major-mode 'org-agenda-mode)
          (call-interactively 'hammy-start-org-clock-in)
        (if hammy-active
            (call-interactively 'hammy-next)
          (call-interactively 'hammy-start))))

    ;; Hammy definitions
    (defun krisb-hammy-play-sound ()
      "Play end of timer sound."
      (interactive)
      (call-process-shell-command
       (format "ffplay -nodisp -autoexit %s >/dev/null 2>&1" hammy-sound-end-work) nil 0))

    (setq hammy-hammys nil)
    (hammy-define "Fractional"
      :documentation "Breaks that are ⅓ as long as the last work interval."
      :intervals
      (list
       (interval :name "Work"
                 :duration "40 minutes"
                 :before (do (announce "Starting work time (advance to break when ready)."))
                 :after (do (krisb-hammy-play-sound))
                 :advance t
                 ;; (do (krisb-hammy-play-sound)
                 ;;     (let* ((current-duration
                 ;;             (ts-human-format-duration
                 ;;              (float-time
                 ;;               (time-subtract (current-time)
                 ;;                              current-interval-start-time))))
                 ;;            (message (format "You've worked for %s!" current-duration)))
                 ;;       (announce message)
                 ;;       (notify message)))
                 )
       (interval :name "Break"
                 :duration (do (cl-assert (equal "Work" (hammy-interval-name (caar history))))
                               (let ((duration (cl-loop for (interval start end) in history
                                                        while (equal "Work" (hammy-interval-name interval))
                                                        sum (float-time (time-subtract end start))
                                                        into work-seconds
                                                        finally return (* work-seconds 0.33))))
                                 (when (alist-get 'unused-break etc)
                                   (cl-incf duration (alist-get 'unused-break etc))
                                   (setf (alist-get 'unused-break etc) nil))
                                 duration))
                 :before (do (let ((message (format "Starting break for %s."
                                                    (ts-human-format-duration current-duration))))
                               (announce message)))
                 :after (do (krisb-hammy-play-sound)
                            (let* ((elapsed
                                    (float-time
                                     (time-subtract (current-time) current-interval-start-time)))
                                   (unused (- current-duration elapsed)))
                              (when (> unused 0)
                                (if (alist-get 'unused-break etc)
                                    (cl-incf (alist-get 'unused-break etc) unused)
                                  (setf (alist-get 'unused-break etc) unused)))))
                 :advance t
                 ;; (remind "5 minutes"
                 ;;         (do (krisb-hammy-play-sound)))
                 )))
    (hammy-define "Ramp and decline"
      :documentation "Get your momentum going!"
      :intervals (list (interval :name "Work"
                                 :face 'font-lock-builtin-face
                                 :duration (climb "5 minutes" "40 minutes"
                                                  :descend t :step "5 minutes")
                                 :before (do (announce "Work time!"))
                                 :advance (do (announce "Work time is over!")
                                              (notify "Work time is over!")
                                              (remind "5 minutes"
                                                      (do (krisb-hammy-play-sound)))))
                       (interval :name "Rest"
                                 :face 'font-lock-type-face
                                 :duration (do (let ((duration (cl-loop for (interval start end) in history
                                                                        while (equal "Work" (hammy-interval-name interval))
                                                                        sum (float-time (time-subtract end start))
                                                                        into work-seconds
                                                                        finally return (max (* 60 2) (* work-seconds 0.33)))))
                                                 (when (alist-get 'unused-break etc)
                                                   (cl-incf duration (alist-get 'unused-break etc))
                                                   (setf (alist-get 'unused-break etc) nil))
                                                 duration))
                                 :before (do (announce "Rest time!"))
                                 :after (do (let* ((elapsed
                                                    (float-time
                                                     (time-subtract (current-time) current-interval-start-time)))
                                                   (unused (- current-duration elapsed)))
                                              (when (> unused 0)
                                                (if (alist-get 'unused-break etc)
                                                    (cl-incf (alist-get 'unused-break etc) unused)
                                                  (setf (alist-get 'unused-break etc) unused)))))
                                 :advance (remind "5 minutes"
                                                  (do (announce "Rest time is over!")
                                                      (notify "Rest time is over!")
                                                      (krisb-hammy-play-sound)))))
      :complete-p (do (and (> cycles 1)
                           interval
                           (equal "Work" interval-name)
                           (>= (duration "5 minutes") current-duration)))
      :after (do (announce "Flywheel session complete!")
                 (notify "Flywheel session complete!")))

    (hammy-define (propertize "🍅" 'face '(:foreground "tomato"))
      :documentation "The classic pomodoro timer."
      :intervals
      (list
       (interval :name "Working"
                 :duration "25 minutes"
                 :before (do (announce "Starting work time.")
                             (notify "Starting work time."))
                 :advance (remind "10 minutes"
                                  (do (announce "Break time!")
                                      (notify "Break time!"))))
       (interval :name "Resting"
                 :duration (do (if (and (not (zerop cycles))
                                        (zerop (mod cycles 3)))
                                   ;; If a multiple of three cycles have
                                   ;; elapsed, the fourth work period was
                                   ;; just completed, so take a longer break.
                                   "30 minutes"
                                 "5 minutes"))
                 :before (do (announce "Starting break time.")
                             (notify "Starting break time."))
                 :advance (remind "10 minutes"
                                  (do (announce "Break time is over!")
                                      (notify "Break time is over!"))))))

    (hammy-define "1-shot"
      :documentation "Single-use timer that prompts for name and duration."
      :complete-p (do (> cycles 0))
      :before
      (lambda (hammy)
        (hammy-reset hammy)
        (setf (hammy-intervals hammy)
              (ring-convert-sequence-to-ring
               (list (interval
                      :name (read-string "Interval name (optional): " nil nil "")
                      :duration (read-string "Duration: ")
                      :advance (remind "5 minutes"
                                       (do (let ((message (format "%s is over!" interval-name)))
                                             (krisb-hammy-play-sound)
                                             (notify message))))))))))

    ;; Bespoke commands
    (defun krisb-hammy-modify-duration (hammy)
      "Modify the duration of HAMMY timer.
  Interactively, prompt for a currently active hammy.

  Like `hammy-adjust', also sets the \"original-durations\" variable
  (which contains hammy-intervals) stored in the etc slot of HAMMY if it
  is not already set.

  See `timer-duration-words' for the units available when prompted for a
  duration."
      (interactive (list (hammy-complete "Select which hammy's current duration to modify:" hammy-active)))
      (cl-symbol-macrolet
          ((original-interval-duration
             (alist-get (car (member (hammy-interval hammy)
                                     (ring-elements (hammy-intervals hammy))))
                        (alist-get 'original-durations (hammy-etc hammy)))))
        (let* ((input-duration
                (read-string "Duration (as number or string): "
                             nil nil (prin1-to-string (hammy-interval-duration (hammy-interval hammy)))))
               (new-duration (pcase-exhaustive input-duration
                               ((and (pred numberp) it) it)
                               ((and (pred stringp) it) (timer-duration it)))))
          (setf (hammy-current-duration hammy) new-duration)
          ;; Only save the original duration the first time the interval is
          ;; adjusted, like `hammy-adjust'
          (unless original-interval-duration
            (setf original-interval-duration new-duration)))))

    (defun krisb-hammy-modify-elapsed (hammy)
      "Modify the elapsed time of HAMMY timer.
  This command opts to add (a positive or negative) offset to modify the
  start time of the hammy (current-interval-start-time slot of the
  hammy-interval slot of the hammy).  This means moving the start time
  backward to increase the elapsed time and forward to decrease the
  elapsed time of HAMMY.

  The original value of current-interval-start-time is stored in the
  original-interval-start-time cons in the etc slot of the
  hammy-interval.

  Interactively, prompt for a currently active hammy.

  See `timer-duration-words' for the units available when prompted for a
  duration."
      (interactive (list (hammy-complete "Select which hammy's current elapsed time to modify:" hammy-active)))
      (let* ((input-duration
              (read-string "Duration (as number or string): "
                           nil nil (prin1-to-string (hammy-interval-duration (hammy-interval hammy)))))
             (offset (pcase-exhaustive input-duration
                       ((and (pred numberp) it) it)
                       ;; TODO 2025-03-19: Figure out a more elegant solution to
                       ;; negative durations.  Currently, since `timer-duration'
                       ;; always returns positive numbers, even with a prefixing
                       ;; "-", we manually negate the number.
                       ((and (pred stringp) it) (let ((dur (timer-duration it)))
                                                  (if (string-prefix-p "-" input-duration)
                                                      (- dur) dur)))))
             (new-start-time (time-subtract (hammy-current-interval-start-time hammy)
                                            (time-convert offset 'list))))
        (setf (hammy-current-interval-start-time hammy) new-start-time))))
#+end_src

**** Spell checking
:PROPERTIES:
:CUSTOM_ID: spell-checking
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Spell checking
  ;;;; Ispell
  (use-package ispell
    :ensure nil
    ;; For AUR:
    ;; :ensure-system-package aspell
    :custom
    (ispell-program-name (executable-find "aspell")) ; Aspell is better for English than hunspell
    (ispell-silently-savep t)
    :config
    ;; Use my personal enchant en_US dictionary
    (with-eval-after-load 'jinx
      (setopt ispell-personal-dictionary
              (expand-file-name "enchant/en_US.dic" (xdg-config-home)))))

  ;;;; Jinx
  ;; JIT spell checker that uses `enchant'. The executable is enchant-2. See the
  ;; manual for more information:
  ;; https://abiword.github.io/enchant/src/enchant.html
  (use-package jinx
    ;; For AUR:
    ;; :ensure-system-package ((enchant-2 . enchant)
    ;;                         (pkgconf)
    ;;                         ;; Don't forget to install spell checker libraries!
    ;;                         (hunspell)
    ;;                         ("/usr/share/hunspell/en_US-large.dic" . hunspell-en_us)
    ;;                         (hspell)      ; Hebrew
    ;;                         (nuspell) ; Newest spell checker to be used by Firefox, Thunderbird, etc.
    ;;                         (voikkospell . libvoikko)) ; Finnish
    :demand t
    :diminish
    :bind ( :map jinx-mode-map
            ([remap ispell-word] . jinx-correct)
            ("C-," . jinx-correct)
            ("C-M-$" . jinx-languages))
    :config
    (global-jinx-mode 1)

    ;; Mimic `flyspell-abbrev-p'.  Taken from
    ;; https://github.com/minad/jinx/wiki#save-misspelling-and-correction-as-abbreviation
    (defun krisb-jinx--add-to-abbrev (overlay word)
      "Add abbreviation to `local-abbrev-table'.

  The misspelled word is taken from OVERLAY. WORD is the corrected
  word."
      (let ((abbrev (buffer-substring-no-properties
                     (overlay-start overlay)
                     (overlay-end overlay))))
        (message "Abbrev: %s -> %s" abbrev word)
        ;; Change this to `global-abbrev-table' if preferred
        (define-abbrev local-abbrev-table abbrev word)))
    (advice-add 'jinx--correct-replace :before #'krisb-jinx--add-to-abbrev)

    ;; Read Ispell's "LocalWords."  Taken from
    ;; https://github.com/minad/jinx/wiki#make-jinx-read-from-localwords
    (defun krisb-jinx-ispell--get-localwords ()
      "Return a string of ispell's local words.

  Those are the words following `ispell-words-keyword' (usually
  \"LocalWords\") in the current buffer."
      (require 'ispell)
      (save-excursion
        (goto-char (point-min))
        (cl-loop while (search-forward ispell-words-keyword nil t)
                 collect (string-trim (buffer-substring-no-properties (point) (line-end-position))) into result
                 finally return (mapconcat #'identity result " "))))
    (defun krisb-jinx-ispell-add-localwords ()
      "Add ispell's local words to `jinx-local-words'."
      (let ((ispell-localwords (krisb-jinx-ispell--get-localwords)))
        (setq jinx-local-words (concat jinx-local-words ispell-localwords))
        (setq jinx--session-words (append jinx--session-words (split-string ispell-localwords)))))
    (add-hook 'jinx-mode-hook #'krisb-jinx-ispell-add-localwords)

    ;; Write to buffer's LocalWords instead of populating `jinx-local-words', a
    ;; local variable. Taken from
    ;; https://github.com/minad/jinx/wiki#make-jinx-write-localwords
    (defun krisb-jinx-save-as-ispell-localword (save key word)
      "Save WORD using ispell's `ispell-words-keyword'.
  If SAVE is non-nil save, otherwise format candidate given action KEY."
      (if save
          (progn
            (require 'ispell)
            (ispell-add-per-file-word-list word)
            (add-to-list 'jinx--session-words word)
            (setq jinx-local-words
                  (string-join
                   (sort (delete-dups
                          (cons word (split-string jinx-local-words)))
                         #'string<)
                   " "))))
      (list key word "File (LocalWords)"))
    ;; NOTE 2023-07-16: Can also directly add to `jinx--save-keys' directly
    (setf (alist-get ?* jinx--save-keys) #'krisb-jinx-save-as-ispell-localword))
#+end_src

**** Grammar
:PROPERTIES:
:CUSTOM_ID: grammar
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Grammar
  ;;;; Harper language server
  (with-eval-after-load 'eglot
    (if (executable-find "harper-ls")
        (progn
          (add-to-list 'eglot-server-programs
                       '(markdown-mode . ("harper-ls" "--stdio")))
          (add-to-list 'eglot-server-programs
                       ;; NOTE 2025-03-19: We give a language ID of "markdown" to harper
                       ;; (see supported languages and their corresponding language IDs
                       ;; here:
                       ;; https://writewithharper.com/docs/integrations/language-server#Supported-Languages)
                       ;; because org-mode is currently not supported.  Markdown is the
                       ;; closest we have.  (Note: it is better than the "plaintext"
                       ;; language ID; see the recommendation here:
                       ;; https://github.com/Automattic/harper/issues/149#issuecomment-2619515397.)
                       ;;
                       ;; To check the status of adding org-mode to the list of
                       ;; supported languages, see
                       ;; https://github.com/Automattic/harper/issues/79#issuecomment-2638110954.
                       '((org-mode :language-id "markdown") . ("harper-ls" "--stdio"))))
      (message "Harper-ls not installed; not configuring with eglot")))
#+end_src

**** Other
:PROPERTIES:
:CUSTOM_ID: other-0
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Other
  ;;;; Cm-mode (CriticMarkup minor mode)
  ;; Track suggested changes in plain text files.
  (use-package cm-mode
    :disabled t                     ; 2025-04-14: Haven't found a use for this yet
    :vc ( :url "https://github.com/joostkremers/criticmarkup-emacs.git"
          :rev :newest)
    ;; For AUR:
    ;; :ensure-system-package (pandiff . nodejs-pandiff) ; Prose diffs for CriticMarkup
    )
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-4
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Provide
  (provide 'krisb-prose)
#+end_src

*** =krisb-org.el=
:PROPERTIES:
:CUSTOM_ID: krisb-orgel
:END:

**** Base
:PROPERTIES:
:CUSTOM_ID: base-0
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Built-in
  ;;;; Org
  (use-package org
    :pin gnu-elpa-devel
    :hook ((org-mode . variable-pitch-mode)
           (org-mode . visual-line-mode)
           (org-mode . (lambda () (setq-local line-spacing 0.2 fill-column 100))))
    :bind (("C-c s" . org-store-link)
           ("C-c c" . org-capture))
    :custom
    (org-directory krisb-org-directory)

    ;; Headline appearance
    (org-hide-leading-stars nil)
    (org-n-level-faces 8)
    (org-cycle-separator-lines 2)
    (org-cycle-level-faces t)
    (org-ellipsis " ⮷")
    (org-startup-folded 'nofold)
    (org-tags-column 0)

    ;; Markup appearance
    (org-hide-emphasis-markers t)     ; Remove org-mode markup characters
    (org-hide-macro-markers nil)
    (org-pretty-entities t)           ; Show as UTF-8 characters (useful for math)
    (org-pretty-entities-include-sub-superscripts t) ; Show superscripts and subscripts? Also see `org-export-with-sub-superscripts'
    (org-use-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-hidden-keywords nil)

    ;; Movement
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    (org-ctrl-k-protect-subtree 'error)

    ;; Plain lists
    (org-list-allow-alphabetical t)
    (org-list-use-circular-motion t)

    ;; Headline insertion
    (org-blank-before-new-entry
     '((heading . auto)
       ;; Don't let Emacs make decisions about where to insert newlines
       (plain-list-item . nil)))
    (org-insert-heading-respect-content nil) ; Let M-RET make heading in place
    (org-M-RET-may-split-line '((table . nil)
                                (default . t)))

    ;; Blocks
    (org-structure-template-alist
     '(("s" . "src")
       ("e" . "src emacs-lisp")
       ("E" . "src emacs-lisp :results value code :lexical t")
       ("t" . "src emacs-lisp :tangle FILENAME")
       ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
       ("x" . "example")
       ("X" . "export")
       ("v" . "verse")
       ("c" . "comment")
       ("q" . "quote")))

    ;; Other
    (org-file-apps
     '((directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . default)
       ("\\.docx\\'" . system)
       ("\\.odt\\'" . system)
       ;; Default to `auto-mode-alist'
       (auto-mode . emacs)))
    (org-fold-catch-invisible-edits 'show-and-error)
    (org-edit-timestamp-down-means-later t)
    :custom-face
    (org-quote ((t (:family ,(face-attribute 'variable-pitch :family) :extend t :inherit 'org-block))))
    (org-ellipsis ((t (:box unspecified :inherit default)))) ; Don't make line taller because of org-ellipsis
    :config
    ;; Make org-open-at-point follow file links in the same window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    ;; Pulsar pulses
    (with-eval-after-load 'pulsar
      (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
        (add-hook hook #'pulsar-recenter-center)
        (add-hook hook #'pulsar-reveal-entry))))

  ;;;; Org-faces
  (use-package org-faces
    :ensure nil
    :custom
    (org-fontify-todo-headline nil)
    (org-fontify-done-headline nil)
    (org-fontify-whole-block-delimiter-line nil)
    (org-fontify-quote-and-verse-blocks t))

  ;;;; Org-src
  (use-package org-src
    :ensure nil
    :custom
    (org-src-fontify-natively t)
    (org-src-window-setup 'current-window)
    (org-src-block-faces nil) ; Open src block window on current buffer were in the language's major mode
    (org-edit-src-turn-on-auto-save nil)
    (org-edit-src-auto-save-idle-delay 3))


  ;;;; Org-id
  (use-package org-id
    :ensure nil
    :custom
    (org-clone-delete-id t)
    (org-id-method 'ts)
    (org-id-link-to-org-use-id 'use-existing))

  ;;;; Org-attach
  (use-package org-attach
    :ensure nil
    :custom
    (org-attach-preferred-new-method 'id) ; Necessary to add the ATTACH tag
    (org-attach-auto-tag "ATTACH")
    (org-attach-dir-relative nil)         ; Use relative file paths?
    (org-attach-id-dir (expand-file-name "resources" org-directory))
    (org-attach-method 'cp)            ; Attach copies of files
    (org-attach-archive-delete 'query) ; If subtree is deleted or archived, ask user
    (org-attach-id-to-path-function-list
     '(org-attach-id-ts-folder-format
       org-attach-id-uuid-folder-format
       org-attach-id-fallback-folder-format)))

  ;;;; Ol
  (use-package ol
    :ensure nil
    :custom
    (org-link-search-must-match-exact-headline nil))

  ;;;; Org-footnote
  (use-package org-footnote
    :ensure nil
    :after org
    :custom
    (org-footnote-section nil)            ; Don't create footnote headline
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline nil))

  ;;;; Org-babel
  (use-package ob
    :ensure nil
    :custom
    (org-babel-load-languages '((python . t)
                                (emacs-lisp . t)))
    (org-confirm-babel-evaluate nil))


  ;;;; Org-refile
  (use-package org-refile
    :ensure nil
    :custom
    (org-refile-use-cache nil)
    (org-refile-targets
     `((,(krisb-org-agenda-directory-files) . (:level . 0))
       (,(krisb-org-agenda-directory-files) . (:tag . "project"))
       (,krisb-org-agenda-main-file . (:maxlevel . 3))))
    ;; TODO 2024-10-07: Think about whether I actually want this before. What if I
    ;; want to refile to a non-todo heading in the current file?
    (org-refile-target-verify-function    ; Only let not done todos be refile targets
     (lambda () (if (org-entry-is-todo-p) (not (org-entry-is-done-p)))))
    (org-refile-allow-creating-parent-nodes 'confirm)
    :config
    ;; Workaround for orderless issue with `org-refile'. See
    ;; https://github.com/minad/vertico#org-refile
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)
    (when (bound-and-true-p vertico-mode)
      (advice-add #'org-olpath-completing-read :around
                  (lambda (&rest args)
                    (minibuffer-with-setup-hook
                        (lambda () (setq-local completion-styles '(basic)))
                      (apply args))))))

  ;;;; Org-archive
  (use-package org-archive
    :ensure nil
    :custom
    (org-archive-subtree-save-file-p 'from-org)
    (org-archive-subtree-add-inherited-tags t))

  ;;;; Org-num
  (use-package org-num
    :ensure nil
    :diminish
    :bind ( :map krisb-toggle-keymap
            ("n" . org-num-mode))
    :custom
    (org-num-face 'fixed-pitch)
    (org-num-skip-commented t)
    (org-num-skip-footnotes t)
    (org-num-skip-unnumbered t))
#+end_src

**** Extras
:PROPERTIES:
:CUSTOM_ID: extras
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Ol
  (use-package ol
    :ensure nil
    :after org
    :config
    ;; Bespoke "color" org link type; meant for in-buffer colorized text as well
    ;; as simple colorized text in export.
    (defun krisb-org-link-color-export (link description format)
      (let ((desc (or description link)))
        (cond
         ((eq format 'latex) (format "\\textcolor{%s}{%s}" link desc))
         (t desc))))

    (org-link-set-parameters "color"
                             :face (lambda (path) `(:foreground ,path))
                             :export #'krisb-org-link-color-export
                             :complete (lambda (&optional _)
                                         (concat "color:"
                                                 (completing-read "Choose color: " (list-colors-duplicates (defined-colors)))))))

  ;;; Org-contrib
  (use-package org-contrib
    :after org
    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))) ; The ignore tag will export contents but ignore heading

  ;;; Krisb-org-ext
  (use-package krisb-org-ext
    :ensure nil
    :after org
    :hook (org-mode . krisb-org-ext-setup-eldoc)
    :config
    (defun krisb-org-ext-setup-eldoc ()
      "Set up `eldoc-documentation-functions' in org-mode buffers."
      (add-hook 'eldoc-documentation-functions #'krisb-org-ext-eldoc-footnote nil t)
      (setq-local eldoc-idle-delay 1)))

  ;;; Org-modern
  (use-package org-modern
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda))
    :custom
    (org-modern-keyword nil)

    (org-modern-hide-stars "· ") ; Is affected by the value of `org-hide-leading-stars'
    (org-modern-star 'fold)
    (org-modern-fold-stars
     '(("▶" . "▼")
       ("▷" . "▽")
       ("⯈" . "⯆")
       ("▹" . "▿")
       ("▸" . "▾")))

    (org-modern-todo t) ; NOTE 2024-10-10: I set `org-modern-todo-faces' in my org-agenda section
    (org-modern-priority t)
    ;; See my value for `org-priority-faces'
    (org-modern-priority-faces
     '((?A :inverse-video t :inherit (bold org-priority))
       (?B :inverse-video t :inherit (bold org-priority))
       (?C :inverse-video t :inherit org-priority)
       (?D :inverse-video t :inherit org-priority)
       (?E :inverse-video t :inherit (shadow org-priority))
       (?F :inverse-video t :inherit (shadow org-priority))))
    ;; See my value for `org-todo-keyword-faces'
    (org-modern-todo-faces
     '(("NEXT" :inherit (bold success org-modern-todo))
       ("TODO" :inherit (org-todo org-modern-todo))
       ("HOLD" :inherit (shadow error org-modern-todo))
       ("MAYBE" :inherit (shadow org-todo org-modern-todo))
       ("DONE" :inherit (bold org-done org-modern-todo))
       ("CANCELED" :inherit (error org-modern-todo))))

    (org-modern-label-border 3)
    (org-modern-tag t)

    (org-modern-block-fringe nil) ; Doesn't work well with `olivetti-style' set to 'fancy
    (org-modern-block-name '("⌜" . "⌞"))

    (org-modern-footnote '(nil (raise 0.15) (height 0.9)))
    (org-modern-list '((?+ . "◦")
                       (?- . "–")
                       (?* . "•")))
    (org-modern-timestamp t)

    (org-modern-table t)
    (org-modern-table-vertical 3)
    (org-modern-table-horizontal 0.1)
    :custom-face
    (org-modern-label
     ((t :height 0.9 :width condensed :weight regular :underline nil)))
    (org-modern-todo ((t :weight semibold :inverse-video t :inherit org-modern-label)))
    :config
    (krisb-modus-themes-setup-faces
     "org-modern"
     (setopt org-modern-tag-faces
             `(("project"
                :foreground ,(face-background 'default nil t)
                :background ,(face-foreground 'modus-themes-fg-magenta-cooler nil t))))))

  ;;; Org-appear
  ;; Show hidden characters (e.g. emphasis markers, link brackets) when point is
  ;; over enclosed content
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-delay 0.0)
    (org-appear-trigger 'always)
    (org-appear-autoemphasis t)
    (org-appear-autolinks 'just-brackets)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    (org-appear-inside-latex t))

  ;;; Org-bulletproof
  ;; Automatically cycle plain list bullet point styles.
  (use-package org-bulletproof
    :hook (org-mode . org-bulletproof-mode)
    :custom
    (org-bulletproof-ordered-cycle '("1." "1)"))
    (org-bulletproof-unordered-cycle '("+" "-" "*")))

  ;;; Org-web-tools
  ;; Paste https links with automatic descriptions
  (use-package org-web-tools
    :bind ( :map krisb-yank-keymap
            ("b" . org-web-tools-insert-link-for-url))
    :config
    (with-eval-after-load 'org-attach
      (add-to-list 'org-attach-commands
                   '((?w) org-web-tools-archive-attach
                     "Download then attach an archive of a webpage using `org-web-tools'\n")))

    (advice-add 'org-web-tools-read-url-as-org :after #'view-mode))

  ;;; Org-hide-drawers
  ;; Make org drawers less visually obtrusive.
  (use-package org-hide-drawers
    :load-path "/home/krisbalintona/emacs-repos/packages/org-hide-drawers/"
    :diminish
    :hook (org-mode . org-hide-drawers-mode)
    :bind ( :map krisb-toggle-keymap
            ("h" . org-hide-drawers-transient))
    :custom
    (org-hide-drawers-hide-top-level-properties-drawer nil)
    (org-hide-drawers-keep-visible-properties
     '("CUSTOM_ID" "ID"
       "TOC"))                            ; For org-make-toc
    (org-hide-drawers-keep-visible-properties-ignore-case-p t)
    (org-hide-drawers-keep-visible-drawers
     '("CONTENTS"))                       ; For org-make-toc
    (org-hide-drawers-keep-visible-drawers-ignore-case-p t)
    :config
    (require 'transient)
    (transient-define-prefix org-hide-drawers-transient ()
      "Transient map for useful org-hide-drawers commands."
      [("h" "Hide drawers" org-hide-drawers-make-overlays)
       ("u" "Unhide drawers" org-hide-drawers-delete-overlays)
       ("t" "Toggle hiding" org-hide-drawers-toggle)]))

  ;;; Org-bookmark-heading
  (use-package org-bookmark-heading
    ;; TODO 2024-10-30: Consider also adding `org-cycle-set-startup-visibility' to
    ;; `org-bookmark-heading-after-jump-hook'
    :custom
    (org-bookmark-heading-make-ids nil))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-5
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Provide
  (provide 'krisb-org)
#+end_src

*** =krisb-org-export.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-exportel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-export.el"
  ;;; Ox (org-export)
  (use-package ox
    :ensure nil
    :custom
    (org-export-coding-system 'utf-8)
    (org-export-with-tags t)
    (org-export-with-smart-quotes t)
    (org-export-with-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-export-with-section-numbers nil)
    (org-time-stamp-formats               ; Format of time stamps in the file
     '("%Y-%m-%d %a" . "%Y-%m-%d %a %H:%M"))
    (org-display-custom-times t)          ; Export with custom time stamps?
    (org-time-stamp-custom-formats        ; Format of exported time stamps
     '("%a, %b %-d" . "%a, %b %-d (%-H:%M%p)"))

    (org-image-actual-width 700)          ; Image widths on export

    ;; Asynchronous
    (org-export-in-background nil)        ; Default?
    (org-export-async-debug t)
    (org-export-async-init-file (locate-library "quickstart")) ; TODO 2024-10-19: Make a "quickstart" init.el
    :config
    ;; Taken from
    ;; https://endlessparentheses.com/better-time-stamps-in-org-export.html
    (defun krisb-org-export-filter-timestamp-reformat (timestamp backend info)
      "Remove <> or [] surrounding time-stamps when exporting HTML and LaTeX."
      (cond
       ((org-export-derived-backend-p backend 'latex)
        (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
       ((org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))))
    (add-to-list 'org-export-filter-timestamp-functions #'krisb-org-export-filter-timestamp-reformat))

  ;;; Ox-odt
  (use-package ox-odt
    :ensure nil
    :ensure-system-package (soffice . libreoffice-still)
    :custom
    (org-odt-preferred-output-format "docx")) ; Convert to .docx at the end of conversion

  ;;; Ox-html
  (use-package ox-html
    :ensure nil
    :custom
    ;; Resolve HTML exports not using the name of the target of ID links, using
    ;; internal ID values instead.  As per
    ;; https://github.com/meedstrom/org-node?tab=readme-ov-file#appendix-iii-random-tips
    (org-html-prefer-user-labels t))

  ;;; Ox-latex
  (use-package ox-latex
    :ensure nil
    :after org
    :custom
    ;; A more QoL compiler that is generally slower at compiling.
    (org-latex-compiler "lualatex")
    ;; Most comprehensive exporting method of code blocks.  This requires the
    ;; Emacs package engrave-faces (available from GNU ELPA), and the LaTeX
    ;; package fvextra be installed.  For more information on configuring the
    ;; output format, read the option's docstring.
    (org-latex-src-block-backend 'engraved)
    ;; Templates commands
    (org-latex-title-command
     "\\maketitle")
    (org-latex-toc-command
     "\\renewcommand{\\contentsname}{
    \\begin{center}
      Table of Contents
    \\end{center}
  }
  \\tableofcontents
  \\newpage\n")
    (org-export-with-toc nil)             ; I generally don't want a ToC exported
    (org-latex-packages-alist
     '(("" "lipsum" nil)))                ; Sample text
    (org-latex-hyperref-template
     "\\hypersetup{
  pdfauthor={%a},
  pdftitle={%t},
  pdfkeywords={%k},
  pdfsubject={%d},
  pdfcreator={%c},
  pdflang={%L}
  colorlinks={true},
  hidelinks={true}}\n")                   ; Hide hyperlinks
    :config
  ;;;; Bespoke `org-latex-classes'
    ;; For papers using the Modern Language Association (MLA) citation style
    (add-to-list 'org-latex-classes
                 `("mla" ,(format "%% * Preamble
  \\documentclass[12pt,letterpaper]{article}

  %% * Org-export macro blocks
  [DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]

  %% * MLA package
  \\usepackage{%s/latex/packages/mla}"
                                  (directory-file-name krisb-org-directory))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    ;; For papers using the Chicago Manual of Style (CMS) citation style
    (add-to-list 'org-latex-classes
                 `("cms" ,(format "%% * Preamble
  \\documentclass[12pt,letterpaper]{article}

  %% * Org-export macro blocks
  [DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]

  %% * My CMS package
  \\usepackage{%s/latex/packages/chicago-manual-style}"
                                  (directory-file-name krisb-org-directory))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    ;; For my bespoke "review" sheets
    (add-to-list 'org-latex-classes
                 `("review" ,(format "%% * Preamble
  \\documentclass[a4paper,landscape]{article}

  %% * Org-export macro blocks
  [NO-DEFAULT-PACKAGES]
  [PACKAGES]
  [EXTRA]

  %% ** Review package
  \\usepackage{%s/latex/packages/review}"
                                     (directory-file-name krisb-org-directory))
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


  ;;;;; Processing org-latex export of custom keywords
    ;; Process bespoke keywords for my academic papers in org-export.  Ordinarily,
    ;; only keywords recognized by the org-export backend are processed.
    ;; Consequently, we cannot use `org-export-filter-keyword-functions'.
    ;; Instead, we use `org-export-before-processing-hook' to transform the
    ;; desired keywords into another form that is recognized and exported
    ;; appropriately by the export backend
    ;;
    ;; See (info "(org) Advanced Export Configuration") for more information on
    ;; the order of steps in the export process.
    (defun krisb-org-latex-before-processing---paper-keywords (backend)
      "Transform custom keywords related to academic papers for LaTeX export.
  This function transforms the \"professor\" and \"course\" keywords.
  They are replaced with a \"#+LATEX_HEADER\" keyword-value that exports
  into the form my bespoke .sty files expect.

  BACKEND is the org-export backend, as a symbol."
      (when (org-export-derived-backend-p backend 'latex)
        (save-excursion
          (while (re-search-forward org-keyword-regexp nil t)
            (let ((key (match-string 1))
                  (val (match-string 2))
                  command arg)
              (pcase (upcase key)
                ("PROFESSOR"
                 (setq command "professor"
                       arg (concat "Professor " (if (string-empty-p val)
                                                    ;; When keyword value is
                                                    ;; empty, use "PROFESSOR" as a
                                                    ;; placeholder
                                                    "PROFESSOR"
                                                  val))))
                ("COURSE"
                 (setq command "course"
                       arg (if (string-empty-p val)
                               ;; When keyword value is empty, use "COURSE" as a
                               ;; placeholder
                               "COURSE"
                             val))))
              ;; Execute the replacement
              (when (and command arg)
                (replace-match (format "#+LATEX_HEADER: \\newcommand{\\%s}{%s}" command arg) nil t)))))))

    (add-to-list 'org-export-before-processing-hook #'krisb-org-latex-before-processing---paper-keywords))

  ;;; Provide
  (provide 'krisb-org-export)
#+end_src

*** =krisb-markdown.el=
:PROPERTIES:
:CUSTOM_ID: krisb-markdownel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-markdown.el"
  ;;; Markdown-mode
  (use-package markdown-mode
    :mode ("INSTALL\\'" "CONTRIBUTORS\\'" "LICENSE\\'" "README\\'")
    :hook (markdown-mode . visual-line-mode))

  ;;; Provide
  (provide 'krisb-markdown)
#+end_src

*** =krisb-flymake.el=
:PROPERTIES:
:CUSTOM_ID: krisb-flymakeel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-flymake.el"
  ;;; Flymake
  (use-package flymake
    :hook ((prog-mode org-mode) . flymake-mode)
    :bind ( :map goto-map
            ("M-p" . flymake-goto-prev-error)
            ("M-n" . flymake-goto-next-error))
    :custom
    (elisp-flymake-byte-compile-load-path '("./")) ; Which libraries and files does flymake know about?
    (flymake-wrap-around nil)
    (flymake-fringe-indicator-position nil)       ; Disable fringe indicators
    (flymake-show-diagnostics-at-end-of-line nil)
    (flymake-suppress-zero-counters :warning)
    (flymake-mode-line-format
     '(" " flymake-mode-line-title flymake-mode-line-exception flymake-mode-line-counters))
    (flymake-mode-line-counter-format
     '("["
       flymake-mode-line-error-counter
       flymake-mode-line-warning-counter
       flymake-mode-line-note-counter
       "]"))
    :config
    (setq flymake-mode-line-counters
          '(:eval (if (mode-line-window-selected-p)
                      (flymake--mode-line-counters)
                    (propertize (format-mode-line (flymake--mode-line-counters))
                                'face '(:inherit (bold mode-line-inactive)))))))

  ;;; Flymake-collection
  (use-package flymake-collection
    :ensure-system-package vale
    :after flymake
    :custom
    (flymake-collection-hook-inherit-config t)
    (flymake-collection-hook-ignore-modes nil)
    (flymake-collection-vale-extension-function
     'krisb-flymake-collection-vale-extension-function)
    :init
    (defun krisb-flymake-collection-vale-extension-function (buffer)
      "My own function for `flymake-collection-vale-extension-function'.
  Behaves like `flymake-collection-vale-default-extension-function' but
  with the following exceptions:
  - In org-src buffers, use the extension of the source buffer.
  - In org buffers without an associated file, return the \"org\" extension."
      (let* ((file-name (buffer-file-name buffer))
             (extension (and file-name (file-name-extension file-name))))
        (cond
         (extension
          extension)
         ((org-src-edit-buffer-p buffer)
          (file-name-extension
           (buffer-file-name
            (org-src-source-buffer))))
         ((equal 'org-mode (buffer-local-value 'major-mode buffer))
          "org"))))
    :config
    ;; NOTE 2024-10-05: Set `flymake-collection-hook-config' immediately when the
    ;; package loads, so the first invocation of `flymake-collection-hook-setup'
    ;; uses my configured value.  NOTE 2024-10-05: I configure vale to use
    ;; proselint to my liking, so I disable the proselint checker. One reason that
    ;; motivates this decision is vale's performance compared to proselint (see
    ;; https://github.com/errata-ai/vale?tab=readme-ov-file#benchmarks).
    (setf (alist-get 'org-mode flymake-collection-hook-config)
          '((flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :depth -1
             :disabled t))
          (alist-get 'markdown-mode flymake-collection-hook-config)
          '((flymake-collection-markdownlint
             :depth -50)
            (flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :disabled t
             :depth -1))
          (alist-get 'notmuch-message-mode flymake-collection-hook-config)
          '((flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :depth -1
             :disabled t)))

    (flymake-collection-hook-setup))

  ;;; Provide
  (provide 'krisb-flymake)
#+end_src

*** =krisb-spelling.el=
:PROPERTIES:
:CUSTOM_ID: krisb-spellingel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-spelling.el"
  ;;; Online
  ;;;; Dictionary
  ;; See definitions of words from an online dictionary.
  (use-package dictionary
    :commands krisb-dictionary-at-point
    :ensure nil
    ;; Don't forget to install the following packages from the AUR:
    ;; paru -S dict-wn dict-gcide dict-moby-thesaurus dict-foldoc
    ;; :ensure-system-package (dict . dictd) ; Localhost (offline). Don't forget to enable the systemd service
    :hook (dictionary-mode . hide-mode-line-mode)
    :bind ("C-h =" . krisb-dictionary-at-point)
    :custom
    (dictionary-use-single-buffer t)
    (dictionary-create-buttons nil)
    (dictionary-read-word-function 'dictionary-read-word-default)
    (dictionary-search-interface nil)
    (dictionary-read-dictionary-function 'dictionary-completing-read-dictionary)
    (dictionary-server
     (if (string-equal (string-trim (shell-command-to-string "systemctl is-active dictd"))
                       "active")
         "localhost" "dict.org"))
    :init
    ;; We place this here to ensure this package is lazy loaded when one of the
    ;; commands is called from embark keymap
    (with-eval-after-load 'embark
      (bind-keys
       :map embark-region-map
       ("=" . krisb-dictionary-at-point)
       :map embark-identifier-map
       ("=" . krisb-dictionary-at-point)))
    :config
    (defun krisb-dictionary-at-point ()
      "Show dictionary definition for word at point.
  If region is active, use the region's contents instead."
      (interactive)
      (if-let ((word (if (use-region-p)
                         (buffer-substring-no-properties (region-beginning) (region-end))
                       (thing-at-point 'word :no-properties))))
          (dictionary-search word)
        (message "No word or region selected."))))

  ;;;; Powerthesaurus
  ;; Search for synonyms using an online thesaurus.
  (use-package powerthesaurus
    :after embark
    :bind ( :map embark-region-map
            ("t" . powerthesaurus-lookup-dwim)
            :map embark-identifier-map
            ("t" . powerthesaurus-lookup-dwim)))

  ;;; Provide
  (provide 'krisb-spelling)
#+end_src

*** Note-taking
:PROPERTIES:
:CUSTOM_ID: note-taking
:END:

**** =krisb-denote.el=
:PROPERTIES:
:CUSTOM_ID: krisb-denoteel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-denote.el"
  ;;; Denote
  (use-package denote
    :pin gnu-elpa-devel
    :autoload (denote-directory-files krisb-denote-auto-rename-file krisb-denote-sluggify-keyword)
    :commands (denote denote-open-or-create)
    :hook ((dired-mode . denote-dired-mode)
           (denote-dired-mode . toggle-truncate-lines))
    :bind ( :map krisb-note-keymap
            ("c" . denote-create-note)
            ("f" . denote-open-or-create)
            ("i" . denote-link-or-create)
            ("e" . denote-org-extras-extract-org-subtree)
            ("k" . denote-rename-file-keywords)
            ("l" . denote-backlinks)
            ("L" . denote-find-backlink)
            ("h" . denote-org-extras-backlinks-for-heading))
    :custom
    (denote-directory krisb-notes-directory)
    (denote-prompts '(subdirectory title keywords signature template))
    (denote-file-name-slug-functions '((title . denote-sluggify-title)
                                       (signature . denote-sluggify-signature)
                                       (keyword . krisb-denote-sluggify-keyword)))
    (denote-known-keywords nil)

    (denote-rename-confirmations '(add-front-matter))
    (denote-org-front-matter "#+title: %s
  ,#+date: %s
  ,#+filetags: %s
  ,#+identifier: %s
  ")
    (denote-templates
     '((plain . "\n")
       (source-note . "
  ,#+begin_src org :exports none
    + Source:
  ,#+end_src\n")
       (mla . "#+latex_class: mla
  ,#+cite_export: biblatex mla-new
  ,#+professor:
  ,#+course:
  ,#+export_file_name:

  ,* Potential titles

  ,* 1 Draft                                                     :export:ignore:

  ,* Works Cited                                                 :ignore:export:

  ,#+begin_export LaTeX
  \\newpage
  \\center
  ,#+end_export

  ,#+print_bibliography:")
       (buoy . "* Responses

  ,* Biographical information

  + Buoy nominations :: tk
  + Instagram handle :: tk

  ,* Potential titles

  1.

  ,* 1 Draft                                                     :ignore:export:
  ")))

    ;; Buffer name
    (denote-rename-buffer-format "%s %t%b")
    (denote-rename-buffer-backlinks-indicator " ⟷")

    ;; Backlinks
    ;; If we want to use a CUSTOM_ID, we should manually create it.  Otherwise,
    ;; setting this to the value `'id' will over-populate my headings with
    ;; CUSTOM_IDs whenever I call `org-capture'.
    (denote-org-store-link-to-heading 'context)
    (denote-backlinks-show-context t)
    (denote-backlinks-display-buffer-action
     '((display-buffer-reuse-window display-buffer-below-selected)
       (window-height . fit-window-to-buffer)
       (post-command-select-window . t)
       (dedicated . t)
       (window-parameters . ((mode-line-format . none)))))

    ;; Miscellaneous
    (denote-date-prompt-use-org-read-date t)
    :config
    (denote-rename-buffer-mode 1)
    (denote-menu-bar-mode 1)

    (krisb-modus-themes-setup-faces
     "denote"
     (set-face-attribute 'denote-faces-link nil :weight 'normal :foreground fg-active-argument :inherit 'unspecified)
     (set-face-attribute 'denote-faces-signature nil :weight 'bold)
     (set-face-attribute 'denote-faces-title nil :weight 'semibold :foreground cyan-cooler)
     (set-face-attribute 'denote-faces-keywords nil :foreground keyword :slant 'italic)
     (set-face-attribute 'denote-faces-date nil :foreground 'unspecified :inherit 'shadow))

    ;; Camel cased keywords
    (defun krisb-denote-sluggify-keyword (str)
      "Sluggify STR while joining separate words.
    My version camelCases keywords."
      (require 's)
      (s-lower-camel-case (denote-slug-hyphenate str)))

    ;; Add inbox to `org-refile-targets'
    (with-eval-after-load 'org-refile
      (add-to-list 'org-refile-targets
                   `(,(car (denote-directory-files "20221011T101254")) . (:maxlevel . 2))))

    ;; Zettel metadata template
    (with-eval-after-load 'org
      (add-to-list 'org-structure-template-alist
                   '("m" . "src org :exports none")))

    ;; Custom link formatting for denote org links
    (defun krisb-denote-link-ol-get-heading ()
      "Get current Org heading text.
  My version uses the full outline path instead of just heading text."
      (let ((heading-text (org-get-heading :no-tags :no-todo :no-priority :no-comment))
            (outline-path (org-get-outline-path)))
        (if outline-path
            (mapconcat #'identity (append outline-path (list heading-text)) " > ")
          heading-text)))
    (advice-add 'denote-link-ol-get-heading :override #'krisb-denote-link-ol-get-heading)

    ;; Advise for archiving within Denote notes
    (defun krisb-org-archive--compute-location-denote-format-string (orig-fun &rest args)
      "Take LOCATION in `org-archive--compute-location' and expand %D.
  %D is expanded to the identifier for the Denote note the archive command
   is invoked in."
      ;; Modify LOCATION before normal operations
      (cl-letf (((car args)
                 (if (fboundp 'denote-retrieve-filename-identifier)
                     (replace-regexp-in-string "%D"
                                               (denote-retrieve-filename-identifier (buffer-file-name (buffer-base-buffer)))
                                               (car args))
                   (car args))))
        (apply orig-fun args))))

  ;;; Denote-journal-extras
  (use-package denote-journal-extras
    :ensure nil
    :custom
    (denote-journal-extras-directory
     (expand-file-name "commonplace_book/journal" denote-directory))
    (denote-journal-extras-keyword "journal")
    (denote-journal-extras-title-format 'day-date-month-year-24h))

  ;;; Krisb-denote-ext
  (use-package krisb-denote-ext
    :ensure nil
    :after denote
    :hook (after-save . krisb-denote-ext-auto-rename-file))

  ;;; Denote-explore
  ;; Useful Denote utilities
  (use-package denote-explore
    :after denote
    ;; Don't forget to install the required dependencies required for my chosen
    ;; `denote-explore-network-format'
    :ensure-system-package ((dot . graphviz)
                            (R . r))
    :custom
    (denote-explore-network-directory     ; Have to end path in slash
     (no-littering-expand-var-file-name "denote-explore/"))
    (denote-explore-network-format 'graphviz)
    (denote-explore-network-graphviz-filetype "svg")
    (denote-explore-network-keywords-ignore '("archive")))

  ;;; Citar-denote
  (use-package citar-denote
    :demand t
    :after (citar denote)
    :diminish
    :bind ( :map krisb-note-keymap
            ("b b" . citar-denote-link-reference)
            ("b o" . citar-denote-dwim)
            ("b c" . citar-create-note)
            ("b n" . citar-denote-open-note)
            ("b k a" . citar-denote-add-citekey)
            ("b k r" . citar-denote-remove-citekey))
    :custom
    (citar-denote-subdir "/bib/")
    (citar-denote-signature nil)
    (citar-denote-title-format nil)       ; Use citekey as title
    (citar-denote-title-format-authors 2)
    (citar-denote-title-format-andstr "and")
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-template 'default)
    (citar-denote-file-types
     `((org
        :reference-format "#+reference: %s\n" ; Keep single space
        :reference-regex "^#\\+reference\\s-*:")
       (markdown-yaml
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")
       (markdown-toml
        :reference-format "reference  = %s\n"
        :reference-regex "^reference\\s-*=")
       (text
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")))
    :config
    (citar-denote-mode 1)

    ;; Keep the reference keyword after Denote's identifier keyword
    (el-patch-defun citar-denote--add-reference (citekey file-type)
      (el-patch-swap
        "Add reference with CITEKEY in front matter of the file with FILE-TYPE.

  `citar-denote-add-citekey' is the interactive version of this function."
        "Add reference with CITEKEY in front matter of the file with FILE-TYPE.
  `citar-denote-add-citekey' is the interactive version of this function.

  My version is has references added to specific line.  Namely, adds the
  ,#+reference after the #+identifier line.")
      (save-excursion
        (goto-char (point-min))
        (el-patch-swap
          (re-search-forward "^\n" nil t)
          (re-search-forward (rx bol (literal "#+identifier:")) nil t))
        (el-patch-remove
          (forward-line -1))
        (el-patch-remove
          (if (not (eq (or file-type 'org) 'org))
              (forward-line -1)))
        (el-patch-add
          (if (eq (or file-type 'org) 'org)
              (forward-line 1)
            (forward-line -2)))
        (insert
         (format (citar-denote--reference-format file-type) citekey)))))

  ;;; Denote-zettel-interface
  (use-package denote-zettel-interface
    :after denote
    :load-path "/home/krisbalintona/emacs-repos/packages/denote-zettel-interface/"
    :autoload denote-zettel-interface--signature-lessp
    :bind ( :map krisb-note-keymap
            ("m" . denote-zettel-interface-list)
            ("r" . denote-zettel-interface-set-signature-list)
            ("R" . denote-zettel-interface-set-signature-minibuffer))
    :custom
    (denote-zettel-interface-signature-column-width
     (+ 6 (cl-loop for file in (denote-directory-files)
                   maximize (length (denote-retrieve-filename-signature file)))))
    (denote-zettel-interface-title-column-width 120)
    (denote-zettel-interface-starting-filter-presets
     '("zettels/[^z-a]*" "bib/[^z-a]*"))
    (denote-zettel-interface-starting-filter "zettels/[^z-a]*")
    :init
    (with-eval-after-load 'denote
      (setopt denote-sort-signature-comparison-function #'denote-zettel-interface--signature-lessp)))

  ;;; Provide
  (provide 'krisb-denote)
#+end_src

**** =krisb-org-roam.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-roamel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-roam.el"
  ;; -*- lexical-binding: t; -*-

  ;;; Org-roam
  (use-package org-roam
    :bind ( :map krisb-note-keymap
            ("f" . org-roam-node-find)
            ("i" . org-roam-node-insert)
            ("c" . org-roam-capture)
            ("l" . org-roam-buffer-toggle)
            ("ta" . org-roam-tag-add)
            ("tr" . org-roam-tag-remove)
            ("g" . org-roam-graph))
    :custom
    (org-roam-directory krisb-notes-directory)
    (org-roam-capture-templates
     '(("p" "plain" plain "%?"
        :target (file+head "%(let* ((subdirs
          (mapcar (lambda (dir) (file-relative-name dir org-roam-directory))
                  (seq-filter #'file-directory-p
                              (directory-files org-roam-directory t \"^[^.]\" t))))
         (subdir (expand-file-name
                  (completing-read \"Subdirectory: \" subdirs)
                  org-roam-directory)))
    (expand-file-name (concat (format-time-string \"%Y%m%dT%H%M%S\") \".org\")
                      subdir))"
                           "#+title: ${title}\n")
        :unnarrowed t
        :immediate-finish t)
       ("s" "source" plain "%?"
        :target (file+head "main/%<%Y%m%dT%H%M%S>.org"
                           ":PROPERTIES:
  :ROAM_TYPE: source
  :ROAM_%^{Context or source?|SOURCE|CONTEXT}: %(org-roam-node-insert)
  :END:\n#+title: ${title}\n")
        :unnarrowed t
        :immediate-finish t)
       ("c" "collection" plain "%?"
        :target (file+head "main/%<%Y%m%dT%H%M%S>.org"
                           ":PROPERTIES:
  :ROAM_BOX: main
  :ROAM_TYPE: collection
  :END:\n#+title: ${title}\n")
        :unnarrowed t
        :immediate-finish t)
       ("r" "reference" plain "%?"
        :target (file+head "references/%<%Y%m%dT%H%M%S>.org"
                           "#+title: ${title}\n")
        :unnarrowed t
        :immediate-finish t)
       ("b" "blog" plain "%?"
        :target (file+head "main/%<%Y%m%dT%H%M%S>.org"
                           "#+title: ${title}
  ,#+filetags:
  ,#+hugo_bundle:
  ,#+export_file_name: index
  ,#+hugo_tags:
  ,#+hugo_categories:
  ,#+hugo_publishdate:
  ,#+hugo_lastmod:
  ,#+hugo_custom_front_matter:
  ,#+hugo_custom_front_matter: :TableOfContents false
  ,#+hugo_draft: true
  ,#+hugo_paired_shortcodes:\n")
        :unnarrowed t
        :immediate-finish t)))
    (org-roam-db-node-include-function
     (lambda () (not (member "ATTACH" (org-get-tags)))))
    (org-roam-db-gc-threshold most-positive-fixnum)
    (org-roam-mode-sections
     '((org-roam-backlinks-section :unique t)
       org-roam-reflinks-section))
    :config
    ;; 2025-03-24: Using org-node/indexed.el to replace this.  I dont enable it at
    ;; all because enabling causes a `org-roam-db-sync' on startup since it
    ;; detects that indexed's db isn't its own...
    ;; (org-roam-db-autosync-mode 1)

    ;; See (info "(org-roam) org-roam-export")
    (with-eval-after-load 'ox-html
      (require 'org-roam-export))

    ;; Advise for archiving org-roam nodes
    (defun krisb-org-archive--compute-location-org-roam-format-string (orig-fun &rest args)
      "Take LOCATION in `org-archive--compute-location' and expand %R.
  Meant to be used as around advice for `org-archive--compute-location'.

  %R is expanded to the identifier for the org-roam node (at point) the
  archive command is invoked in. If there is no node at point, then expand
  to the file path instead."
      ;; Modify LOCATION before normal operations
      (cl-letf (((car args)
                 (if (fboundp 'org-roam-node-at-point)
                     (replace-regexp-in-string "%R"
                                               (if (org-roam-db-node-p)
                                                   (org-roam-node-id (org-roam-node-at-point 'assert))
                                                 (buffer-file-name (buffer-base-buffer)))
                                               (car args))
                   (car args))))
        (apply orig-fun args)))
    (advice-add 'org-archive--compute-location :around #'krisb-org-archive--compute-location-org-roam-format-string)

    ;; Custom face for ID links to org-roam-nodes.  I prefer to change their
    ;; foreground color to differentiate them from other types of links as well as
    ;; to use a lighter face because a buffer packed-full of org links can become
    ;; visually distracting and cluttered otherwise.
    (org-link-set-parameters
     "id"
     :face (lambda (id)
             (if (org-roam-node-from-id id)
                 '(:weight light :inherit font-lock-keyword-face)
               'org-link)))

    ;; Custom stored description
    (org-link-set-parameters
     "id"
     :store (lambda (&optional interactive?)
              (let* ((id (org-id-get))
                     (node (org-roam-node-from-id id)))
                (if (and (equal major-mode 'org-mode)
                         ;; We want to check more than if there is a node at
                         ;; point; we want to make sure ID corresponds to an
                         ;; existing node
                         node)
                    (org-link-store-props :type "id"
                                          :link (concat "id:" id)
                                          :description (org-roam-node-formatted node))
                  (funcall 'org-id-store-link-maybe interactive?)))))

    ;; Add files with node(s) tagged with "__orgAgenda" but not with "archive" to
    ;; `org-agenda-files' list
    (with-eval-after-load 'org-agenda
      (dolist (file (mapcar #'org-roam-node-file
                            (cl-remove-if-not
                             (lambda (node)
                               (let ((tags (org-roam-node-tags node)))
                                 (and (member "__orgAgenda" tags)
                                      (not (member "archive" tags)))))
                             (org-roam-node-list))))
        (add-to-list 'org-agenda-files file))
      (setopt org-agenda-hide-tags-regexp "^__"))

    ;; Fold headings by default
    (add-to-list 'org-roam-buffer-postrender-functions #'magit-section-show-level-2))

  ;;; Krisb-org-roam-ext
  (use-package krisb-org-roam-ext
    :ensure nil
    :bind ( :map krisb-note-keymap
            ("." . krisb-org-roam-ext-properties-transient))
    :custom
    ;; Customize how nodes are inserted via `org-roam-node-insert'
    (org-roam-node-formatter 'krisb-org-roam-node-formatter)
    :config
    ;; The full content of each template element is present (i.e. searchable) even
    ;; if visually absent/truncated
    (setopt org-roam-node-display-template
            (concat "${directories-display-template:8} "
                    ;; FIXME 2024-11-16: For some reason using :* to automatically set
                    ;; length produces too-wide a column
                    (concat "${address-display-template:"
                            (number-to-string
                             (1+ (or (cl-loop for node in (org-roam-node-list)
                                              maximize (length (org-roam-node-address node)))
                                     2))) ; Have default: prevents startup error when (org-roam-node-list) is nil
                            "}")
                    "${type-display-template}"
                    "${person-display-template}"
                    "${hierarchy}"
                    (propertize " ${tags:60}" 'face 'org-tag)))

    ;; Define bespoke transient menu for node properties
    (transient-define-prefix krisb-org-roam-ext-properties-transient ()
      "Transient menu for setting org-roam properties."
      ["Properties"
       ["Generic"
        (org-id-get-create
         :key "a"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Add ID" "ID" "Modify ID"))
        (org-expiry-insert-created
         :key "C"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Add CREATED" "CREATED"))]
       ["All nodes"
        (krisb-org-roam-ext-set-roam-box
         :key "b"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_BOX" "ROAM_BOX"))
        (krisb-org-roam-ext-toggle-roam-exclude
         :key "e"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Toggle ROAM_EXCLUDE" "ROAM_EXCLUDE"))]
       ["Idea-specific"
        (krisb-org-roam-ext-set-roam-type
         :key "t"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_TYPE" "ROAM_TYPE"))
        (krisb-org-roam-ext-set-roam-source
         :key "s"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_SOURCE" "ROAM_SOURCE"))
        (krisb-org-roam-ext-set-roam-context
         :key "c"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_CONTEXT" "ROAM_CONTEXT"))
        (krisb-org-roam-ext-set-roam-person
         :key "r"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_PERSON" "ROAM_PERSON"))
        (krisb-org-roam-ext-set-roam-place
         :key "p"
         :transient t
         :description ,(krisb-org-roam-ext-transient--dyn-roam-property-description "Set ROAM_PLACE" "ROAM_PLACE"))]]
      [["Navigation"
        ("C-u" "Up heading" org-up-heading :transient t)
        ("C-p" "Next heading" org-previous-visible-heading :transient t)
        ("C-n" "Next heading" org-next-visible-heading :transient t)
        ("C-f" "Forward heading same level" org-forward-heading-same-level :transient t)
        ("C-b" "Backward heading same level" org-backward-heading-same-level :transient t)]
       ["Visibility"
        ("M-t" "Toggle visibility of heading contents" krisb-org-roam-ext-toggle-heading-content-visibility :transient t)
        ("M-T" "Toggle visibility of properties drawer" krisb-org-roam-ext-toggle-properties-visibility :transient t)]]))

  ;;; Org-roam-ui
  (use-package org-roam-ui
    :after org-roam
    :diminish (org-roam-ui-mode org-roam-ui-follow-mode)
    :hook (org-roam-ui-mode . krisb-org-roam-ui-update-theme)
    :custom
    (org-roam-ui-open-on-start nil)
    :config
    ;; Resolve conflict with desktop.el behavior.  See
    ;; https://github.com/org-roam/org-roam-ui/issues/202#issuecomment-1014711909
    (add-to-list 'desktop-minor-mode-table
                 '(org-roam-ui-mode nil))
    (add-to-list 'desktop-minor-mode-table
                 '(org-roam-ui-follow-mode nil))

    (defun krisb-org-roam-ui-update-theme (&optional _)
      "Update org-roam-ui theme if `org-roam-ui-sync-theme' is non-nil.
  This function is added to `enable-theme-functions' and can also be
  called outright."
      (when (and org-roam-ui-sync-theme org-roam-ui-mode)
        (call-interactively 'org-roam-ui-sync-theme)))

    ;; Update graph theme on theme change
    (add-hook 'enable-theme-functions #'krisb-org-roam-ui-update-theme))

  ;;; Citar-org-roam
  (use-package citar-org-roam
    ;; 2025-03-25: Use `citar-org-node' now.  We forcefully disable this to
    ;; prevent this package from internally calling an `org-roam-db-sync' with t,
    ;; which, with `indexed-roam-mode' and `indexed-roam-overwrite' to non-nil,
    ;; will cause a full, long database sync on startup.
    :disabled t
    :after (:any citar org-roam)
    :diminish citar-org-roam-mode
    :bind ( :map krisb-note-keymap
            ("b r" . citar-org-roam-ref-add)
            ("b o" . citar-org-roam-open-current-refs))
    :custom
    (citar-org-roam-subdir "references/")
    (citar-org-roam-capture-template-key "r")
    (citar-org-roam-template-fields
     '((:citar-title . ("title"))
       (:citar-author . ("author" "editor"))
       (:citar-date . ("date" "year" "issued"))
       (:citar-pages . ("pages"))
       (:citar-type . ("=type="))
       ;; Allow citar to pass the "key" field, which we can use in
       ;; `citar-org-roam-note-title-template' as "=key=", like ${=key=}
       (:citar-key . ("=key="))))
    (citar-org-roam-note-title-template "${=key=} ${citar-key}")
    :config
    (citar-org-roam-mode 1))

  ;;; Org-roam-folgezettel
  (use-package org-roam-folgezettel
    :load-path "/home/krisbalintona/emacs-repos/packages/org-roam-folgezettel/"
    :hook ((org-roam-folgezettel-mode . hl-line-mode)
           (org-roam-folgezettel-mode . (lambda () (setq-local line-spacing 0.2))))
    :bind ( :map krisb-note-keymap
            ("m" . org-roam-folgezettel-list)
            ("s" . org-roam-folgezettel-show-node-in-list))
    :custom
    (org-roam-folgezettel-filter-query '(box "main"))
    :init
    (with-eval-after-load 'vtable
      (el-patch-defun vtable-goto-object (object)
        "Go to OBJECT in the current table.
  Return the position of the object if found, and nil if not."
        (let ((start (point)))
          (vtable-beginning-of-table)
          (save-restriction
            (narrow-to-region (point) (save-excursion (vtable-end-of-table)))
            (if (text-property-search-forward 'vtable-object object (el-patch-swap #'eq #'equal))
                (progn
                  (forward-line -1)
                  (point))
              (goto-char start)
              nil)))))
    :config
    (with-eval-after-load 'embark
      (require 'org-roam-folgezettel-embark))

    ;; We must add these after their default values are set by org
    (with-eval-after-load 'org
      ;; Add ROAM_* properties to properties completing-read interface completions
      (dolist (prop '("ROAM_EXCLUDE"
                      "ROAM_PLACE"
                      "ROAM_PERSON"
                      "ROAM_SOURCE"
                      "ROAM_CONTEXT"
                      "ROAM_REFS"
                      "ROAM_TYPE"
                      "ROAM_BOX"))
        (add-to-list 'org-default-properties prop))

      ;; Set inherited default values for some ROAM_* properties
      (add-to-list 'org-global-properties '("ROAM_TYPE" . "source collection pointer"))
      (add-to-list 'org-use-property-inheritance "ROAM_BOX")))

  ;;; Provide
  (provide 'krisb-org-roam)
#+end_src

**** =krisb-org-node.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-nodeel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-node.el"
  ;;; Org-node
  (use-package org-node
    :vc ( :url "https://github.com/meedstrom/org-node.git"
          :branch "dev"
          :rev :newest)
    :bind ( :map krisb-note-keymap
            ("l" . org-node-context-toggle)
            ([remap org-roam-buffer-toggle] . org-node-context-toggle)
            ("f" . org-node-find)
            ("i" . org-node-insert-link)
            ("t a" . org-node-add-tags-here))
    :custom
    (org-node-ask-directory t)
    (org-node-datestamp-format "%Y%m%dT%H%M%S--")
    (org-node-context-persist-on-disk t)
    (org-node-cache-everything t) ; For programming purposes; populates `org-node--file<>lnum.node.'
    (org-node-affixation-fn 'krisb-org-node-affixation-fn)
    (org-node-alter-candidates t)
    (org-node-custom-link-format-fn #'krisb-org-node-custom-link-format-fn)
    (org-node-filter-fn #'krisb-org-node-filter-fn)
    (org-node-warn-title-collisions nil)
    (org-node-renames-allowed-dirs (list krisb-notes-directory))
    :config
    (org-node-cache-mode 1)
    (org-node-context-follow-mode 1)

    ;; Bespoke filtering (exclusion) function
    (defun krisb-org-node-filter-fn (node)
      "Predicate for whether to include NODE.
  If non-nil, include.  If nil, exclude.  This predicate excludes these
  nodes:
  - With non-nil ROAM_EXCLUDE property value."
      (not (or (assoc "ROAM_EXCLUDE" (org-node-get-properties node)))))

    ;; Bespoke `org-node-find'
    (cl-defmethod krisb-org-node-get-box ((node indexed-org-entry))
      "Return the value of the ROAM_BOX property of NODE."
      (cdr (assoc "ROAM_BOX" (org-node-get-properties node) #'string-equal)))

    (cl-defmethod krisb-org-node-box-or-dir ((node indexed-org-entry))
      "Return a fontified value of the ROAM_BOX property of NODE.
  If the ROAM_BOX property of NODE is nil, returns the directory name
  containing NODE instead."
      (let ((box (krisb-org-node-get-box node))
            (dir (file-name-nondirectory
                  (directory-file-name
                   (file-name-directory (org-node-get-file node))))))
        (propertize (or box (concat "/" dir)) 'face 'shadow)))

    (cl-defmethod krisb-org-node-get-place ((node indexed-org-entry))
      "Return the value of the ROAM_PLACE property of NODE."
      (cdr (assoc "ROAM_PLACE" (org-node-get-properties node))))

    (cl-defmethod krisb-org-node-get-type ((node indexed-org-entry))
      "Return the value of the ROAM_TYPE property of NODE."
      (cdr (assoc "ROAM_TYPE" (org-node-get-properties node) #'string-equal)))

    (cl-defmethod krisb-org-node-get-person ((node indexed-org-entry))
      "Return the value of the ROAM_PERSON property of NODE."
      (cdr (assoc "ROAM_PERSON" (org-node-get-properties node) #'string-equal)))

    (cl-defmethod krisb-org-node-olp-full-propertized ((node indexed-org-entry))
      "Return the full outline path of NODE fontified.
  The full outline path of NODE (given by `org-node-get-olp-full')
  surrounded by parentheses and whose parts are separated by \" > \".
  Additionally, the entire string is fontified to the shadow face."
      (let ((olp (propertize (string-join (org-node-get-olp-full node) " > ") 'face 'shadow)))
        (unless (string-empty-p olp)
          (concat
           (propertize "(" 'face 'shadow)
           olp
           (propertize ")" 'face 'shadow)))))

    (cl-defmethod krisb-org-node-tags-propertized ((node indexed-org-entry))
      "Return the full outline path of NODE fontified."
      (when-let ((tags (org-node-get-tags node)))
        (propertize (concat "#" (string-join tags " #")) 'face 'org-tag)))

    (defun krisb-org-node-affixation-fn (node title)
      "Given NODE and TITLE, add a bespoke prefix and suffix.
  For use as `org-node-affixation-fn'."
      (let ((box-or-dir (krisb-org-node-box-or-dir node))
            (place (krisb-org-node-get-place node))
            (type (krisb-org-node-get-type node))
            (person (krisb-org-node-get-person node))
            (olp-full (krisb-org-node-olp-full-propertized node))
            (tags (krisb-org-node-tags-propertized node)))
        (list title
              ;; Prefix
              (concat (when box-or-dir (concat box-or-dir " "))
                      (when place (propertize (concat place " ") 'face 'shadow))
                      (when type (propertize (concat "&" type " ") 'face 'font-lock-doc-face))
                      (when person (propertize (concat "@" person " ") 'face 'font-lock-keyword-face)))
              ;; Suffix
              (concat " "
                      (when olp-full (concat olp-full " "))
                      tags))))

    ;; Bespoke `org-node-custom-link-format-fn' function
    (cl-defmethod krisb-org-node-custom-link-format-fn ((node indexed-org-entry))
      "Bespoke function for `org-node-custom-link-format-fn'."
      (if (or (file-in-directory-p (org-node-get-file node) krisb-org-agenda-directory)
              (file-in-directory-p (org-node-get-file node) krisb-org-archive-directory))
          (org-node-get-title node)
        (let* ((place (krisb-org-node-get-place node))
               (type (krisb-org-node-get-type node))
               (title (org-node-get-title node))
               (file-title (org-node-get-file-title node)))
          (concat (when place (format "(%s) " place))
                  (when type (format "{%s} " type))
                  title
                  (when (or (not (string= title file-title))
                            (not file-title))
                    (propertize (concat " (" file-title ")") 'face 'shadow)))))))

  ;;; Org-node-fakeroam
  (use-package org-node-fakeroam
    :disabled t                           ; 2025-03-20: We have indexed.el now
    :after org-roam
    :custom
    (org-roam-db-update-on-save nil)      ; Don't update DB on save, not needed
    (org-roam-link-auto-replace nil)      ; Don't look for "roam:" links on save
    :config
    (org-roam-db-autosync-mode -1)
    (org-node-fakeroam-db-feed-mode 1))   ; Keep Roam DB up to date

  ;;; Citar-org-node
  (use-package citar-org-node
    :ensure nil
    :load-path "/home/krisbalintona/emacs-repos/packages/citar-org-node/"
    :after (:any citar org-node)
    :demand t
    :diminish
    :bind ( :map krisb-note-keymap
            ("b a" . citar-org-node-add-refs)
            ("b o" . citar-org-node-open-resource))
    :config
    (citar-org-node-mode 1))

  ;;; Indexed
  (use-package indexed
    :vc ( :url "https://github.com/meedstrom/indexed.git"
          :rev :newest)
    :custom
    (indexed-sync-with-org-id t)
    (indexed-org-dirs (list krisb-org-directory))
    (indexed-warn-title-collisions nil)
    :config
    (indexed-updater-mode 1)
    (indexed-roam-mode 1) ; 2025-04-02: This is required for collecting ROAM_REFS information

    ;; NOTE 2025-03-23: Not enabled for now because I do not use it and it is in
    ;; flux, so I may enable in the future when it is more stable and finalized.
    ;; (indexed-orgdb-mode 1)
    ;; End dependence on `org-roam-db-sync'
    (with-eval-after-load 'org-roam
      (setopt org-roam-db-update-on-save nil
              indexed-roam-overwrite t)  ; Write to on-disk db, not a diskless one
      (org-roam-db-autosync-mode -1)))

  ;;; Provide
  (provide 'krisb-org-node)
#+end_src

**** =krisb-web-annotations.el=
:PROPERTIES:
:CUSTOM_ID: krisb-web-annotationsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-web-annotations.el"
  ;;; Org-remark
  (use-package org-remark
    :diminish (org-remark-mode org-remark-global-tracking-mode)
    :hook (on-first-file . org-remark-global-tracking-mode)
    :bind ( :map org-remark-mode-map
            ("C-c m r" . (lambda () (interactive) (org-remark-highlights-load)))
            ("C-c m l" . org-remark-mark-line)
            ("C-c m d" . org-remark-delete)
            ("C-c m c" . org-remark-change)
            ("C-c m t" . org-remark-toggle)
            ("C-c m o" . org-remark-open)
            ("C-c m v" . org-remark-view)
            ("C-c m n" . org-remark-next)
            ("C-c m p" . org-remark-prev)
            :repeat-map krisb-org-remark-mode-repeat-map
            ("d" . org-remark-delete)
            ("c" . org-remark-change)
            ("t" . org-remark-toggle)
            ("o" . org-remark-open)
            ("v" . org-remark-view)
            ("n" . org-remark-next)
            ("p" . org-remark-prev))
    :custom
    (org-remark-source-file-name 'abbreviate-file-name)
    (org-remark-notes-file-name
     (no-littering-expand-var-file-name "org-remark/marginalia.org"))
    (org-remark-notes-display-buffer-action `((display-buffer-in-side-window)
                                              (side . right)
                                              (slot . 1)))
    (org-remark-create-default-pen-set nil) ; Make my own pens
    (org-remark-notes-auto-delete nil)
    (org-remark-report-no-highlights nil)
    :init
    (with-eval-after-load 'eww
      (org-remark-eww-mode 1))
    (with-eval-after-load 'nov
      (org-remark-nov-mode 1))
    (with-eval-after-load 'info
      (org-remark-info-mode 1))
    :config
    (with-eval-after-load 'nerd-icons
      (setopt org-remark-icon-notes (nerd-icons-mdicon "nf-md-thought_bubble")
              org-remark-icon-position-adjusted (nerd-icons-mdicon "nf-md-exclamation_thick")
              org-remark-line-icon (nerd-icons-mdicon "nf-md-note"))))

  ;;; Kris-org-remark-ext
  (use-package krisb-org-remark-ext
    :ensure nil
    :after org-remark
    :bind ( :map org-remark-mode-map
            ("C-c m m" . krisb-org-remark-mark-transient))
    :config
    ;; FIXME 2025-04-06: Faces not being applied for some reason?
    (krisb-modus-themes-setup-faces
     "org-remark-ext"
     (set-face-attribute 'krisb-org-remark-resonant-face nil
                         :background bg-red-intense)
     (set-face-attribute 'krisb-org-remark-resonant-minor-face nil
                         :underline `(:color ,bg-red-intense :style wave))

     (set-face-attribute 'krisb-org-remark-thesis-face nil
                         :background bg-yellow-subtle)
     (set-face-attribute 'krisb-org-remark-thesis-minor-face nil
                         :underline `(:color ,bg-yellow-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-detail-face nil
                         :background bg-blue-subtle)
     (set-face-attribute 'krisb-org-remark-detail-minor-face nil
                         :underline `(:color ,bg-blue-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-outline-face nil
                         :background bg-green-subtle)
     (set-face-attribute 'krisb-org-remark-outline-minor-face nil
                         :underline `(:color ,bg-green-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-external-face nil
                         :background bg-magenta-intense)
     (set-face-attribute 'krisb-org-remark-external-minor-face nil
                         :underline `(:color ,bg-magenta-intense :style wave))))

  ;;; Provide
  (provide 'krisb-web-annotations)
#+end_src

**** =krisb-citations.el=
:PROPERTIES:
:CUSTOM_ID: krisb-citationsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-citations.el"
  ;;; Oc (org-cite)
  ;; Built-in citations in org-mode
  (use-package oc
    :ensure nil
    :after org
    :custom
    (org-cite-global-bibliography krisb-bibliography-files)
    (org-cite-csl-locales-dir nil)
    (org-cite-csl-styles-dir (expand-file-name "styles/" krisb-zotero-directory))
    (org-cite-export-processors
     '((md . (csl "chicago-fullnote-bibliography.csl"))   ; Footnote reliant
       (latex biblatex)                                   ; For humanities
       (odt . (csl "chicago-fullnote-bibliography.csl"))  ; Footnote reliant
       (docx . (csl "chicago-fullnote-bibliography.csl")) ; Footnote reliant
       (t . (csl "modern-language-association.csl"))))    ; Fallback
    :custom-face
    ;; Have citation link faces look closer to as they were for `org-ref'
    (org-cite ((t (:foreground "DarkSeaGreen4"))))
    (org-cite-key ((t (:foreground "forest green" :slant italic))))
    :config
    ;; 2025-03-30: For the biblatex cite export processor.  Otherwise,
    ;; `org-cite-supported-styles' errors because (org-cite-get-processor
    ;; 'biblatex) returns nil.
    (require 'oc-biblatex))

  ;;; Citar
  (use-package citar
    :hook (org-mode . citar-capf-setup)
    :bind (("C-c b b" . citar-insert-citation)
           ("C-c b o" . citar-open)
           ("C-c b f" . citar-open-files)
           ("C-c b n" . citar-open-notes)
           :map org-mode-map
           ([remap org-cite-insert] . citar-insert-citation))
    :custom
    (citar-bibliography krisb-bibliography-files)
    (citar-notes-paths (list krisb-notes-directory))
    (citar-open-entry-function #'citar-open-entry-in-file)
    (citar-default-action #'citar-open-files)
    :config
    (with-eval-after-load 'all-the-icons
      ;; Taken from https://github.com/emacs-citar/citar/wiki/Indicators
      (defvar citar-indicator-files-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "file-o"
                  :face 'all-the-icons-green
                  :v-adjust -0.1)
         :function #'citar-has-files
         :padding "  " ; Need this because the default padding is too low for these icons
         :tag "has:files"))
      (defvar citar-indicator-links-icons
        (citar-indicator-create
         :symbol (all-the-icons-octicon
                  "link"
                  :face 'all-the-icons-orange
                  :v-adjust 0.01)
         :function #'citar-has-links
         :padding "  "
         :tag "has:links"))
      (defvar citar-indicator-notes-icons
        (citar-indicator-create
         :symbol (all-the-icons-material
                  "speaker_notes"
                  :face 'all-the-icons-blue
                  :v-adjust -0.3)
         :function #'citar-has-notes
         :padding "  "
         :tag "has:notes"))
      (defvar citar-indicator-cited-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "circle-o"
                  :face 'all-the-icon-green)
         :function #'citar-is-cited
         :padding "  "
         :tag "is:cited"))
      (setq citar-indicators
            (list citar-indicator-files-icons
                  citar-indicator-links-icons
                  citar-indicator-notes-icons
                  citar-indicator-cited-icons))))

  ;;; Citar-org
  ;; Use `citar' with `org-cite'
  (use-package citar-org
    :after oc
    :ensure nil
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-org-styles-format 'long))

  ;;; Provide
  (provide 'krisb-citations)
#+end_src

**** =krisb-pdfs.el=
:PROPERTIES:
:CUSTOM_ID: krisb-pdfsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-pdfs.el"
  ;;; Doc-view
  (use-package doc-view
    :custom
    (doc-view-resolution 192))

  ;;; Pdf-tools
  ;;;; Itself
  ;; View pdfs and interact with them. Has many dependencies
  ;; https://github.com/politza/pdf-tools#compiling-on-fedora
  (use-package pdf-tools
    ;; 2025-04-03: We manually add an auto-mode-alist entry to lazy-load this
    ;; package.  I want to avoid calling `pdf-loader-install' or
    ;; `pdf-tools-install' immediately at startup because I've had startup
    ;; complications when the pdf-tools install is malformed.  So I lazy load this
    ;; package and only call those functions after this package loads (i.e., in
    ;; the :config block).
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :bind ( :map pdf-view-mode-map
            ("C-c C-r a" . pdf-view-auto-slice-minor-mode)
            ;; Additionally useful since it lets you scroll via
            ;; `scroll-other-window'
            ([remap scroll-up-command] . pdf-view-scroll-up-or-next-page)
            ([remap scroll-down-command] . pdf-view-scroll-down-or-previous-page))
    :config
    ;; Must call `pdf-tools-install' or `pdf-loader-install' to have PDF files use
    ;; pdf-view-mode and have everything required loaded.  The latter defers
    ;; loading; see its docstring and
    ;; https://github.com/vedang/pdf-tools?tab=readme-ov-file#installing-pdf-tools-elisp-code
    (pdf-loader-install))

  ;;;; Pdf-view
  (use-package pdf-view
    :ensure nil
    :autoload krisb-pdf-view-cleanup-windows-h
    :hook (pdf-view-mode . (lambda () (add-hook 'kill-buffer-hook #'krisb-pdf-view-cleanup-windows-h nil t)))
    :custom
    (pdf-view-resize-factor 1.1)
    (pdf-view-display-size 'fit-page)
    (pdf-view-continuous nil) ; REVIEW 2024-01-16: Change this when I get to use image-roll?
    ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
    (pdf-view-use-scaling t)
    (pdf-view-use-imagemagick t)
    :config
    ;; Taken from Doom
    (defun krisb-pdf-view-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      ;; We add a guard here because sometimes things go wrong and this function
      ;; is called before `pdf-annot' is loaded, causing an error
      (when (featurep 'pdf-annot)
        (when (buffer-live-p pdf-annot-list-document-buffer)
          (pdf-info-close pdf-annot-list-document-buffer))
        (when (buffer-live-p pdf-annot-list-buffer)
          (kill-buffer pdf-annot-list-buffer))
        (let ((contents-buffer (get-buffer "*Contents*")))
          (when (and contents-buffer (buffer-live-p contents-buffer))
            (kill-buffer contents-buffer))))))

  ;;;; Krisb-pdfs-ext
  ;; Emacs wrapper and convenience functions for changing package metadata using
  ;; `pdftk'. See https://unix.stackexchange.com/a/72457 for more information on
  ;; the CLI commands involved.
  (use-package krisb-pdfs-ext
    :ensure nil
    :after pdf-view
    :demand t
    :bind ( :map pdf-view-mode-map
            ([remap avy-goto-char-timer] . krisb-avy-pdf-highlight-region-by-char)
            :map pdf-annot-list-mode-map
            ([remap tablist-push-regexp-filter] . krisb-pdf-annot-list-filter-regexp)))

  ;;;; Pdf-outline
  (use-package pdf-outline
    :ensure nil
    :after pdf-tools
    :custom
    (pdf-outline-enable-imenu t)
    (pdf-outline-display-labels t)
    (pdf-outline-imenu-use-flat-menus nil))

  ;;;; Pdf-annot
  (use-package pdf-annot
    :ensure nil
    :after pdf-view
    :demand t
    :hook ((pdf-annot-list-mode . (lambda () (hl-line-mode -1)))
           (pdf-annot-list-mode . krisb-pdf-annot--setup-context-window-display-action))
    :custom
    (pdf-annot-color-history ; "Default" color list. Appears at the top of annotation color change commands
     '("yellow" "SteelBlue1" "SeaGreen3" "LightSalmon1" "MediumPurple1"))
    (pdf-annot-list-format '((page . 3)
                             (color . 8)
                             (text . 68)
                             (type . 10)))
    (pdf-annot-list-highlight-type nil)
    :config
    ;; Fit the "contents" window to buffer height
    (defun krisb-pdf-annot-list-context-function (id buffer)
      "Show the contents of an Annotation.

  For an annotation identified by ID, belonging to PDF in BUFFER,
  get the contents and display them on demand."
      (with-current-buffer (get-buffer-create "*Contents*")
        (set-window-buffer nil (current-buffer))
        (let ((inhibit-read-only t))
          (erase-buffer)
          (when id
            (save-excursion
              (insert
               (pdf-annot-print-annotation
                (pdf-annot-getannot id buffer)))))
          (read-only-mode 1))
        (fit-window-to-buffer)
        (visual-line-mode)))
    (advice-add 'pdf-annot-list-context-function :override #'krisb-pdf-annot-list-context-function)

    (defun krisb-pdf-annot--setup-context-window-display-action ()
      "Set the display action for the \"context buffer\".
  The context buffer is the buffer that shows annotation contents in
  `pdf-annot-mode'"
      (setq-local tablist-context-window-display-action
                  '((display-buffer-reuse-window tablist-display-buffer-split-below-and-attach)
                    (window-height . 0.25)
                    (inhibit-same-window . t)
                    (window-parameters (no-other-window . t)
                                       (mode-line-format . none))))))

  ;;; Saveplace-pdf-view
  ;; Save place in pdf-view buffers
  (use-package saveplace-pdf-view
    :after saveplace)

  ;;; Pdf-meta-edit
  (use-package pdf-meta-edit
    :ensure nil
    :load-path "/home/krisbalintona/emacs-repos/packages/pdf-meta-edit/"
    :bind ( :map pdf-view-mode-map
            ("C-c M" . pdf-meta-edit-modify)))

  ;;; Provide
  (provide 'krisb-pdfs)
  ;;; krisb-pdfs.el ends here
#+end_src

**** =krisb-epub.el=
:PROPERTIES:
:CUSTOM_ID: krisb-epubel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-epub.el"
  ;;; Nov-mode
  (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :hook ((nov-mode . visual-line-mode)
           (nov-mode . olivetti-mode)))

  ;;; Provide
  (provide 'krisb-epub)
#+end_src

**** =krisb-videos.el=
:PROPERTIES:
:CUSTOM_ID: krisb-videosel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-videos.el"
  ;;; MPV
  ;; Dependency for packages that interact with mpv
  (use-package mpv
    ;; NOTE 2024-03-31: See
    ;; https://github.com/kljohann/mpv.el/issues/31#issuecomment-1856491594 for
    ;; why I use the latest GitHub version
    :pin melpa
    :bind-keymap ("C-M-s-m" . krisb-mpv-map)
    :custom
    (mpv-default-options (list "--save-position-on-quit"))
    :config
    (require 'krisb-mpv))

  ;;; Ytdl
  (use-package ytdl
    :ensure-system-package (yt-dlp)
    :custom
    (ytdl-command "yt-dlp")
    (ytdl-always-query-default-filename 'yes-confirm)
    (ytdl-music-folder (expand-file-name "~/Music/"))
    (ytdl-video-folder (expand-file-name "~/Videos/"))
    (ytdl-download-types
     `(("Downloads" "d" ytdl-download-folder ytdl-download-extra-args)
       ("Music"  "m" ytdl-music-folder ytdl-music-extra-args)
       ("Videos" "v"  ytdl-video-folder ytdl-video-extra-args)
       ("Temp" "t" ,(expand-file-name "/tmp/") ("-S" "res:720,fps"))))
    :config
    ;; Custom `org-attach' integration
    (defun krisb-ytdl-org-attach (url)
      "Download and video from URL and attach it to `org-attach-dir'.
  A modified version of `ytdl-download'."
      (interactive "MProvide URL: ")
      (when (ytdl--youtube-dl-missing-p)
        (error "youtube-dl is not installed."))
      (let* ((dir (or (org-attach-dir) (org-attach-dir-get-create)))
             (destination (expand-file-name (ytdl--get-filename dir url) dir))
             (extra-ytdl-args '("--write-auto-sub" "--write-sub" "--sub-lang" "en" "--convert-subs" "srt" ; Create .srt file
                                ;; Set maximum resolution and file type
                                "-S" "res:720,fps,ext:mp4:m4a"
                                "--recode" "mp4"))
             (dl-type-name "Org-attach"))
        (ytdl--download-async url
                              destination
                              extra-ytdl-args
                              nil
                              dl-type-name)))
    (with-eval-after-load 'org-attach
      (add-to-list 'org-attach-commands
                   '((?Y ?\C-Y) krisb-ytdl-org-attach
                     "Provide a URL and have \"ytdl\" download the corresponding video and attach that file.")
                   t)))

  ;;; Provide
  (require 'krisb-videos)
#+end_src

*** Todos
:PROPERTIES:
:CUSTOM_ID: todos
:END:

**** =krisb-org-agenda.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-agendael
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Calendar
  (use-package calendar
    :ensure nil
    :bind ( :map krisb-open-keymap
            ("c" . calendar))
    :custom
    (calendar-time-display-form
     '( 24-hours ":" minutes (when time-zone (format "(%s)" time-zone))))
    (calendar-week-start-day 1)           ; Monday
    (calendar-time-zone-style 'symbolic)

    ;; Diary
    (calendar-mark-diary-entries-flag t)

    ;; Holidays
    (calendar-mark-holidays-flag t)
    :init
    (defun krisb-get-lat-lon ()
      "Fetch latitude and longitude via IP-based geolocation service."
      (let (lat lon (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (_status)
                        (goto-char (point-min))
                        (re-search-forward "^$")
                        (let* ((json-object-type 'hash-table)
                               (json (json-read)))
                          (setq lat (gethash "lat" json)
                                lon (gethash "lon" json)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not lat) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-lat-lon] Maximum timeout reached"))
        (if (and lat lon)
            (cons lat lon)
          (message "[krisb-get-lat-lon] Failed to fetch geolocation data")
          nil)))

    (defun krisb-get-location-name ()
      "Get the current location."
      (let (city region (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (status)
                        (goto-char (point-min))
                        (re-search-forward "\n\n")  ;; Skip the headers
                        (let* ((json-object-type 'hash-table)
                               (json-key-type 'string)
                               (json-array-type 'list)
                               (data (json-read)))
                          (setq city (gethash "city" data)
                                region (gethash "region" data)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not city) (not region) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-location-name] Maximum timeout reached"))
        (if (and city region)
            (format "%s, %s" city region)
          (message "[krisb-get-location-name] Failed to fetch geolocation data")
          nil)))
    :config
    ;; Solar
    (require 'solar)
    ;; FIXME 2024-10-23: Hangs on startup sometimes for some reason...
    ;; (krisb-evaluate-when-internet
    ;;   20
    ;;   (let ((coords (krisb-get-lat-lon)))
    ;;     (setopt calendar-latitude (car coords)
    ;;             calendar-longitude (cdr coords)))
    ;;   (setopt calendar-location-name (krisb-get-location-name)))
    )
#+end_src

***** =Org-agenda= and =org-super-agenda=
:PROPERTIES:
:CUSTOM_ID: org-agenda-and-org-super-agenda
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-agenda
  (use-package org-agenda
    :ensure nil
    :hook (org-agenda-mode . hl-line-mode)
    :bind ( :map krisb-open-keymap
            ("a" . org-agenda))
    :custom
    (org-agenda-files (krisb-org-agenda-directory-files))
    (org-agenda-inhibit-startup t)

    ;; Effort
    (org-agenda-sort-noeffort-is-high nil)
    (org-duration-units
     `(("m" . 1)
       ("h" . 60)
       ("d" . ,(* 60 8))
       ("w" . ,(* 60 8 5))
       ("mon" . ,(* 60 8 5 4))
       ("y" . ,(* 60 8 5 4 10))))

    ;; Tags
    (org-use-tag-inheritance t)
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tags-exclude-from-inheritance '("project" "inbox"))
    (org-use-property-inheritance '("CATEGORY" "ARCHIVE"))
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tag-faces
     '(("project" . outline-1)))

    ;; Dependencies
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies nil)
    (org-agenda-dim-blocked-tasks t)

    ;; Org agenda
    (org-agenda-file-regexp "\\`[^.].*\\.org\\'")
    (org-agenda-sticky t) ; Set to nil if frequently modifying `org-agenda-custom-commands'
    (org-agenda-window-setup 'only-window)
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-tags-column 0)
    (org-agenda-start-on-weekday 1)
    (org-agenda-format-date #'krisb-org-agenda-format-date-aligned)
    (org-agenda-tags-todo-honor-ignore-options t)
    (org-agenda-todo-ignore-scheduled nil)
    (org-agenda-remove-times-when-in-prefix t)
    (org-agenda-remove-tags 'prefix)

    (org-agenda-prefix-format
     ;; See https://whhone.com/posts/org-agenda-repeated-tasks/ for an explanation
     ;; of `krisb-org-agenda-repeater' usage here
     '((agenda  . " %i %-8:c%?-12t% s%(krisb-org-agenda-repeater)%-5e%(krisb-org-agenda-breadcrumb 20)")
       (todo  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (tags  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (search . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")))
    ;; See `krisb-org-sort-agenda-by-created-time' for my user-defined sorter
    (org-agenda-sorting-strategy
     '((agenda habit-down urgency-down priority-down user-defined-up deadline-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (search todo-state-up priority-down category-keep)))
    ;; See
    ;; https://emacs.stackexchange.com/questions/17302/is-there-a-way-to-make-org-mode-count-repetitive-tasks-done-certain-hours-past-m?rq=1
    (org-extend-today-until 3)
    (org-use-effective-time t)
    (org-agenda-block-separator ?─)
    (org-deadline-warning-days 3)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")
    (org-agenda-breadcrumbs-separator " ⇛ ")
    ;; Shorten the leaders to reserve spaces for the repeater.  Taken from
    ;; https://whhone.com/posts/org-agenda-repeated-tasks/
    (org-agenda-scheduled-leaders '("Sched" "S.%2dx"))
    (org-agenda-deadline-leaders '("Deadl" "In%2dd" "D.%2dx"))
    (org-agenda-skip-scheduled-delay-if-deadline nil)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-auto-exclude-function #'krisb-org-agenda-auto-exclude-function)
    (org-agenda-compact-blocks nil)

    ;; Capture templates
    ;; See also `org-capture-templates-contexts'
    (org-capture-templates
     `(("t" "Todo" entry
        (file ,krisb-org-agenda-main-file)
        "* TODO %? :inbox:%^g\n"
        :empty-lines 1)
       ("T" "Todo (without processing)" entry
        (file ,krisb-org-agenda-main-file)
        "* TODO %? %^g\n"
        :empty-lines 1)
       ("j" "Journal" entry
        (function krisb-org-capture--org-node-datetree-journal)
        "* %<%c>\n"
        :tree-type (year quarter month)
        :jump-to-captured t
        :immediate-finish t
        :empty-lines 1
        :clock-in t
        :clock-resume t)
       ("w" "Just write" entry
        (function ,(lambda () (krisb-org-capture--org-node-insert-datetree (org-node-by-id "20241006T214800.000000"))))
        "* %<%c>\n\n*P:* %(car (krisb-oblique-strategies--random))\n\n"
        :tree-type (year quarter month)
        :jump-to-captured t
        :immediate-finish t
        :empty-lines 1
        :clock-in t
        :clock-resume t)
       ("l" "Log" item
        (function krisb-org-capture--org-node-datetree-log)
        "%U %?"
        :tree-type (quarter week)
        :clock-in t
        :clock-resume t)
       ("m" "Work meeting notes" entry
        (function ,(lambda () (krisb-org-capture--org-node-insert-datetree (org-node-by-id "20241114T091749.707997"))))
        "* (%<%c>)%?\n\n"
        :tree-type (year quarter month)
        :jump-to-captured t
        :immediate-finish t)
       ("b" "Blog post" plain
        (function (lambda ()
                    (let ((org-node-ask-directory krisb-blog-directory))
                      (org-node-capture-target))))
        "#+filetags: :__blog_draft:
  ,#+hugo_bundle:
  ,#+export_file_name: index
  ,#+hugo_tags:
  ,#+hugo_categories:
  ,#+hugo_publishdate:
  ,#+hugo_lastmod:
  ,#+hugo_custom_front_matter: :TableOfContents true
  ,#+hugo_draft: true
  ,#+hugo_paired_shortcodes:\n\n%?"
        :jump-to-captured t
        :immediate-finish t)))
    (org-capture-use-agenda-date t)       ; Use the time-at-point if any

    ;; Todos
    (org-fast-tag-selection-single-key 'expert)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h@/!)" "MAYBE(m)" "|" "DONE(d!/@)" "CANCELED(c@/!)")))
    (org-todo-keyword-faces
     '(("NEXT" . (bold success))
       ("TODO" . org-todo)
       ("HOLD" . (shadow error))
       ("MAYBE" . (shadow org-todo))
       ("DONE" . (bold org-done))
       ("CANCELED" . error)))
    (org-highest-priority ?A)
    (org-default-priority ?E)
    (org-lowest-priority ?F)
    (org-priority-faces
     '((?A . (bold org-priority))
       (?B . (bold org-priority))
       (?C . org-priority)
       (?D . org-priority)
       (?E . (shadow org-priority))
       (?F . (shadow org-priority))))
    ;; FIXME 2024-10-02: Haven't found a way to get this to mesh well with my
    ;; workflow
    (org-stuck-projects
     `("+project/-DONE-CANCELED"
       ("NEXT" "TODO")
       nil
       nil
       ,(rx (regexp org-not-done-heading-regexp))))

    ;; Logging
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-log-reschedule 'time)
    (org-log-redeadline 'time)

    ;; Input
    (org-read-date-prefer-future 'time)
    :custom-face
    (org-drawer ((t (:height 0.9))))
    (org-mode-line-clock ((t (:inherit org-agenda-date))))
    :init
    (defun krisb-org-agenda-breadcrumb (len)
      "Formatted breadcrumb for current `org-agenda' item."
      (org-with-point-at (org-get-at-bol 'org-marker)
        (let ((s (if (derived-mode-p 'org-mode)
                     (org-format-outline-path (org-get-outline-path)
                                              (1- (frame-width))
                                              nil org-agenda-breadcrumbs-separator)
                   ;; Not in Org buffer. This can happen, for example, in
                   ;; `org-agenda-add-time-grid-maybe' where time grid does not
                   ;; correspond to a particular heading.
                   "")))
          (if (equal "" s) ""
            (concat (truncate-string-to-width s len 0 nil (truncate-string-ellipsis)) org-agenda-breadcrumbs-separator)))))
    (defun krisb-org-agenda-repeater ()
      "The repeater shown in org-agenda-prefix for agenda.

  Taken from https://whhone.com/posts/org-agenda-repeated-tasks/."
      (if (org-before-first-heading-p)
          "┄┄┄┄┄┄┄"                       ; Fill the time grid
        (format "%5s: " (or (org-get-repeat) ""))))

    (defvar krisb-org-capture--temp-olp nil
      "Used as cache for some bespoke org-capture templates.
  Should be a list of strings representing the outline path (olp) of an
  org heading.")
    :config
    ;; REVIEW 2024-11-11: Not sure if this is needed if we set the value of
    ;; `org-durations-units' via :custom.
    ;; (org-duration-set-regexps)

    ;; Taken from
    ;; https://github.com/psamim/dotfiles/blob/master/doom/config.el#L213
    (defun krisb-org-agenda-format-date-aligned (date)
      "Format a DATE string for display in the agenda or timeline.
  This function makes sure that dates are aligned for easy reading."
      (require 'cal-iso)
      (let* ((dayname (calendar-day-name date 1 nil))
             (day (cadr date))
             (day-of-week (calendar-day-of-week date))
             (month (car date))
             (monthname (calendar-month-name month 1))
             (year (nth 2 date))
             (iso-week (org-days-to-iso-week
                        (calendar-absolute-from-gregorian date)))
             (weekyear (cond ((and (= month 1) (>= iso-week 52))
                              (1- year))
                             ((and (= month 12) (<= iso-week 1))
                              (1+ year))
                             (t year)))
             (weekstring (if (= day-of-week 1)
                             (format " W%02d" iso-week)
                           "")))
        (format " %-2s. %2d %s"
                dayname day monthname)))

    (defun krisb-org-agenda-auto-exclude-function (tag)
      "Set tags based on time of day.
  See ((org) Filtering/limiting agenda items)."
      (when (cond ((member tag '("@home" "@hobbies"))
                   (let ((hr (nth 2 (decode-time))))
                     ;; After 10 or before 21
                     (or (> hr 10) (< hr 21)))))
        (concat "-" tag)))

    ;; Bespoke functions for datetrees in org-node nodes
    (defun krisb-org-capture--org-node-insert-datetree (node)
      "Creates datetree at org-node NODE.
  Creates a datetree at NODE, and leaves point where a new entry should
  be.

  This is a helper function for functions used in `org-capture-templates',
  but can also be called interactively to prompt for NODE."
      (interactive (list (org-node-read)))
      (require 'org-node)
      (require 'org-datetree)
      (let* ((file (org-node-get-file node))
             (olp (when (< 0 (org-node-get-level node))
                    (org-node-get-olp-with-self node)))
             (pt (org-node-get-pos node))
             (date (calendar-gregorian-from-absolute
                    (time-to-days
                     (org-capture-get :default-time)))) ; Respect C-1 and :time-prompt
             (buffer (org-capture-target-buffer file))
             (tree-type (org-capture-get :tree-type))) ; Respect :tree-type
        ;; See `org-capture-set-target-location' for an explanation of the next
        ;; few lines
        (set-buffer buffer)
        (org-capture-put-target-region-and-position)
        (widen)
        (goto-char pt)
        ;; Create datetree.  See the implementation of
        ;; `org-capture-set-target-location' for an explanation of the lines
        ;; below; it handles all the cases org-capture does
        (funcall
         (pcase tree-type
           (`week #'org-datetree-find-iso-week-create)
           (`month #'org-datetree-find-month-create)
           (`day #'org-datetree-find-date-create)
           ((pred not) #'org-datetree-find-date-create)
           ((pred functionp)
            (lambda (d keep-restriction)
              (org-datetree-find-create-hierarchy
               (funcall tree-type d) keep-restriction)))
           ((pred listp)
            (lambda (d keep-restriction)
              (funcall #'org-datetree-find-create-entry tree-type
                       d keep-restriction)))
           (_ (error "Unrecognized :tree-type")))
         date
         (when olp 'subtree-at-point))))

    (defun krisb-org-capture--org-node-datetree-journal ()
      "Prompt for an org-node node and create a datetree there.
  The nodes listed in the prompt are those with the \"__journal\" tag.

  This function is meant to chiefly be used by itself as a function in
  `org-capture-templates', though it can also be called interactively."
      (interactive)
      (let* ((candidate (completing-read "Select journal: "
                                         #'org-node-collection
                                         (lambda (_title node) (member "__journal" (org-node-get-tags node)))
                                         t nil 'org-node-hist))
             (node (gethash candidate org-node--candidate<>node)))
        (krisb-org-capture--org-node-insert-datetree node)))

    (defun krisb-org-capture--org-node-datetree-log ()
      "Prompt for an org-node node and create a datetree there.
  The nodes listed in the prompt are those with the \"__log\" tag.

  This function is meant to chiefly be used by itself as a function in
  `org-capture-templates', though it can also be called interactively."
      (interactive)
      (let* ((candidate (completing-read "Select journal: "
                                         #'org-node-collection
                                         (lambda (_title node) (member "__log" (org-node-get-tags node)))
                                         t nil 'org-node-hist))
             (node (gethash candidate org-node--candidate<>node)))
        (krisb-org-capture--org-node-insert-datetree node))))

  ;;; Org-super-agenda
  (use-package org-super-agenda
    :custom
    (org-super-agenda-hide-empty-groups t)
    (org-super-agenda-keep-order t)
    (org-agenda-cmp-user-defined #'krisb-org-sort-agenda-by-created-time)
    :config
    (org-super-agenda-mode 1)

    ;; Custom user-defined sorting (comparison) function for
    ;; `org-agenda-cmp-user-defined'
    (defun krisb-org-get-created-time (entry)
      "Return the CREATED time of ENTRY, or an empty string if it doesn't exist."
      (let ((marker (get-text-property 0 'marker entry)))
        (if marker
            (org-entry-get marker "CREATED")
          "")))

    (defun krisb-org-sort-agenda-by-created-time (a b)
      "Compare two agenda items, A and B, by their CREATED property."
      (let* ((time-a (krisb-org-get-created-time a))
             (time-b (krisb-org-get-created-time b)))
        (cond
         ((string= time-a "") +1)         ; A has no CREATED property, put it last
         ((string= time-b "") -1)         ; B has no CREATED property, put it last
         (t
          (if (time-less-p (date-to-time time-a) (date-to-time time-b))
              -1 +1)))))

    ;; NOTE 2025-03-14: I manually apply the changes described in the un-pulled
    ;; merge request: https://github.com/alphapapa/org-super-agenda/pull/242.  I
    ;; will keep this until the problem it resolves is fixed in master.
    (el-patch-defun org-super-agenda--group-items (all-items)
      "Divide ALL-ITEMS into groups based on `org-super-agenda-groups'."
      (if (bound-and-true-p org-super-agenda-groups)
          ;; Transform groups
          (let ((org-super-agenda-groups (org-super-agenda--transform-groups org-super-agenda-groups)))
            ;; Collect and insert groups
            (cl-loop with section-name
                     for filter in org-super-agenda-groups
                     for custom-section-name = (plist-get filter :name)
                     for order = (or (plist-get filter :order) 0)  ; Lowest number first, 0 by default
                     for (auto-section-name non-matching matching) = (org-super-agenda--group-dispatch all-items filter)

                     do (when org-super-agenda-keep-order
                          (el-patch-swap
                            (setf matching (sort matching #'org-entries-lessp))
                            (setf matching (krisb-org-super-agenda--sort-matches-for-original-order matching))))

                     ;; Transformer
                     for transformer = (plist-get filter :transformer)
                     when transformer
                     do (setq matching (-map (pcase transformer
                                               (`(function ,transformer) transformer)
                                               ((pred symbolp) transformer)
                                               (_ `(lambda (it) ,transformer)))
                                             matching))

                     ;; Face
                     for face = (plist-get filter :face)
                     when face
                     do (let ((append (plist-get face :append)))
                          (when append (cl-remf face :append))
                          (--each matching
                            (add-face-text-property 0 (length it) face append it)))

                     ;; Auto category/group
                     if (cl-member auto-section-name org-super-agenda-auto-selector-keywords)
                     do (setq section-name (or custom-section-name "Auto category/group"))
                     and append (cl-loop for group in matching
                                         collect (list :name (plist-get group :name)
                                                       :items (plist-get group :items)
                                                       :order order))
                     into sections
                     and do (setq all-items non-matching)

                     ;; Manual groups
                     else
                     do (setq section-name (or custom-section-name auto-section-name))
                     and collect (list :name section-name :items matching :order order) into sections
                     and do (setq all-items non-matching)

                     ;; Sort sections by :order then :name
                     finally do (setq non-matching (list :name org-super-agenda-unmatched-name
                                                         :items non-matching
                                                         :order org-super-agenda-unmatched-order))
                     finally do (setq sections (--sort (let ((o-it (plist-get it :order))
                                                             (o-other (plist-get other :order)))
                                                         (cond ((and
                                                                 ;; FIXME: This is now quite ugly.  I'm not sure that all of these tests
                                                                 ;; are necessary, but at the moment it works, so I'm leaving it alone.
                                                                 (equal o-it o-other)
                                                                 (not (equal o-it 0))
                                                                 (stringp (plist-get it :name))
                                                                 (stringp (plist-get other :name)))
                                                                ;; Sort by string only for items with a set order
                                                                (string< (plist-get it :name)
                                                                         (plist-get other :name)))
                                                               ((and (numberp o-it)
                                                                     (numberp o-other))
                                                                (< o-it o-other))
                                                               (t nil)))
                                                       (push non-matching sections)))
                     ;; Insert sections
                     finally return (cl-loop for (_ name _ items) in sections
                                             when items
                                             collect (org-super-agenda--make-agenda-header name)
                                             and append items)))
        ;; No super-filters; return list unmodified
        all-items))

    (defun krisb-org-super-agenda--sort-matches-for-original-order (matching)
      "Sort MATCHING items back into their original ordering based on `org-entries-lessp'.
  Only used when `org-super-agenda-keep-order' is non-nil."
      (--sort
       ;; Sorting has a shallow element of recursion because not all of the given items
       ;; are matched org headlines that can just be sorted using `org-entries-lessp'.
       ;; Some super-agenda matchers, like `:auto-category', will introduce sublists
       ;; whose contents need sorting of their own. In that case the lists' `:items'
       ;; properties need to be sorted instead.
       (let ((first-is-list (listp it))
             (second-is-list (listp other)))
         (when first-is-list
           (plist-put
            it :items
            (sort (plist-get it :items) #'org-entries-lessp)))
         (when second-is-list
           (plist-put
            other :items
            (sort (plist-get other :items) #'org-entries-lessp)))
         (cond
          (second-is-list t)
          (first-is-list nil)
          (t (org-entries-lessp it other))))
       matching)))

  ;;; `org-agenda-custom-commands'
  (with-eval-after-load 'org-agenda
    ;; Relevant variables to set locally in `org-agenda-custom-commands'
    ;; - `org-agenda-overriding-header'
    ;; - `org-agenda-show-inherited-tags'
    ;; - `org-agenda-sorting-strategy'
    ;; - `org-agenda-start-day'
    ;; - `org-agenda-span'
    ;; - `org-agenda-prefix-format'
    ;; - `org-agenda-scheduled-leaders'
    ;; - `org-agenda-deadline-leaders'
    ;; - `org-agenda-skip-deadline-prewarning-if-scheduled'
    ;; - `org-agenda-skip-scheduled-if-deadline-is-shown'
    ;; - `org-habit-show-all-today'
    ;; - `org-habit-show-habits-only-for-today'
    ;; - `org-agenda-dim-blocked-tasks'
    ;; - `org-agenda-include-diary'
    ;; - `org-agenda-insert-diary-extract-time'
    ;; - `org-agenda-skip-function'
    ;; - `org-agenda-entry-types'
    ;; - `org-deadline-warning-days'
    ;; - `org-scheduled-delay-days'
    (setopt org-agenda-custom-commands
            '(("f" "FYP"
               ((agenda ""
                        ((org-agenda-overriding-header "Time-bound tasks")
                         (org-agenda-show-inherited-tags t)
                         (org-agenda-start-day "+0d")
                         (org-agenda-span 'day)
                         (org-habit-show-habits-only-for-today t)
                         (org-agenda-dim-blocked-tasks t)
                         (org-agenda-include-diary t)
                         (org-agenda-insert-diary-extract-time t)
                         (org-super-agenda-groups
                          '((:name "Overdue" :scheduled past :deadline past)
                            (:auto-category t)))))
                (tags-todo "-inbox"
                           ((org-agenda-overriding-header "Projects and tasks to review")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks t)
                            (org-agenda-skip-function 'org-review-agenda-skip)
                            (org-agenda-cmp-user-defined 'org-review-compare)
                            (org-agenda-sorting-strategy '(user-defined-down))))
                (tags-todo "-project-inbox"
                           ((org-agenda-overriding-header "Non-time-bound tasks")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks 'invisible)
                            (org-agenda-skip-function
                             '(lambda ()
                                (or (org-agenda-skip-entry-if 'scheduled)
                                    ;; Rather than something like:
                                    ;;   (not (org-review-agenda-skip))
                                    ;; We manually invert the definition of
                                    ;; `org-review-agenda-skip' because skipping
                                    ;; functions, if successful (i.e. reporting a
                                    ;; skip), must return the point which
                                    ;; org-agenda should continue from.
                                    (and (org-review-toreview-p)
                                         (org-with-wide-buffer (or (outline-next-heading) (point-max)))))))))))
              ("i" "Inbox: process entries"
               ((tags-todo "+inbox"
                           ((org-agenda-overriding-header "Review")
                            (org-agenda-dim-blocked-tasks t)
                            (org-agenda-skip-function 'org-review-agenda-skip)
                            (org-agenda-cmp-user-defined 'org-review-compare)
                            (org-agenda-sorting-strategy '(user-defined-down))))
                (tags-todo "+inbox"
                           ((org-agenda-overriding-header "Non-review inbox")
                            (org-agenda-dim-blocked-tasks t)
                            (org-agenda-skip-function
                             'krisb-org-review-has-review-property-p)))
                (todo "HOLD"
                      ((org-agenda-overriding-header "Non-review holds")
                       (org-agenda-skip-function
                        'krisb-org-review-has-review-property-p)))
                (todo "MAYBE"
                      ((org-agenda-overriding-header "Non-review maybes")
                       (org-agenda-skip-function
                        'krisb-org-review-has-review-property-p)))))
              ("p" "Projects"
               ((tags-todo "project"
                           ((org-agenda-overriding-header "")
                            ;; This lets project sub-tasks be discoverable by a tags
                            ;; search. One might think :auto-parent makes this
                            ;; redundant, but this handles cases where I have a
                            ;; sub-task but its parent is not a project -- I do this
                            ;; sometimes for simple dependencies between todos
                            ;; FIXME 2024-10-07: This shows the project tag for all the
                            ;; sub-tasks, which can be visually noisy. I'm not sure if
                            ;; there is a workaround
                            (org-tags-exclude-from-inheritance
                             (remove "project" org-tags-exclude-from-inheritance))
                            (org-agenda-prefix-format
                             ;; FIXME 2024-10-07: Not sure if this is a tags- or
                             ;; todo-type view
                             '((tags  . " %i %-8:c%-5e%?-12t% s")))
                            (org-super-agenda-groups
                             '(( :auto-parent t
                                 :order 2)
                               ( :name "All projects"
                                 :anything t
                                 :order 1))))))))))
#+end_src

**** Friends of =org-agenda=
:PROPERTIES:
:CUSTOM_ID: friends-of-org-agenda
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-clock
  (use-package org-clock
    :ensure nil
    :custom
    (org-clock-persist t)
    (org-clock-out-when-done t)
    (org-clock-history-length 10)
    (org-clock-in-resume t)
    (org-clock-persist-query-resume t)
    (org-clock-into-drawer t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-report-include-clocking-task t)
    (org-show-notification-handler #'(lambda (str)
                                       (notifications-notify
                                        :title "Org-agenda task overrun!"
                                        :body str
                                        :app-name "GNU Emacs"
                                        :urgency 'normal)))
    ;; Mode line
    (org-clock-string-limit 0)
    (org-clock-heading-function 'krisb-org-clock-get-heading-string)
    :config
    (org-clock-persistence-insinuate)

    ;; Bespoke mode line string
    (defun krisb-org-clock-get-heading-string ()
      "Get truncated org heading string.

  Same as default but truncates with `truncate-string-ellipsis'."
      (let ((heading (org-link-display-format
                      (org-no-properties (org-get-heading t t t t)))))
        (truncate-string-to-width heading 40 nil nil (truncate-string-ellipsis)))))

  ;;; Org-habit
  (use-package org-habit
    :after org-agenda
    :ensure nil
    :custom
    (org-habit-show-habits t)
    (org-habit-following-days 1)
    (org-habit-preceding-days 14)
    (org-habit-show-done-always-green t)
    (org-habit-show-habits-only-for-today t)
    (org-habit-graph-column 110)
    (org-habit-today-glyph ?◌)
    (org-habit-completed-glyph ?●)
    (org-habit-missed-glyph ?○))

  ;;; Org-expiry
  (use-package org-expiry
    :requires org-contrib
    :ensure nil
    :hook (org-capture-before-finalize . org-expiry-insert-created)
    :custom
    (org-expiry-inactive-timestamps t))

  ;;; Org-depend
  ;; Add blocking and triggering actions when an org-todo state is changed.
  (use-package org-depend
    :requires org-contrib
    :ensure nil
    :after org-agenda)

  ;;; Org-edna
  ;; Also look at `org-edna' with `org-linker-edna'
  ;; (https://github.com/toshism/org-linker-edna) (the second of which requires
  ;; `org-linker': https://github.com/toshism/org-linker). `org-super-links' can
  ;; be added to see which tasks are being blocked by the current task. See
  ;; https://karl-voit.at/2021/01/23/org-linker-edna/ for sample workflow
  (use-package org-edna
    :diminish
    :demand t
    :after org-agenda
    :bind ( :map org-mode-map
            ("C-c d" . krisb-consult-org-edna-block)
            :map org-agenda-mode-map
            ("C-c d". krisb-consult-org-agenda-enda-block))
    :config
    (org-edna-mode 1)

    ;; Bespoke `consult' integration.  This functionality depends on org-enda's
    ;; :BLOCKER: (which supports lists of IDs, rather than a single ID, like
    ;; `org-depend').
    (with-eval-after-load 'consult
      (defun krisb-consult-org-edna--add-id (new-id)
        "Add an ID to the current heading’s BLOCKER property.
  If none exists, automatically create the BLOCKER property. Code
  based off of `org-linker-edna’."
        (let* ((value (org-entry-get (point) "BLOCKER"))
               (formatted-new-id
                (progn
                  (unless (org-id-find new-id)
                    (error "This ID (%s) does not exist!" new-id))
                  (list (concat "\"id:" new-id "\""))))
               (existing-ids
                ;; Get IDs if they exist in proper `org-edna' syntax as the value
                ;; of the BLOCKER property
                (when (and value (string-match "ids(\\([^\\)]*\\)).*" value))
                  (split-string (match-string 1 value))))
               (all-ids (string-join (seq-uniq (append existing-ids formatted-new-id)) " "))
               (new-value (concat "ids(" all-ids ")")))
          (org-set-property "BLOCKER" new-value)))

      (defun krisb-consult-org-edna-block (&optional match)
        "Create a dependency for the `org-todo’ at point.
    A dependency is defined by `org-depend’s `BLOCKER’ property. IDs
    are created in the todo dependency with `org-id-get-create’.
    MATCH is a query sent to `org-map-entries’."
        (interactive)
        (save-window-excursion
          (let ((current-heading (org-get-heading))
                new-id dependency)
            (if (not (org-entry-is-todo-p))
                ;; Error if not currently on an `org-todo'
                (error "Not on an `org-todo’ heading!")
              ;; Add and ID to the dependency if necessary
              (save-excursion
                (consult-org-agenda (or match "/-DONE-CANCELED"))
                (setq dependency (org-get-heading))
                (when (equal current-heading dependency)
                  (error "Cannot depend on the same `org-todo’!"))
                (setq new-id (org-id-get-create)))
              ;; Modify the BLOCKER property of the current todo
              (krisb-consult-org-edna--add-id new-id)
              (message "‘%s’ added as a dependency to this todo"
                       (substring-no-properties dependency))))))

      (defun krisb-consult-org-agenda-edna (&optional match)
        "Create a dependency for the `org-agenda’ item at point.
    See `krisb-consult-org-edna-block’."
        (interactive)
        (let* ((bufname-orig (buffer-name))
               (marker (or (org-get-at-bol 'org-marker)
                           (org-agenda-error)))
               (buffer (marker-buffer marker))
               (pos (marker-position marker))
               dependency)
          (org-with-remote-undo buffer
            (with-current-buffer buffer
              (save-excursion
                (goto-char pos)
                ;; FIXME 2023-01-17: Janky workaround. Remove all
                ;; `consult-after-jump-hook' hooks since we if there is a
                ;; `recenter' hook then an error will be returned since it'll be
                ;; attempting to `recenter' a non-present buffer
                (let ((consult-after-jump-hook nil))
                  (setq dependency (funcall 'krisb-consult-org-edna-block match))))))))

      (consult-customize krisb-consult-org-edna-block
                         :prompt "Select dependency for the heading at point: "
                         krisb-consult-org-agenda-edna
                         :prompt "Select dependency for this agenda item: ")))

  ;;; Org-review
  (use-package org-review
    :bind ( :map org-mode-map
            ("C-c r s" . org-review-insert-next-review)
            ("C-c r l" . org-review-insert-last-review)
            ("C-c r u" . krisb-org-review-unreview)
            :map org-agenda-mode-map
            ("C-c r s" . org-review-insert-next-review)
            ("C-c r l" . org-review-insert-last-review)
            ("C-c r u" . krisb-org-review-unreview))
    :custom
    (org-review-delay "+8d")
    (org-review-last-timestamp-format 'inactive)
    (org-review-next-timestamp-format 'inactive)
    (org-review-sets-next-date t)
    :config
    ;; Agenda helpers
    (defun krisb-org-review-has-review-property-p ()
      "Skip the current todo if it has an org-review property.
  Returns non-nil if the current todo has a property by the name of the
  value of `org-review-next-property-name' or
  `org-review-last-property-name'."
      (and (or (org-entry-get (point) org-review-next-property-name)
               (org-entry-get (point) org-review-last-property-name))
           (org-with-wide-buffer (or (outline-next-heading) (point-max)))))

    ;; Commands
    (defun krisb-org-review-unreview ()
      "Un-review the current heading.
  Removes the properties denoted by `org-review-next-property-name' and
  `org-review-last-property-name'."
      (interactive)
      (when (org-entry-get (point) org-review-next-property-name)
        (org-delete-property org-review-next-property-name))
      (when (org-entry-get (point) org-review-last-property-name)
        (org-delete-property org-review-last-property-name)))

    (defun krisb-org-review-scheduled-to-review ()
      "Turn the scheduled date of an agenda entry to a review date.
  Sets the value of `org-review-next-property-name' to the scheduled
  date.  Deletes the scheduled date afterward.

  This command was initially used to help me transition from a
  non-org-review workflow (a combination of an INBOX tag and scheduling)
  to an org-review workflow."
      (interactive)
      (org-agenda-with-point-at-orig-entry nil
        (let ((date (org-entry-get (point) "SCHEDULED")))
          (if date
              (progn
                (org-set-property org-review-next-property-name
                                  (concat "["
                                          (substring date 1 -1)
                                          "]"))
                (org-schedule '(4))
                (message "No scheduled date found for this item."))))))

    ;; "Scatter" org-review function; intended to be used as an org-agenda-bulk
    ;; action/function
    (defun krisb-org-review--select-day ()
      "Prompt for a number of days and return as an integer."
      (let ((days 0)
            (prompt "Scatter tasks across how many days? "))
        (while (<= days 0)
          (setq days (read-number prompt 7)
                prompt "Scatter tasks across how many days? Must be greater than 0: "))
        days))
    (defun krisb-org-review-randomize (days)
      "Randomly set the next review date for entry within the next DAYS days.
  DAYS should be a positive integer.  Calls `org-review-insert-date' onto
  a random date within the next DAYS days."
      (interactive (list (krisb-org-review--select-day)))
      (let* ((random-day (1+ (random days)))
             (ts (format-time-string (car org-time-stamp-formats)
                                     (time-add (current-time) (days-to-time random-day)))))
        ;; We don't also call `org-review-insert-last-review' because I use
        (org-review-insert-date org-review-next-property-name
                                org-review-next-timestamp-format
                                ts)))
    (with-eval-after-load 'org-agenda
      (add-to-list 'org-agenda-bulk-custom-functions
                   '(?R krisb-org-review-randomize
                        ;; Must return a list (of arguments)
                        (lambda () (list (krisb-org-review--select-day)))))))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-6
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Provide
  (provide 'krisb-org-agenda)
#+end_src

*** Blogging
:PROPERTIES:
:CUSTOM_ID: blogging
:END:

**** =krisb-hugo.el=
:PROPERTIES:
:CUSTOM_ID: krisb-hugoel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-hugo.el"
  ;;; Ox-hugo
  ;; Using the Hugo static cite generator as an option for exporting files
  (use-package ox-hugo
    :after org
    :ensure-system-package (hugo go)
    :custom
    (org-hugo-base-dir (expand-file-name "hugo/" org-directory))
    (org-hugo-section "posts")
    (org-hugo-anchor-functions
     '(org-hugo-get-page-or-bundle-name
       ;; org-hugo-get-custom-id
       ;; org-hugo-get-id
       org-hugo-get-heading-slug
       org-hugo-get-md5))

    (org-hugo-use-code-for-kbd t)
    (org-hugo-link-desc-insert-type nil) ; TODO 2024-11-01: Check if I want to change this value
    (org-hugo-export-with-toc nil)    ; Default to nil and set on a per-post basis

    (org-hugo-auto-set-lastmod nil)
    (org-hugo-suppress-lastmod-period 604800)) ; Only use lastmod if modified at least a week later

  ;;; Krisb-ox-hugo-ext
  (use-package krisb-ox-hugo-ext
    :ensure nil
    :after ox-hugo)

  ;;; Hugoista
  ;; List all posts' information
  (use-package hugoista
    :after ox-hugo
    :custom
    (hugoista-hugo-command (executable-find "hugo"))
    (hugoista-posts-dir "posts")
    (hugoista-initial-sort t)
    :config
    (with-eval-after-load 'ox-hugo
      (setopt hugoista-site-dir org-hugo-base-dir)))

  ;;; Provide
  (provide 'krisb-hugo)
#+end_src

**** =krisb-mermaid.el=
:PROPERTIES:
:CUSTOM_ID: krisb-mermaidel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-mermaid.el"
  ;;; Mermaid-mode
  (use-package mermaid-mode)

  ;;; Ob-mermaid
  ;; Mermaid diagrams
  (use-package ob-mermaid
    :ensure-system-package (mmdc . mermaid-cli)
    :custom
    (ob-mermaid-cli-path (executable-find "mmdc"))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append '((mermaid . t)) org-babel-load-languages)))

  ;;; Provide
  (provide 'krisb-mermaid)
#+end_src

** Email
:PROPERTIES:
:CUSTOM_ID: email
:END:

*** Composition
:PROPERTIES:
:CUSTOM_ID: composition
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-email-composition.el"
  ;;; Composition
  ;;;; Message
  (use-package message
    :ensure nil
    :commands compose-mail
    :hook ((message-setup . message-sort-headers)
           ;; I like to use prose linters. See my flymake and flymake-collection
           ;; configurations that leverage vale
           (message-mode . flymake-mode)
           (message-mode . olivetti-mode)
           (message-mode . mixed-pitch-mode)
           (message-send . krisb-message-check-subject)
           (message-send . krisb-message-check-from))
    :custom
    (message-directory krisb-email-directory)
    (message-mail-user-agent t)           ; Use `mail-user-agent'
    (compose-mail-user-agent-warnings t)
    (message-kill-buffer-on-exit t)
    (message-elide-ellipsis "> [... %l lines elided]\n")
    (message-confirm-send nil)

    ;; Headers
    (message-hidden-headers nil)
    (message-ignored-cited-headers ".") ; Don't include any headers when citing emails
    ;; Generates all headers in the variables `message-required-news-headers' or
    ;; `message-required-mail-headers'. Otherwise, unless another package manually
    ;; adds headers (e.g. mu4e), those headers won't be inserted into a message
    ;; draft buffer. I enable this to make sure that the date header is inserted
    ;; in a draft. (No date header means the date is set to time 0, which is
    ;; annoying for querying emails via e.g. notmuch.)
    (message-generate-headers-first t)

    ;; Signatures
    (message-signature-insert-empty-line t)
    (message-signature "Kind regards,\nKristoffer\n")
    (message-signature-separator "^-- *$")

    ;; Citations. See e.g. `message-cite-style-gmail' for the options relevant to
    ;; citations. Importantly, I can set these options buffer locally.
    (message-cite-function 'message-cite-original-without-signature)
    (message-citation-line-function 'message-insert-formatted-citation-line)
    (message-citation-line-format "On %a, %b %d %Y, %N wrote:\n")
    (message-cite-reply-position 'below)

    ;; Replying
    (message-wide-reply-confirm-recipients t)

    ;; Forwarding
    (message-forward-as-mime t)           ; NOTE 2024-09-27: Experimental
    (message-forward-before-signature nil)

    ;; Attachments
    (mml-attach-file-at-the-end t)
    (mml-dnd-attach-options t)
    :config
    (krisb-modus-themes-setup-faces
     "message"
     (set-face-attribute 'message-mml nil :weight 'bold :background bg-sage))

    (with-eval-after-load 'mu4e
      (setq mu4e-attachment-dir (expand-file-name ".attachments/" message-directory)))

    ;; Taken from Doom. Detect empty subjects, and give users an opportunity to
    ;; fill something in
    (defun krisb-message-check-subject ()
      "Check that a subject is present, and prompt for a subject if not."
      (save-excursion
        (goto-char (point-min))
        (search-forward "--text follows this line--")
        (re-search-backward "^Subject:")
        (let ((subject (string-trim (substring (thing-at-point 'line) 8))))
          (when (string-empty-p subject)
            (end-of-line)
            (insert (read-string "Subject (optional): "))))))

    (defun krisb-message-check-from ()
      "Prompt user to confirm sending from this email."
      (save-excursion
        (goto-char (point-min))
        (search-forward "--text follows this line--")
        (re-search-backward "^From:")
        (let ((from (string-trim (substring (thing-at-point 'line) 5))))
          (when (and (not (string-match-p (rx (literal user-mail-address)) from))
                     (not (yes-or-no-p (concat
                                        "Are you sure you want to send from "
                                        (propertize from 'face 'highlight)
                                        "?"))))
            (cl--set-buffer-substring (pos-bol) (pos-eol)
                                      (concat
                                       "From: "
                                       (read-string "Set FROM to: " user-mail-address))))))))

  ;;;; Krisb-email-composition-ext
  (use-package krisb-email-composition-ext
    :ensure nil
    :after message
    :custom
    (message-signature #'krisb-signature-select)
    :config
    ;; TODO 2025-04-03: For some reason using `krisb-signature-separator' in
    ;; :custom causes a startup warning about the variable not being
    ;; defined... I'm not sure why, so a workaround is to set
    ;; `message-signature-separator' in :config.
    (setopt message-signature-separator (format "^%s *$" (read krisb-signature-separator)))

    (with-eval-after-load 'mu4e
      (setq mu4e-contexts
            `(,(make-mu4e-context
                :name "Uni"
                :enter-func (lambda () (mu4e-message "Entering Uni context"))
                :leave-func (lambda () (mu4e-message "Leaving Uni context"))
                :vars `((user-mail-address . "kristoffer_balintona@alumni.brown.edu")
                        ;; Directories
                        (mu4e-drafts-folder . "/drafts/uni/")
                        (mu4e-sent-folder . "/uni/[Gmail].Sent Mail")
                        (mu4e-refile-folder . "/uni/[Gmail].All Mail")
                        (mu4e-trash-folder . "/uni/[Gmail].Trash")
                        (mu4e-maildir-initial-input . "/uni/ ")
                        ;; Maildirs
                        (mu4e-maildir-shortcuts . ((:maildir "/uni/Inbox" :key ?i)
                                                   (:maildir "/uni/[Gmail].Sent Mail" :key ?s)
                                                   (:maildir "/drafts/uni/" :key ?d)
                                                   (:maildir "/uni/[Gmail].Drafts" :key ?D)
                                                   (:maildir "/uni/[Gmail].Trash" :key ?t)
                                                   (:maildir "/uni/[Gmail].All Mail" :key ?a)))
                        (krisb-signature-alist .
                                               (("Take care" . "Take care,\nKristoffer")
                                                ("In gratitude" . "In gratitude,\nKristoffer")
                                                ("Best" . "Best,\nKristoffer")
                                                ("With appreciation" . "With appreciation,\nKristoffer")
                                                ("Brown banner" . "\nWith appreciation,\nKristoffer\n\n#+begin_export html
  <br />
  <table
    style='color: rgb(136, 136, 136); border: none; border-collapse: collapse; font-family: garamond'
  >
    <tbody>
      <tr style='height: 81.25pt'>
        <td
          style='
            border-right: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 11pt 5pt 5pt;
          '
          title=''
        >
          <img
            src='https://clipground.com/images/brown-university-logo-png-1.png'
            alt='Brown logo'
            style='border: none'
            height='100'
          />
        </td>
        <td
          style='
            border-left: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 5pt 5pt 11pt;
          '
        >
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 6pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 11pt;
                font-weight: 700;
                white-space: pre-wrap;
              '
              >Kristoffer Balintona</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >B.A. Philosophy</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >Class of 2024</span
            >
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                white-space: pre-wrap;
              '
              >Tel: (773) 677-9699</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='
              font-size: 10pt;
              line-height: 1.2;
              margin-top: 0pt;
              margin-bottom: 0pt;
            '
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >Box: 6327</span
            >
          </p>
          <br />
        </td>
      </tr>
    </tbody>
  </table>
  ,#+end_export")
                                                ("BUI banner" . "\n\nWarmly,\nBrown University Interviews Executive Committee\n\n#+begin_export html
  <br />
  <table
    style='
      color: rgb(136, 136, 136);
      border: none;
      border-collapse: collapse;
      font-family: garamond;
    '
  >
    <tbody>
      <tr style='height: 81.25pt'>
        <td
          style='
            border-right: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 11pt 5pt 5pt;
          '
          title=''
        >
          <img
            src='https://browninterviews.org/wp-content/uploads/2020/06/bu-small-logo.png'
            alt='Brown logo'
            style='border: none'
            height='70'
          />
        </td>
        <td
          style='
            border-left: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 5pt 5pt 11pt;
          '
        >
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Kristoffer Balintona ('24)</span>
            <span> | Editor in Chief</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Charles Alaimo ('25)</span>
            <span> | Senior Interviews Coordinator</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Dana Toneva ('24)</span>
            <span> | Senior Editor</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Riley Stevenson ('27)</span>
            <span> | Senior Editor</span>
            <br />
          </p>
          <br />
        </td>
      </tr>
    </tbody>
  </table>
  ,#+end_export")))
                        ;; Smtpmail
                        (smtpmail-smtp-user "kristoffer_balintona@alumni.brown.edu") ; Send from this address
                        (smtpmail-mail-address "kristoffer_balintona@alumni.brown.edu")))
              ,(make-mu4e-context

                :enter-func (lambda () (mu4e-message "Entering Personal context"))
                :leave-func (lambda () (mu4e-message "Leaving Personal context"))
                :vars `((user-mail-address . "krisbalintona@gmail.com")
                        ;; Directories
                        (mu4e-drafts-folder . "/drafts/personal")
                        (mu4e-sent-folder . "/personal/[Gmail].Sent Mail")
                        (mu4e-refile-folder . "/personal/[Gmail].All Mail")
                        (mu4e-trash-folder . "/personal/[Gmail].Trash")
                        (mu4e-maildir-initial-input . "/personal/ ")
                        ;; Maildirs
                        (mu4e-maildir-shortcuts . ((:maildir "/personal/Inbox" :key ?i)
                                                   (:maildir "/personal/[Gmail].Sent Mail" :key ?s)
                                                   (:maildir "/drafts/personal/" :key ?d)
                                                   (:maildir "/personal[Gmail].Drafts/[Gmail].Drafts" :key ?D)
                                                   (:maildir "/personal/[Gmail].Trash" :key ?t)
                                                   (:maildir "/personal/[Gmail].All Mail" :key ?a)))
                        (krisb-signature-alist .
                                               (("Take care" . "Take care,\nKristoffer")
                                                ("In gratitude" . "In gratitude,\nKristoffer")
                                                ("Best" . "Best,\nKristoffer")
                                                ("With appreciation" . "With appreciation,\nKristoffer")))
                        ;; Smtpmail
                        (smtpmail-smtp-user "krisbalintona@gmail.com") ; Send from this address
                        (smtpmail-mail-address "krisbalintona@gmail.com")))))))

  ;;;; Footnote
  ;; Footnotes for `message-mode'
  (use-package footnote
    :ensure nil
    :hook (message-mode . footnote-mode)
    :custom
    (footnote-mode-line-string "")
    (footnote-section-tag "Footnotes:")
    (footnote-spaced-footnotes nil)
    (footnote-prompt-before-deletion nil))

  ;;;; Org-mime
  (use-package org-mime
    :pin melpa
    :after message
    :hook ((message-send . org-mime-confirm-when-no-multipart)
           (org-mime-html . (lambda ()
                              "Nicely offset block quotes in email bodies.
  Taken from
  https://github.com/org-mime/org-mime?tab=readme-ov-file#css-style-customization."
                              (org-mime-change-element-style
                               "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))
    :bind ( :map message-mode-map
            ("C-c M-o" . org-mime-htmlize)
            ("C-c '" . org-mime-edit-mail-in-org-mode))
    :custom
    (org-mime-library 'mml)               ; For gnus
    (org-mime-export-ascii 'ascii)
    (org-mime-preserve-breaks nil)
    ;; Keep GPG signatures outside of multipart. Modified version of
    ;; https://github.com/org-mime/org-mime?tab=readme-ov-file#keep-gpg-signatures-outside-of-multipart
    (org-mime-find-html-start
     (lambda (start)
       (save-excursion
         (goto-char start)
         (if (search-forward "<#secure method=pgpmime mode=sign>" nil t)
             (1+ (point))
           start))))
    (org-mime-debug nil)
    :config
    (defun krisb-org-mime--remove-spacer ()
      "Remove the \"spacer\" above the line at point.
  A spacer is two newlines inserted after portions inserted by
  `org-mime-htmlize'."
      (save-excursion
        (previous-logical-line)
        (delete-blank-lines)))
    (advice-add 'org-mime-htmlize :after #'krisb-org-mime--remove-spacer)
    :config
    ;; FIXME 2024-10-07: For some reason, setting these in :custom doesn't work...
    (setq org-mime-src--hint "# org-mime hint: Press C-c C-c to commit change.\n" ; Start with a single # to font-lock as comment
          org-mime-export-options '( :with-latex t
                                     :section-numbers nil
                                     :with-author nil
                                     :with-toc nil))

    ;; Pop buffer according to `display-buffer-alist'
    (el-patch-defun org-mime-edit-mail-in-org-mode ()
      "Call a special editor to edit the mail body in `org-mode'."
      (interactive)
      ;; see `org-src--edit-element'
      (cond
       ((eq major-mode 'org-mode)
        (message "This command is not for `org-mode'."))
       (t
        (setq org-mime--saved-temp-window-config (current-window-configuration))
        (let* ((beg (copy-marker (org-mime-mail-body-begin)))
               (end (copy-marker (or (org-mime-mail-signature-begin) (point-max))))
               (bufname "OrgMimeMailBody")
               (buffer (generate-new-buffer bufname))
               (overlay (org-mime-src--make-source-overlay beg end))
               (text (buffer-substring-no-properties beg end)))

          (setq org-mime-src--beg-marker beg)
          (setq org-mime-src--end-marker end)
          ;; don't use local-variable because only user can't edit multiple emails
          ;; or multiple embedded org code in one mail
          (setq org-mime-src--overlay overlay)

          (el-patch-swap
            (save-excursion
              (delete-other-windows)
              (org-switch-to-buffer-other-window buffer)
              (erase-buffer)
              (insert org-mime-src--hint)
              (insert text)
              (goto-char (point-min))
              (org-mode)
              (org-mime-src-mode))
            (with-current-buffer buffer
              (erase-buffer)
              (insert org-mime-src--hint)
              (insert text)
              (goto-char (point-min))
              (org-mode)
              (org-mime-src-mode)
              (while (org-at-comment-p)
                (forward-line 1))))
          (el-patch-add (display-buffer buffer)))))))

  ;;; Mail Transfer Agent (email sending)

  ;;;; Sendmail
  ;; Use `sendmail' program to send emails? If yes, send the value of
  ;; `send-mail-function' to `sendmail-send-it'
  (use-package sendmail
    :ensure nil
    :after message
    :custom
    (mail-default-directory (expand-file-name "drafts/" message-directory))
    ;; These two messages make sure that emails are sent from the email address
    ;; specified in the "from" header field! Taken from
    ;; https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/
    (mail-specify-envelope-from t)
    (message-sendmail-envelope-from 'header)
    (mail-envelope-from 'header))

  ;;;; Smtpmail
  ;; Use `msmtp' program to send emails? If yes, set the value of
  ;; `send-mail-function' to `smtpmail-send-it'
  (use-package smtpmail
    :ensure nil
    :ensure-system-package msmtp
    :after message
    :custom
    (smtpmail-queue-mail nil)
    ;; Below are settings for Gmail. See
    ;; https://support.google.com/mail/answer/7126229?hl=en#zippy=%2Cstep-change-smtp-other-settings-in-your-email-client
    (smtpmail-default-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'starttls)
    ;; Make sure email details that are used are not the current (when flushing)
    ;; variables, but the variables used when writing the email
    (smtpmail-store-queue-variables t)
    (smtpmail-queue-dir (expand-file-name "drafts/.smtp-queue" message-directory))
    (smtpmail-servers-requiring-authorization "gmail")) ; NOTE 2024-08-25: Fixes Gmail's 530 error on sending

  ;;; Provide
  (provide 'krisb-email-composition)
#+end_src

*** Notmuch
:PROPERTIES:
:CUSTOM_ID: notmuch
:END:

**** Notmuch
:PROPERTIES:
:CUSTOM_ID: notmuch-0
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;;; Notmuch
  (use-package notmuch
    :ensure-system-package (notmuch
                            (gmi . lieer-git))
    :hook ((notmuch-mua-send . notmuch-mua-attachment-check) ; Also see `notmuch-mua-attachment-regexp'
           (notmuch-show . olivetti-mode)
           (notmuch-show . visual-line-mode)
           (notmuch-show . visual-wrap-prefix-mode)
           (message-send . krisb-notmuch-set-sendmail-args))
    :bind (([remap compose-mail] . notmuch-mua-new-mail)
           :map krisb-open-keymap
           ("n" . notmuch)
           :map notmuch-search-mode-map
           ("a" . nil) ; The default is too easy to hit accidentally
           ("/" . notmuch-search-filter)
           ("r" . notmuch-search-reply-to-thread)
           ("R" . notmuch-search-reply-to-thread-sender)
           :map notmuch-show-mode-map
           ("a" . nil)
           ("r" . notmuch-show-reply)
           ("R" . notmuch-show-reply-sender)
           ("T" . krisb-notmuch-show-trash-thread-then-next)
           ([remap notmuch-show-advance-and-archive] . krisb-notmuch-show-advance-and-tag))
    :custom
    (mail-user-agent 'notmuch-user-agent)
    (notmuch-identities nil)              ; Defer to notmuch-config's file data

    ;; Hello UI
    (notmuch-hello-sections (list #'notmuch-hello-insert-saved-searches
                                  #'notmuch-hello-insert-alltags
                                  #'notmuch-hello-insert-recent-searches))
    (notmuch-hello-thousands-separator ",")
    (notmuch-show-all-tags-list t)

    ;; Notmuch-searches
    (notmuch-saved-searches
     '((:name "inbox"                 :query "tag:inbox and not tag:list" :sort-order oldest-first :key "i")
       (:name "to-read mailing lists" :query "tag:list and tag:inbox "    :sort-order oldest-first :key "l")
       (:name "all mailing lists"     :query "tag:list"                                            :key "L" )
       (:name "sent"                  :query "tag:sent"                                            :key "s")
       (:name "drafts"                :query "tag:draft or path:drafts/"  :search-type unthreaded  :key "d")
       (:name "archived"              :query "not tag:trash"                                       :key "a")
       (:name "all"                   :query "path:**"                                             :key "A")
       (:name "trash"                 :query "tag:trash"                                           :key "t")))
    ;; See `man' for mbsync and notmuch to see valid search terms. See
    ;; https://www.emacswiki.org/emacs/NotMuch#h5o-2 on how to expunge local files
    ;; via cli
    (notmuch-search-hide-excluded t)
    (notmuch-show-empty-saved-searches t)
    (notmuch-search-oldest-first nil)
    (notmuch-search-result-format '(("date" . "%14s ")
                                    ("count" . "%-7s ")
                                    ("authors" . "%-30s ")
                                    ("subject" . "%-75.75s ")
                                    ("tags" . "(%s)")))

    ;; Tags
    (notmuch-archive-tags '("-inbox"))
    (notmuch-message-replied-tags '("+replied"))
    (notmuch-message-forwarded-tags '("+forwarded"))
    (notmuch-show-mark-read-tags '("-unread"))
    (notmuch-draft-tags '("+draft"))
    (notmuch-draft-folder "drafts")
    (notmuch-draft-save-plaintext 'ask)
    (notmuch-tagging-keys
     `(("a" notmuch-archive-tags "Archive")
       ("r" notmuch-show-mark-read-tags "Mark read")
       ("f" ("+flagged") "Flag")
       ("s" ("+spam" "-inbox") "Mark as spam")
       ("t" ("+trash" "-inbox") "Trash")))
    (notmuch-tag-formats
     '(("unread" (propertize tag 'face 'notmuch-tag-unread))
       ("flagged" (propertize tag 'face 'notmuch-tag-flagged))))
    (notmuch-tag-deleted-formats
     '(("unread" (notmuch-apply-face bare-tag `notmuch-tag-deleted))
       (".*" (notmuch-apply-face tag `notmuch-tag-deleted))))

    ;; Notmuch-show-mode (i.e. reading emails)
    (notmuch-show-relative-dates t)
    (notmuch-show-all-multipart/alternative-parts nil)
    (notmuch-show-indent-multipart nil)
    (notmuch-show-indent-messages-width 3)
    (notmuch-show-part-button-default-action 'notmuch-show-interactively-view-part)
    (notmuch-show-text/html-blocked-images ".") ; Block everything
    (notmuch-wash-wrap-lines-length nil)
    (notmuch-unthreaded-show-out t)
    (notmuch-message-headers-visible nil)
    (notmuch-message-headers '("To" "Cc" "Date" "Subject"))
    (notmuch-multipart/alternative-discouraged
     '("text/html" "multipart/related" "text/x-patch"))

    ;; Notmuch-tree-mode
    (notmuch-tree-show-out nil)
    (notmuch-tree-result-format '(("date" . "%12s  ")
                                  ("authors" . "%-20s  ")
                                  ((("tree" . "%s")
                                    ("subject" . "%s"))
                                   . " %-85.85s  ")
                                  ("tags" . "(%s)")))
    (notmuch-tree-outline-enabled nil)

    ;; Email composition
    (notmuch-mua-compose-in 'current-window)
    (notmuch-mua-hidden-headers nil)
    (notmuch-address-command 'internal)
    (notmuch-address-internal-completion '(sent nil))
    (notmuch-always-prompt-for-sender t)
    (notmuch-mua-cite-function 'message-cite-original-without-signature)
    (notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
    (notmuch-mua-user-agent-function nil)
    (notmuch-maildir-use-notmuch-insert t)
    (notmuch-wash-citation-lines-prefix 0)
    (notmuch-wash-citation-lines-suffix 0)
    (notmuch-crypto-process-mime t)
    (notmuch-crypto-get-keys-asynchronously t)
    ;; See `notmuch-mua-send-hook'
    (notmuch-mua-attachment-regexp (concat "\\b\\("
                                           "attache\?ment\\|attached\\|attach\\|"
                                           "pi[èe]ce\s+jointe?"
                                           "\\)\\b"))

    ;; Sending emails.
    ;; Use Lieer to send emails. Also see `krisb-notmuch-set-sendmail-args'. Read
    ;; https://github.com/gauteh/lieer/wiki/Emacs-and-Lieer.
    (sendmail-program (executable-find "gmi"))
    (send-mail-function 'sendmail-send-it)
    (notmuch-fcc-dirs nil) ; Gmail already copies sent emails, so don't move them elsewhere locally
    :config
    (krisb-modus-themes-setup-faces
     "notmuch"
     ;; More noticeable demarcation of emails in thread in notmuch-show-mode
     (set-face-attribute 'notmuch-message-summary-face nil
                         :foreground fg-alt
                         ;; NOTE 2024-09-26: We do it this way since changing
                         ;; faces will refresh the font to be 1.1 times the 1.1
                         ;; times height, and so on
                         :height (truncate (* (face-attribute 'default :height nil) 1.1))
                         :overline t
                         :extend nil
                         :inherit 'unspecified)
     (set-face-attribute 'notmuch-tag-added nil
                         :underline `(:color ,cyan-cooler :style double-line :position t))
     (add-to-list 'notmuch-tag-formats
                  `("correspondence" (propertize tag 'face '(:foreground ,green-faint))))
     (add-to-list 'notmuch-tag-formats
                  `("commitment" (propertize tag 'face '(:foreground ,yellow-faint)))))

    ;; Don't buttonize citations
    ;; FIXME 2024-10-07: For some reason putting this in :custom and setting it to
    ;; a high value doesn't work, so I put it here
    (setq notmuch-wash-citation-lines-prefix most-positive-fixnum
          notmuch-wash-citation-lines-suffix most-positive-fixnum)

    ;; Set sendmail args appropriate to using lieer as `sendmail-program'
    (defun krisb-notmuch-set-sendmail-args ()
      "Set `message-sendmail-extra-arguments' arguments.
  Set `message-sendmail-extra-arguments' accordingly (changing the
  maildir) such that lieer can properly send the email. (This assumes
  `sendmail-program' is set to the gmi executable.) Instruction from
  https://github.com/gauteh/lieer/wiki/Emacs-and-Lieer."
      (when (string-match-p "gmi" sendmail-program)
        (let* ((from (downcase (message-fetch-field "from")))
               (root-maildir (expand-file-name "~/Documents/emails/"))
               (personal-maildir (expand-file-name "personal" root-maildir))
               (uni-maildir (expand-file-name "uni" root-maildir)))
          (cond
           ((string-match-p (rx (literal "krisbalintona@gmail.com")) from)
            (setq-local message-sendmail-extra-arguments `("send" "--quiet" "-t" "-C" ,personal-maildir)))
           ((string-match-p (rx (literal "kristoffer_balintona@alumni.brown.edu")) from)
            (setq-local message-sendmail-extra-arguments `("send" "--quiet" "-t" "-C" ,uni-maildir)))))))

    ;; REVIEW 2024-09-26: Prot's lin package apparently makes disabling this
    ;; better?
    (with-eval-after-load 'lin
      (remove-hook 'notmuch-search-hook #'notmuch-hl-line-mode))

    ;; Prefer not to have emails recentered as I readjust them
    (advice-add 'notmuch-show-message-adjust :override #'ignore))

  ;;;; Krisb-notmuch-ext
  (use-package krisb-notmuch-ext
    :ensure nil
    :after notmuch
    :hook (notmuch-show  . krisb-notmuch-show-expand-only-unread-h)
    :config
    (with-eval-after-load 'pulsar
      (dolist (func '(notmuch-show-rewind
                      notmuch-show-advance-and-archive
                      krisb-notmuch-show-advance-and-tag))
        (add-to-list 'pulsar-pulse-functions func))))
#+end_src

**** Accessories
:PROPERTIES:
:CUSTOM_ID: accessories
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;;; Notmuch-transient
  (use-package notmuch-transient
    :after notmuch
    :custom
    (notmuch-transient-add-bindings t)
    (notmuch-transient-prefix "C-d"))

  ;;;; Notmuch-addr
  ;; Better address completion for notmuch; replaces the built-in
  ;; `notmuch-address' completion system. Read
  ;; https://nmbug.notmuchmail.org/nmweb/show/20201108231150.5419-1-jonas%40bernoul.li
  ;; for more information
  (use-package notmuch-addr
    :after notmuch-address
    :config
    (notmuch-addr-setup))

  ;;;; Ol-notmuch
  ;; Org-links for search queries (i.e. notmuch-search-mode, notmuch-tree-mode)
  ;; and messages (i.e. notmuch-show-mode).
  (use-package ol-notmuch
    :autoload krisb-org-notmuch-store-link
    :config
    ;; Integration with `org-agenda'
    (with-eval-after-load 'ol
      (el-patch-defun org-notmuch-store-link ()
        (el-patch-swap
          "Store a link to one or more notmuch messages."
          "Store a link to one or more notmuch messages.
  My version allows for linking to the first message in an email thread
  from a `notmuch-search-mode' buffer.")
        ;; 2025-04-09: Not sure what the most elegant el-patch directives would
        ;; be, so I just remove then add.
        (el-patch-remove
          (when (memq major-mode '(notmuch-show-mode notmuch-tree-mode))
            ;; The value is passed around using variable `org-store-link-plist'.
            (org-link-store-props
             :type       "notmuch"
             :message-id (notmuch-show-get-message-id t)
             :subject    (notmuch-show-get-subject)
             :from       (notmuch-show-get-from)
             :to         (notmuch-show-get-to)
             :date       (org-trim (notmuch-show-get-date)))
            (org-link-add-props :link (org-link-email-description "notmuch:id:%m"))
            (org-link-add-props :description (org-link-email-description))
            org-store-link-plist))
        (el-patch-add
          (cond
           ((memq major-mode '(notmuch-show-mode notmuch-tree-mode))
            ;; The value is passed around using variable `org-store-link-plist'.
            (org-link-store-props
             :type       "notmuch"
             :message-id (notmuch-show-get-message-id t)
             :subject    (notmuch-show-get-subject)
             :from       (notmuch-show-get-from)
             :to         (notmuch-show-get-to)
             :date       (org-trim (notmuch-show-get-date)))
            (org-link-add-props :link (org-link-email-description "notmuch:id:%m"))
            (org-link-add-props :description (org-link-email-description))
            org-store-link-plist)
           ((equal major-mode 'notmuch-search-mode)
            (save-window-excursion
              (let ((buf (notmuch-show (notmuch-search-find-thread-id))))
                (with-current-buffer buf
                  (org-link-store-props
                   :type       "notmuch"
                   :message-id (notmuch-show-get-message-id t)
                   :subject    (notmuch-show-get-subject)
                   :from       (notmuch-show-get-from)
                   :to         (notmuch-show-get-to)
                   :date       (org-trim (notmuch-show-get-date)))
                  (org-link-add-props :link (org-link-email-description "notmuch:id:%m"))
                  (org-link-add-props :description (org-link-email-description)))
                (kill-buffer buf)
                org-store-link-plist)))))))

    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   `("e" "Email" entry
                     (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
                     "* TODO %? [[%L][\"%:subject\"]] :email:\n\nFrom %:from\nTo: %:to\n"
                     :empty-lines 1)
                   'append)
      (add-to-list 'org-capture-templates
                   `("n" "Review newsletter/subscription email" entry
                     (file ,krisb-org-agenda-main-file)
                     "* TODO [#E] Review subscription/newsletter email: [[%L][\"%:subject\"]] %? :email:inbox:%^g

  From %:from
  To: %:to\n"
                     :immediate-finish t
                     :empty-lines 1)
                   'append)

      ;; Using `dolist' or `cl-loop' will not work as expected... you'll need to
      ;; (copy-sequence ...) the shared objects, making those forms not elegant
      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-tree-mode"))))
      (add-to-list 'org-capture-templates-contexts '("n" ((in-mode . "notmuch-tree-mode"))))
      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-search-mode"))))
      (add-to-list 'org-capture-templates-contexts '("n" ((in-mode . "notmuch-search-mode"))))
      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-show-mode"))))
      (add-to-list 'org-capture-templates-contexts '("n" ((in-mode . "notmuch-show-mode"))))))

  ;;;; Mode line indicator
  ;; Try using display-time's built-in email indicator --- less informative but
  ;; more visually subtle than `notmuch-indicator'.  Obviously the below applies
  ;; only when `display-time-mode' is non-nil.
  (with-eval-after-load 'time
    (with-eval-after-load 'notmuch
      (setopt display-time-mail-face 'notmuch-search-flagged-face))

    (defvar krisb-display-time-mail-icon
      (cond
       ((featurep 'nerd-icons)
        (propertize (nerd-icons-mdicon "nf-md-email")
                    'face `(:family ,(nerd-icons-mdicon-family) :height 1.1)
                    'display '(raise 0.05)))
       ((featurep 'all-the-icons)
        (propertize (all-the-icons-material "mail_outline")
                    'face `(:family ,(all-the-icons-material-family) :height 1.1)
                    'display '(raise -0.1))))
      "Icon I use for displaying mail in `display-time-string-forms'.")

    (setopt display-time-use-mail-icon t
            display-time-mail-function
            (lambda ()
              (let* ((command (format "notmuch search tag:inbox and tag:unread and not tag:list and not tag:sub | wc -l"))
                     (count (string-to-number (shell-command-to-string command))))
                (< 0 count)))
            display-time-string-forms
            '((if (and (not display-time-format) display-time-day-and-date)
                  (format-time-string "%a %b %e " now)
                "")
              (propertize
               (format-time-string (or display-time-format
                                       (if display-time-24hr-format "%H:%M" "%-I:%M%p"))
                                   now)
               'face 'display-time-date-and-time
               'help-echo (format-time-string "%a %b %e, %Y" now))
              load
              (if mail
                  (concat
                   " "
                   (propertize
                    (if (and display-time-use-mail-icon (display-graphic-p))
                        (symbol-value 'krisb-display-time-mail-icon)
                      display-time-mail-string)
                    'face display-time-mail-face
                    'help-echo "You have new mail; mouse-2: Read mail"
                    'mouse-face 'mode-line-highlight
                    'local-map (make-mode-line-mouse-map 'mouse-2
                                                         read-mail-command)))
                "")
              " "))
    (advice-add 'notmuch-bury-or-kill-this-buffer :around
                (lambda (&rest args)
                  "Ensure mail icon is accurate.
  Update right after closing the notmuch hello buffer so the mail icon
  reflects the state of my maildirs accurate."
                  (when (equal major-mode 'notmuch-hello-mode)
                    (display-time-update))
                  (apply args))))

  ;;;; Mailcap
  (use-package mailcap
    :ensure nil
    :custom
    ;; This affects the action called by `notmuch-show-view-part' and the listings
    ;; of `notmuch-show-interactively-view-part'
    (mailcap-user-mime-data
     '(("xdg-open %s" "text/html"))))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-7
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;; Provide
  (provide 'krisb-notmuch)
#+end_src

** Programming
:PROPERTIES:
:CUSTOM_ID: programming
:END:

*** =krisb-programming-essentials.el=
:PROPERTIES:
:CUSTOM_ID: krisb-programming-essentialsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-programming-essentials.el"
  ;;; Prog-mode
  (use-package prog-mode
    :ensure nil
    :hook ((prog-mode . goto-address-prog-mode) ; Buttonize URLs and e-mail addresses in comments and strings
           (prog-mode . bug-reference-prog-mode))) ; Buttonize bug references in comments and strings

  ;;; Writing

  ;;;; Newcomment
  (use-package newcomment
    :ensure nil
    :custom
    (comment-empty-lines t)
    (comment-fill-column nil)
    (comment-multi-line t)
    (comment-style 'indent))

  ;;;; Electric
  (use-package electric
    :ensure nil
    :hook (prog-mode . electric-block-comment-mode) ; Emacs 31.1
    :custom
    (electric-pair-inhibit-predicate 'electric-pair-default-inhibit)

    (electric-quote-comment nil)
    (electric-quote-string nil)
    (electric-quote-context-sensitive t)
    (electric-quote-replace-double t)
    (electric-quote-inhibit-functions nil)
    :config
    (electric-pair-mode 1))

  ;;; Visual organization

  ;;;; Form-feed
  ;; Display  (page breaks) fancily. Visit the readme for alternatives and their
  ;; differences
  ;; 2025-03-31: I've found that form-feed is superior to page-break-lines for
  ;; graphical systems, since it uses font-lock instead of glyph composition.  In
  ;; practice, the biggest effect is the consistency of the length of the
  ;; horizontal line regardless of font: the length of the horizontal rule of
  ;; page-break-lines is not guaranteed to fill the width of the window, whereas
  ;; it is for form-feed.
  (use-package form-feed
    :diminish
    :custom
    (form-feed-include-modes
     '(prog-mode
       conf-mode
       text-mode
       ;; TOOD 2025-03-25: Enabling form feed in `help-mode' buffers removes the
       ;; fontification of function arguments (face: `help-argument-name').
       ;; help-mode
       emacs-news-view-mode
       compilation-mode))
    (form-feed-exclude-modes nil)
    :config
    (global-form-feed-mode 1))

  ;;;; Which-func
  (use-package which-func
    :hook (on-first-file . which-function-mode)
    :custom
    (which-func-modes '(prog-mode)))

  ;;;; Breadcrumb
  ;; Which-function stuff but more performant and prettier formatting. Read
  ;; package commentary for a description on how.
  (use-package breadcrumb
    :demand t
    :hook (eglot-managed-mode . (lambda () (when (derived-mode-p 'prog-mode) (breadcrumb-local-mode))))
    :init
    (with-eval-after-load 'which-func
      (setopt which-func-functions '(breadcrumb-imenu-crumbs))))

  ;;;; Abdridge-diff
  ;; Abridge (shorten) refined diff hunks with long lines.  You can enable and
  ;; disable showing the abridged version using `abridge-diff-toggle-hiding'.
  (use-package abridge-diff
    :demand t
    :after diff
    :diminish
    :config
    (abridge-diff-mode 1))

  ;;;; Whitespace
  ;; Visualize whitespace so mistakes are more easily detectable.
  (use-package whitespace
    :ensure nil
    :hook (prog-mode . whitespace-mode)
    :custom
    (whitespace-style '(empty face lines-tail tab-mark tabs trailing))
    (whitespace-display-mappings '((tab-mark ?\t [?› ?\t])
                                   (newline-mark ?\n [?¬ ?\n])
                                   (space-mark ?\  [?·] [?.])))
    (whitespace-line-column nil))

  ;;; Convenience

  ;;;; Lorem-ipsum
  ;; Insert sample text
  (use-package lorem-ipsum
    :config
    (setq-default lorem-ipsum-list-bullet "- "))

  ;;;; Sudo-edit
  ;; Utilities to edit files as root
  (use-package sudo-edit
    :bind ( :map krisb-file-keymap
            ("U" . sudo-edit-find-file)
            ("u" . sudo-edit))
    :config
    (sudo-edit-indicator-mode 1))

  ;;;; Rainbow-mode
  ;; Colorify color codes
  (use-package rainbow-mode
    :diminish
    :hook (;; TOOD 2025-03-25: Enabling form feed in `help-mode' buffers removes
           ;; the fontification of function arguments (face:
           ;; `help-argument-name').
           ;; (help-mode . rainbow-mode)
           (prog-mode . rainbow-mode)))

  ;;; Eldoc
  (use-package eldoc
    :diminish
    :bind ( :map help-map
            ("\." . eldoc-doc-buffer))
    :custom
    (eldoc-print-after-edit nil)
    (eldoc-idle-delay 0.2)
    (eldoc-documentation-strategy
     'eldoc-documentation-compose-eagerly) ; Mash multiple sources together and display eagerly
    (eldoc-echo-area-use-multiline-p 'truncate-sym-name-if-fit) ; Also respects `max-mini-window-height'
    (eldoc-echo-area-display-truncation-message t)
    (eldoc-echo-area-prefer-doc-buffer t)
    (eldoc-help-at-pt t))                 ; Emacs 31.1

  ;;; Embark
  ;; Allow an equivalent to ivy-actions to regular completing-read minibuffers
  (use-package embark
    :bind (("C-.". embark-act)
           ("C-h B". embark-bindings)
           :map vertico-map
           ("C-.". embark-act)
           :map embark-symbol-map
           ("R". raise-sexp)
           :map embark-org-heading-map
           ("C-j" . org-clock-goto))
    :custom
    ;; Embark Actions menu
    (embark-prompter 'embark-keymap-prompter)
    (embark-indicators '(embark-minimal-indicator
                         embark-highlight-indicator
                         embark-isearch-highlight-indicator))
    (prefix-help-command #'embark-prefix-help-command) ; Use completing read when typing ? after prefix key

    (embark-mixed-indicator-delay 1.5)
    (embark-collect-live-initial-delay 0.8)
    (embark-collect-live-update-delay 0.5)
    :config
    (add-to-list 'embark-keymap-alist '(raise-sexp . embark-symbol-map)))

  ;;; Embark-consult
  (use-package embark-consult
    :requires embark consult
    :hook (embark-collect-mode . consult-preview-at-point-mode))

  ;;; Provide
  (provide 'krisb-programming-essentials)
#+end_src

*** =krisb-treesit.el=
:PROPERTIES:
:CUSTOM_ID: krisb-treesitel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-treesit.el"
  ;;; Treesit
  ;; Built-in tree-sitter support.
  (use-package treesit
    :ensure nil
    :custom
    ;; HACK 2024-10-20: The car of
    ;; `treesit--install-language-grammar-out-dir-history' is used as the default
    ;; output directory for installing grammars via
    ;; `treesit-install-language-grammar'. See the definition of
    ;; `treesit-install-language-grammar'.
    (treesit--install-language-grammar-out-dir-history
     (list (no-littering-expand-var-file-name "treesit")))
    (treesit-font-lock-level 3))

  ;;; Treesit-auto
  ;; Automatically install tree-sitter grammars.
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    (treesit-extra-load-path treesit--install-language-grammar-out-dir-history)
    :config
    ;; Add all *-ts-modes to `auto-mode-alist'
    (global-treesit-auto-mode 1)
    (treesit-auto-add-to-auto-mode-alist 'all))

  ;;; Provide
  (provide 'krisb-treesit)
#+end_src

*** =krisb-vc.el=
:PROPERTIES:
:CUSTOM_ID: krisb-vcel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-vc.el"
  ;;; Built-in
  ;;;; VC
  (use-package vc
    :ensure nil
    :custom
    (vc-follow-symlinks t)
    ;; Improves performance by not having to check for other backends. Expand this
    ;; list when necessary
    (vc-handled-backends '(Git))
    (vc-revert-show-diff t)
    (vc-annotate-display-mode 'fullscale)
    (vc-find-revision-no-save t)
    (vc-allow-rewriting-published-history 'ask)) ; Emacs 31

  ;;;; Vc-dir
  (use-package vc-dir ; NOTE 2024-10-19: Is not required by vc, so have its own use-package
    :ensure nil
    :bind ( :map vc-dir-mode-map
            ("G" . vc-revert)))

  ;;;; Vc-git
  (use-package vc-git
    :ensure nil
    :hook (vc-git-log-edit-mode . auto-fill-mode)
    :bind ( :map vc-git-log-edit-mode-map
            ("<tab>" . completion-at-point))
    :custom
    (vc-git-diff-switches              ; Have diff headers look similar to Magit's
     '("--patch-with-stat" "--histogram"))
    (vc-git-root-log-format
     `("%h %ad (%ar) %aN%d%n  %s"
       ;; The first shy group matches the characters drawn by --graph. We use
       ;; numbered groups because `log-view-message-re' wants the revision number
       ;; to be group 1.
       ,(concat "^\\(?:[*/\\|]+\\)\\(?:[*/\\| ]+\\)?"
                "\\(?1:[0-9a-z]+\\)"      ; %h
                " "
                "\\(?4:[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} (.*? ago)\\)?" ; %ad (%ar)
                " "
                "\\(?3:\\(?:[[:alpha:]]+\\.?[\n ]\\)+\\)" ; %aN
                "\\(?2:([^)]+)\\)?")                      ; %d
       ((1 'log-view-message)
        (2 'change-log-list nil lax)
        (3 'change-log-name)
        (4 'change-log-date))))
    (vc-git-log-edit-summary-target-len (+ 50 (length "Summary")))
    (vc-git-log-edit-summary-max-len (+ 70 (length "Summary")))
    (vc-git-revision-complete-only-branches t))

  ;;;; Log-edit
  (use-package log-edit
    :ensure nil
    :custom
    (log-edit-headers-alist
     '(("Summary" . log-edit-summary)
       ("Fixes")
       ("Author")))
    (log-edit-setup-add-author nil)
    :custom-face
    (log-edit-summary ((t (:family ,(face-attribute 'variable-pitch :family)))))
    :config
    ;; I can see the files from the Diff with C-c C-d when I want
    (remove-hook 'log-edit-hook #'log-edit-show-files))

  ;;;; Agitate
  ;; QoL stuff for built-in VC workflow
  (use-package agitate
    :after vc
    :demand t
    :hook (diff-mode . agitate-diff-enable-outline-minor-mode)
    :bind ( :map vc-prefix-map
            ("=" . agitate-diff-buffer-or-file)
            ("f" . agitate-vc-git-find-revision)
            ("s" . agitate-vc-git-show)
            ("w" . agitate-vc-git-kill-commit-message)
            ("p p" . agitate-vc-git-format-patch-single)
            ("p n" . agitate-vc-git-format-patch-n-from-head)
            :map diff-mode-map
            ([remap diff-refine-hunk] . agitate-diff-refine-cycle)
            ([remap diff-restrict-view] . agitate-diff-narrow-dwim)
            :map log-view-mode-map
            ("w" . agitate-log-view-kill-revision)
            ("W" . agitate-log-view-kill-revision-expanded)
            :map vc-git-log-view-mode-map
            ("c" . agitate-vc-git-format-patch-single)
            :map log-edit-mode-map
            ("C-c C-i C-n" . agitate-log-edit-insert-file-name)
            ;; See user options `agitate-log-edit-emoji-collection' and
            ;; `agitate-log-edit-conventional-commits-collection'.
            ("C-c C-i C-e" . agitate-log-edit-emoji-commit)
            ("C-c C-i C-c" . agitate-log-edit-conventional-commit))
    :custom
    (diff-refine nil)                     ; We use `agitate-diff-refine-cycle' now
    (agitate-log-edit-informative-show-root-log nil)
    (agitate-log-edit-informative-show-files t)
    :config
    (agitate-log-edit-informative-mode 1)

    (with-eval-after-load 'vc-git
      (advice-add #'vc-git-push :override #'agitate-vc-git-push-prompt-for-remote)))

  ;;; Magit
  ;;;; Magit
  (use-package magit
    :hook ((magit-diff-mode magit-process-mode) . visual-line-mode)
    :bind (("C-x g" . magit)
           :map magit-mode-map
           ("C-<tab>". magit-section-toggle-children)
           :map git-commit-mode-map
           ("<tab>" . completion-at-point))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-bury-buffer-function #'magit-restore-window-configuration)

    (magit-refs-show-commit-count 'all)   ; Show branches and tags

    (magit-format-file-function #'magit-format-file-nerd-icons) ; Fancy file icons


    ;; Refinement (diffs) in hunks
    (magit-diff-refine-hunk t)
    (magit-diff-highlight-hunk-body t)
    (magit-diff-highlight-hunk-region-functions
     '(magit-diff-highlight-hunk-region-using-overlays
       ;; magit-diff-highlight-hunk-region-dim-outside
       magit-diff-highlight-hunk-region-using-face))

    ;; Sections
    (magit-module-sections-nested t)
    (magit-section-show-child-count t)
    (magit-section-initial-visibility-alist '((stashes . show)
                                              (modules . hide)
                                              (unpushed . show)
                                              (unpulled . hide)))
    :custom-face
    (git-commit-summary ((t (:family ,(face-attribute 'variable-pitch :family)))))
    :config
    (magit-auto-revert-mode 1)

    ;; Add dates to magit-logs.  Taken from
    ;; https://github.com/alphapapa/unpackaged.el?tab=readme-ov-file#magit-log-date-headers
    (defun krisb-magit-log--add-date-headers (&rest _ignore)
      "Add date headers to Magit log buffers."
      (when (derived-mode-p 'magit-log-mode)
        (save-excursion
          (ov-clear 'date-header t)
          (goto-char (point-min))
          (cl-loop with last-age
                   for this-age = (-some--> (ov-in 'before-string 'any (line-beginning-position) (line-end-position))
                                    car
                                    (overlay-get it 'before-string)
                                    (get-text-property 0 'display it)
                                    cadr
                                    (s-match (rx (group (1+ digit) ; number
                                                        " "
                                                        (1+ (not blank))) ; unit
                                                 (1+ blank) eos)
                                             it)
                                    cadr)
                   do (when (and this-age
                                 (not (equal this-age last-age)))
                        (ov (line-beginning-position) (line-beginning-position)
                            'after-string (propertize (concat " " this-age "\n")
                                                      'face 'magit-section-heading)
                            'date-header t)
                        (setq last-age this-age))
                   do (forward-line 1)
                   until (eobp)))))
    ;; Use the above function appropriately
    (add-hook 'magit-post-refresh-hook #'krisb-magit-log--add-date-headers)
    (advice-add 'magit-setup-buffer-internal :after #'krisb-magit-log--add-date-headers))

  ;;;; Forge
  ;; Support for git forges (e.g. GitLab and GitHub).
  ;; NOTE 2022-06-01: Make sure a github and/or gitlab token is stored in either
  ;; ~/.authinfo, ~/.authinfo.gpg, or ~/.netrc. See
  ;; https://magit.vc/manual/ghub/Storing-a-Token.html
  (use-package forge
    :hook (forge-issue-mode . visual-line-mode)
    :custom
    (forge-owned-accounts '(("krisbalintona" . nil)))
    :config
    ;; I don't know why the hook definition enables flyspell-mode...
    (remove-hook 'forge-post-mode-hook #'turn-on-flyspell))

  ;;; Keychain-environment
  ;; Ensure SSH_AGENT_PID and SSH_AUTH_SOCK are updated before committing since
  ;; their values may change. Sources them to ~/.keychain/
  (use-package keychain-environment
    :ensure-system-package keychain)

  ;;; Epg-config
  ;; Epg-config is responsible for querying passphrases
  (use-package epg-config
    :ensure nil
    :custom
    (epg-pinentry-mode 'loopback)) ; Ask through the minibuffer instead of external Pinentry program

  ;;; Pinentry
  ;; (Discovered from angrybacon's dotemacs:
  ;; https://github.com/angrybacon/dotemacs.)  Start a pinentry service
  ;; automatically in order for Emacs to be able to prompt passphrases from the
  ;; minibuffer.  If Emacs doesn't redirect prompts regardless of the value for
  ;; `epg-pinentry-mode', add "allow-emacs-pinentry" to ~/.gnupg/gpg-agent.conf.
  (use-package pinentry
    :disabled t                   ; 2024-11-01: Not sure what this package does...
    :config
    (pinentry-start))

  ;;; Diff-mode
  (use-package diff-mode
    :ensure nil
    :hook (diff-mode . diff-delete-empty-files)
    :bind ( :map diff-mode-map
            ("L" . vc-print-root-log)
            ("v" . vc-next-action))
    :custom
    (diff-default-read-only t)
    (diff-font-lock-prettify t)
    (diff-refine 'font-lock)
    (diff-font-lock-syntax t)
    :config
    (krisb-modus-themes-setup-faces
     "diff-mode"
     (set-face-attribute 'diff-header nil
                         :height 1.2
                         :overline t
                         :width 'expanded
                         :foreground (modus-themes-with-colors fg-alt)
                         :extend t)
     (set-face-attribute 'diff-hunk-header nil
                         :height 1.1
                         :slant 'italic
                         :foreground 'unspecified
                         :background (modus-themes-with-colors bg-dim))))

  ;;; Ediff
  (use-package ediff
    :ensure nil
    :custom
    (ediff-window-setup-function 'ediff-setup-windows-plain) ; Keep everything in the same frame
    (ediff-split-window-function #'split-window-horizontally)
    (ediff-highlight-all-diffs nil))      ; Only highlight currently selected diff

  ;;; Vc-jj
  ;; Best jj integration with vc currently (2025-03-13).
  (use-package vc-jj
    :config
    ;; Project integration with JJ
    (require 'project-jj))

  ;;; Git-share
  ;; Share a web URL to the commit responsible for the change at point or the
  ;; remote version of the file at point.
  (use-package git-share
    :vc (:url "https://github.com/mgmarlow/git-share")
    :custom
    (git-share-open-links-in-browser nil))

  ;;; Provide
  (provide 'krisb-vc)
#+end_src

*** =krisb-shell.el=
:PROPERTIES:
:CUSTOM_ID: krisb-shellel
:END:

**** General
:PROPERTIES:
:CUSTOM_ID: general
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-shell.el"
  ;;; Shell
  ;; Built-in shell
  (use-package shell
    :ensure nil
    :custom
    (shell-command-prompt-show-cwd t)     ; Emacs 27.1
    (shell-input-autoexpand 'input)
    (shell-highlight-undef-enable t)                   ; Emacs 29.1
    (shell-has-auto-cd nil)                            ; Emacs 29.1
    (shell-get-old-input-include-continuation-lines t) ; Emacs 30.1
    (shell-kill-buffer-on-exit t))                     ; Emacs 29.1

  ;;; Comint
  (use-package comint
    :ensure nil
    :custom
    (comint-prompt-read-only t)
    (comint-buffer-maximum-size 9999)
    (comint-completion-autolist t)
    (comint-scroll-to-bottom-on-input 'this)
    (comint-scroll-to-bottom-on-output 'this)
    (comint-input-autoexpand 'input)
    (ansi-color-for-comint-mode t))

  ;;; Compile
  (use-package compile
    :ensure nil
    :bind ("<f5>" . recompile)
    :custom
    (compilation-scroll-output 'first-error) ; Scroll with compile buffer
    (compilation-auto-jump-to-first-error 'if-location-known))

  ;;; Fancy-compilation
  ;; Make compilation outputs in compilation buffers more pleasant to see.
  (use-package fancy-compilation
    :custom
    ;; The TERM environment variable to use (set to an empty string to leave
    ;; unset).  Set to \"ansi-term\" for the default of ansi-term
    (fancy-compilation-term "eterm-color")
    (fancy-compilation-override-colors nil)
    (fancy-compilation-quiet-prelude t)
    (fancy-compilation-quiet-prolog nil)
    :config
    (fancy-compilation-mode 1))

  ;;; Pcmpl-args
  ;; Extend the build in `pcomplete'.  Includes flag and argument completion in
  ;; the shell.
  (use-package pcmpl-args
    :after pcomplete)
#+end_src

**** Eshell
:PROPERTIES:
:CUSTOM_ID: eshell
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-shell.el"
  ;;; Eshell
  ;;;; Itself
  (use-package eshell
    :ensure nil
    :hook ((eshell-mode . visual-line-mode)
           (eshell-mode . krisb-eshell-setup))
    :bind ( :map krisb-open-keymap
            ("e" . eshell))
    :custom
    (eshell-banner-message "")
    (eshell-kill-processes-on-exit t)
    (eshell-scroll-to-bottom-on-input 'this)
    (eshell-scroll-to-bottom-on-output 'this)
    (eshell-glob-case-insensitive nil)
    (password-cache t)                    ; Cache password for tramp
    (password-cache-expiry 600)           ; Seconds passwords are cached
    :config
    ;; Set up `completion-at-point-functions'
    (defun krisb-eshell-setup ()
      "Buffer-local settings for eshell."
      (set-display-table-slot standard-display-table 0 ?\ )
      (setq-local scroll-margin 3
                  line-spacing 0
                  ;; TODO 2025-03-27: The `outline-regexp' and
                  ;; `imenu-generic-expression' settings don't work anymore.  Not
                  ;; sure why.
                  ;; `consult-outline' support for eshell prompts. See
                  ;; https://github.com/minad/consult/wiki#consult-outline-support-for-eshell-prompts
                  outline-regexp eshell-prompt-regexp
                  ;; Imenu with eshell prompt history
                  imenu-generic-expression `((nil ,eshell-prompt-regexp 0)))
      (when (featurep 'cape)
        (add-hook 'completion-at-point-functions #'cape-file nil t)))

    ;; Eshell source in `consult-buffer'
    (with-eval-after-load 'consult
      ;; For showing eshell sources in `consult-buffer'. Taken from
      ;; https://github.com/minad/consult#multiple-sources
      (defvar kb/consult-buffer--eshell-source
        (list :name     "Eshell Buffers"
              :category 'buffer
              :narrow   ?e
              :face     'consult-buffer
              :history  'buffer-name-history
              :annotate '(lambda (cand)
                           (substring-no-properties
                            (car (ring-elements
                                  (buffer-local-value 'eshell-history-ring (get-buffer cand))))))
              :state    'consult--buffer-state
              :action   'display-buffer
              :items (lambda ()
                       (mapcar #'buffer-name
                               (seq-filter
                                (lambda (x)
                                  (eq (buffer-local-value 'major-mode x) 'eshell-mode))
                                (buffer-list))))))
      (add-to-list 'consult-buffer-sources #'kb/consult-buffer--eshell-source 'append)))

  ;;;; Esh-mode
  (use-package esh-mode
    :ensure nil
    :bind ( :map eshell-mode-map
            ([remap eshell-previous-matching-input] . consult-history)))

  ;;;; Em-hist
  (use-package em-hist
    :ensure nil
    :custom
    (eshell-history-size 20000)
    (eshell-hist-ignoredups 'erase)       ; Only keep last duplicate
    (eshell-save-history-on-exit t)
    ;; Fix eshell overwriting history. From
    ;; https://emacs.stackexchange.com/a/18569/15023.
    (eshell-save-history-on-exit nil))

  ;;;; Eshell-atuin
  ;; Use Atuin (https://github.com/atuinsh/atuin) with eshell
  (use-package eshell-atuin
    :after eshell
    :demand t
    :hook (eshell-mode . krisb-eshell-atuin-setup-eshell-capf)
    :bind* ( :map eshell-mode-map
             ([remap eshell-isearch-backward-regexp] . eshell-atuin-history))
    :custom
    (eshell-atuin-save-duration t)
    (eshell-atuin-filter-mode 'global)
    (eshell-atuin-search-options '("--exit" "0"))
    (eshell-atuin-search-fields '(time command duration directory))
    (eshell-atuin-history-format "%-110c (in %i)")
    :config
    (eshell-atuin-mode 1)

    (defun krisb-eshell-atuin-setup-eshell-capf ()
      "Add `krisb-eshell-atium-capf' to the beginning of `completion-at-point-functions'."
      (add-hook 'completion-at-point-functions #'krisb-eshell-atium-capf -50 t))

    ;; Bespoke capf.  Especially useful with `completion-preview-mode'
    (defun krisb-eshell-atuin--relative-time (time-string)
      "Turn TIME-STRING into a relative time string.
  TIME-STRING is a string that represents a time; it is in the format
  returned by \"atuin history list\" CLI command.  For example:
  \"2025-03-27 07:17:40\".

  An example of a return value for this function is: \"9 minutes ago\"."
      ;; HACK 2025-03-27: We use `ignore-errors' to catch any malformed data
      ;; stored by upstream (which happened at least once for me...)
      (when-let* ((then-time (ignore-errors (date-to-time time-string)))
                  (now-time (current-time))
                  (diff-time (float-time (time-subtract then-time now-time)))
                  (abs-diff (abs diff-time)))
        (cond ((< abs-diff 60)
               (format "%.0f seconds %s" abs-diff (if (< diff-time 0) "ago" "from now")))
              ((< abs-diff 3600)
               (format "%.0f minutes %s" (/ abs-diff 60) (if (< diff-time 0) "ago" "from now")))
              ((< abs-diff 86400)
               (format "%.0f hours %s" (/ abs-diff 3600) (if (< diff-time 0) "ago" "from now")))
              ((< abs-diff (* 30 86400))
               (format "%.0f days %s" (/ abs-diff 86400) (if (< diff-time 0) "ago" "from now")))
              (t (format "%.0f months %s" (/ abs-diff (* 30 86400)) (if (< diff-time 0) "ago" "from now"))))))

    (defun krisb-eshell-atium-capf ()
      "Capf or `eshell-atuin' command history.
  Meant for `completion-at-point-functions' in eshell buffers."
      (interactive)
      (when (bound-and-true-p eshell-atuin-mode)
        ;; Update cache first
        (eshell-atuin--history-rotate-cache)
        (eshell-atuin--history-update)
        (let* ((start (save-excursion (eshell-next-prompt 0) (point)))
               (end (save-excursion (goto-char (point-max))))
               (candidates
                (mapcar (lambda (e)
                          (let* ((command (alist-get 'command e))
                                 (directory (alist-get 'directory e))
                                 (time (alist-get 'time e))
                                 ;; 2025-03-27: I manually parse the time string
                                 ;; into relativetime string.  Upstream does not
                                 ;; do it for us.
                                 (relativetime (krisb-eshell-atuin--relative-time time)))
                            (put-text-property 0 (length command) 'relativetime relativetime command)
                            command))
                        eshell-atuin--history-cache)))
          (list start end candidates
                :exclulsive 'no                   ; Go to other capfs afterward
                :display-sort-function #'identity ; Keep in chronological order
                :annotation-function (lambda (s) (get-text-property 0 'relativetime s))))))) ; Add relative time annotation

  ;;;; Eshell-syntax-highlighting
  ;; Zsh-esque syntax highlighting in eshell
  (use-package eshell-syntax-highlighting
    :after eshell
    :config
    (eshell-syntax-highlighting-global-mode 1))

  ;;;; Eshell-z
  ;; Use z in Eshell
  (use-package eshell-z
    :after eshell
    :demand
    :custom
    (eshell-z-freq-dir-hash-table-file-name (getenv "Z_DATA"))
    (eshell-z-exclude-dirs nil)
    :init
    (exec-path-from-shell-copy-env "Z_DATA"))
#+end_src

**** Fish
:PROPERTIES:
:CUSTOM_ID: fish
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-shell.el"
  ;;; Fish-mode
  (use-package fish-mode
    :mode "\\.fish\\'")
#+end_src

**** EAT
:PROPERTIES:
:CUSTOM_ID: eat
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-shell.el"
  ;;; EAT
  (use-package eat
    ;; 2024-12-29: See https://codeberg.org/akib/emacs-eat/pulls/133 for why we
    ;; use this fork of eat.
    :vc ( :url "https://codeberg.org/vifon/emacs-eat.git"
          :branch "fish-integration"
          :rev :newest)
    :hook ((eshell-load . eat-eshell-mode)
           (eshell-load . eat-eshell-visual-command-mode))
    :bind ( :map krisb-open-keymap
            ("s" . eat)
            :map project-prefix-map
            ("s" . eat-project))
    :config
    ;; 2025-04-05: This resolves the continuation lines issue in EAT terminal
    ;; (including eat-shell in `eat-eshell-visual-command-mode').  The
    ;; continuation line issue results in, I think, the default font being too
    ;; wide, causing the width of the characters to exceed the width of the
    ;; window, resulting in ugly continuation lines that ruin the wrapping of the
    ;; output.
    (set-face-attribute 'eat-term-font-0 nil
                        :family (if (bound-and-true-p fontaine-current-preset)
                                        (fontaine--get-preset-property fontaine-current-preset :default-family)
                                  "Iosevka Term SS04")))
#+end_src

**** Provide
:PROPERTIES:
:CUSTOM_ID: provide-8
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-shell.el"

  ;;; Provide
  (provide 'krisb-shell)
#+end_src

*** =krisb-projects.el=
:PROPERTIES:
:CUSTOM_ID: krisb-projectsel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-projects.el"
  ;;; Project.el
  (use-package project
    :bind ( :map project-prefix-map
            ("e" . project-eshell))
    :custom
    (project-vc-extra-root-markers '("Makefile"))
    (project-vc-merge-submodules nil)

    (project-file-history-behavior 'relativize)

    (project-mode-line t)
    (project-mode-line-face nil)

    ;; The commands in `project-switch-commands' must be found in
    ;; `project-prefix-map'
    (project-switch-commands
     '((project-find-file "Find file")
       (project-find-regexp "Find regexp")
       (project-find-dir "Find directory")
       (project-vc-dir "VC-Dir")
       (project-eshell "Eshell")
       (eat-project "EAT")
       (project-any-command "Other")))
    :config
    ;; On startup, remove non-existent directories from remembered projects list
    (project-forget-zombie-projects))

  ;;; Goto definition
  ;;;; Xref
  (use-package xref
    :bind ("C-M-?". xref-find-references-and-replace) ; Emacs 29.1
    :custom
    (xref-show-definitions-function #'xref-show-definitions-completing-read)
    (xref-show-xrefs-function #'xref-show-definitions-buffer)
    (xref-file-name-display 'project-relative)
    (xref-search-program 'ripgrep)
    (xref-history-storage 'xref-window-local-history) ; Per-window history of `xref-go-*'
    :config
    ;; We remove the fallback backend, `etags--xref-backend', which prompts the
    ;; user for an etags table -- this is undesirable for me.
    (setq-default xref-backend-functions nil)
    ;; Then add `elisp--xref-backend' as the global value of
    ;; `xref-backend-functions', which means it is run when the local value ends
    ;; with `t'. See (info "(elisp) Running Hooks") for an explanation.
    (add-hook 'xref-backend-functions #'elisp--xref-backend)

    ;; Revealing headings
    (with-eval-after-load 'krisb-reveal
      (defun krisb-reveal-xref-find-information ()
        "Return information required by `krisb-reveal-fold-commands'.
  See the docstring of `krisb-reveal-fold-commands'."
        (save-window-excursion
          (save-excursion
            (xref-goto-xref)
            (cons (point) (current-buffer)))))
      ;; I could also advise the following commands to call
      ;; `xref-show-location-at-point' afterwards.  Though such a solution is
      ;; applicable only to xref.  I wanted similar functionality for non-xref
      ;; buffers, so I wrote krisb-reveal, and to remain idiomatic with my usage
      ;; of it, I also do it here.
      (dolist (command '(xref-prev-line
                         xref-next-line
                         xref-quit-and-goto-xref))
        (add-to-list 'krisb-reveal-fold-commands
                     (list :command command
                           :location #'krisb-reveal-xref-find-information)))
      (add-hook 'xref-after-jump-hook #'krisb-reveal-fold)))

  ;;;; Consult-xref-stack
  (use-package consult-xref-stack
    :vc ( :url "https://github.com/brett-lempereur/consult-xref-stack"
          :rev :newest)
    :bind (([remap xref-go-back] . krisb-consult-xref-stack-backward)
           ([remap xref-go-forward] . krisb-consult-xref-stack-forward))
    :config
    (defun krisb-consult-xref-stack-backward (arg)
      "Call `xref-go-back' or `consult-xref-stack-backward' when called with ARG."
      (interactive "p")
      (call-interactively
       (if (< 1 arg) 'consult-xref-stack-backward 'xref-go-back)))

    (defun krisb-consult-xref-stack-forward (arg)
      "Call `xref-go-forward' or `consult-xref-stack-forward' when called with ARG."
      (interactive "p")
      (call-interactively
       (if (< 1 arg) 'consult-xref-stack-forward 'xref-go-forward))))

  ;;;; Dumber-jump
  ;; A lean fork of dumb-jump.  For a list of supported languages, see
  ;; https://github.com/zenspider/dumber-jump?tab=readme-ov-file#supported-languages.
  (use-package dumber-jump
    :ensure-system-package (rg . ripgrep)
    :custom
    (dumber-jump-default-project user-emacs-directory)
    :init
    ;; Add to global value so it is used as a fallback (when local value ends in
    ;; t)
    (with-eval-after-load 'xref
      (add-hook 'xref-backend-functions #'dumber-jump-xref-activate 100))
    :config
    (setopt dumber-jump-project-denoters
            (cl-remove-duplicates
             (append dumber-jump-project-denoters project-vc-extra-root-markers))))

  ;;; Hl-todo
  ;; Highlight todos
  (use-package hl-todo
    :custom
    (hl-todo-include-modes
     '(prog-mode text-mode conf-mode))
    (hl-todo-text-modes '(text-mode))
    (hl-todo-exclude-modes nil)
    :config
    (global-hl-todo-mode 1)

    ;; Bespoke regexp-creating command.  In
    ;; https://github.com/tarsius/hl-todo/issues/42, the package author explained
    ;; their reasoning as to why regexps are not limited only to comments: todos
    ;; in docstrings are useful and backwards compatibility.  This is different
    ;; from my use-case though, so I manually enable highlighting only in comments
    (el-patch-defun hl-todo--setup-regexp ()
      "Setup keyword regular expression.
  See the function `hl-todo--regexp'."
      (when-let ((bomb (assoc "???" hl-todo-keyword-faces)))
        ;; If the user customized this variable before we started to treat the
        ;; strings as regexps, then the string "???" might still be present.  We
        ;; have to remove it because it results in the regexp search taking
        ;; forever.
        (setq hl-todo-keyword-faces (delete bomb hl-todo-keyword-faces)))
      (setq hl-todo--regexp
            (concat (el-patch-add (bound-and-true-p comment-start-skip))
                    "\\(\\<"
                    "\\(" (mapconcat #'car hl-todo-keyword-faces "\\|") "\\)"
                    "\\>"
                    (and (not (equal hl-todo-highlight-punctuation ""))
                         (concat "[" hl-todo-highlight-punctuation "]"
                                 (if hl-todo-require-punctuation "+" "*")))
                    "\\)"))))

  ;;; Provide
  (provide 'krisb-projects)
#+end_src

*** =krisb-info.el=
:PROPERTIES:
:CUSTOM_ID: krisb-infoel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-info.el"
  ;;;; Info
  (use-package info
    :hook ((Info-selection . mixed-pitch-mode)
           (Info-selection . krisb-info-font-resize))
    :custom
    (Info-isearch-search nil)             ; Restore default isearch behavior
    :config
    (defun krisb-info-font-resize ()
      "Increase the font size of text in Info buffers."
      (face-remap-set-base 'default `(:height 1.2))))

  ;;;; Info-colors
  ;; Fontify useful parts of info buffers
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))

  ;;; Provide
  (provide 'krisb-info)
#+end_src

*** =krisb-elisp.el=
:PROPERTIES:
:CUSTOM_ID: krisb-elispel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-elisp.el"
  ;;; Font locking
  ;;;; Highlight-function-calls
  (use-package highlight-function-calls
    :hook ((emacs-lisp-mode lisp-interaction-mode) . highlight-function-calls-mode)
    :custom
    (highlight-function-calls-not nil)
    (highlight-function-calls-macro-calls nil)
    (highlight-function-calls-special-forms nil)
    :custom-face
    (highlight-function-calls-face ((t (:underline nil :inherit font-lock-function-call-face)))))

  ;;;; Paren-face
  ;; Creates a face just for parentheses. Useful for lispy languages where readers
  ;; want the parentheses as unnoticeable as possible.
  (use-package paren-face
    :custom
    (paren-face-mode-lighter "")
    :config
    (global-paren-face-mode 1))

  ;;;; Highlight-parentheses
  (use-package highlight-parentheses
    :hook ((emacs-lisp . highlight-parentheses-mode)
           (minibuffer-setup . highlight-parentheses-minibuffer-setup))
    :custom
    ;; TODO 2025-04-08: Configure `highlight-parentheses-colors'
    (highlight-parentheses-highlight-adjacent t))

  ;;; Documentation
  ;;;; Help
  (use-package help
    :ensure nil
    :bind ("C-h C-k" . describe-keymap)
    :custom
    (help-window-select t)
    (help-window-keep-selected t)

    (help-enable-variable-value-editing t)
    (help-clean-buttons t)
    (help-enable-symbol-autoload t)

    (describe-bindings-outline t)
    (describe-bindings-show-prefix-commands t)

    (help-at-pt-display-when-idle t)
    :config
    (require 'shortdoc)
    (add-hook 'help-fns-describe-function-functions #'shortdoc-help-fns-examples-function))

  ;;;; Apropos
  (use-package apropos
    :ensure nil
    :bind ("C-h u" . apropos-user-option))

  ;;;; Elisp-demos
  ;; Add example code snippets to some of the help windows
  (use-package elisp-demos
    :config
    (add-hook 'help-fns-describe-function-functions #'elisp-demos-advice-describe-function-1)

    (with-eval-after-load 'helpful
      (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)))

  ;;; Debugging
  ;;;; Eros-mode
  ;; Overlay lisp evaluations into the current buffer (near cursor)
  (use-package eros
    :hook (emacs-lisp-mode . eros-mode)
    :custom
    (eros-eval-result-prefix "⟹  "))

  ;;;; Inspector
  ;; Introspect list expressions.  This is similar in role to CEDET's
  ;; data-debug.el.  Also integrates with the debugging backtrace and edebug (see
  ;; https://github.com/mmontone/emacs-inspector?tab=readme-ov-file#from-the-emacs-debugger).
  (use-package inspector)

  ;;;; IELM
  (use-package ielm
    :ensure nil
    :custom
    (ielm-noisy nil)
    (ielm-dynamic-return nil))

  ;;;; Edebug
  (use-package edebug
    :ensure nil
    :custom
    (edebug-initial-mode 'step)
    :config
    ;; Better indication for evaluated sexps in during edebugging. Taken from
    ;; https://xenodium.com/inline-previous-result-and-why-you-should-edebug/.

    (with-eval-after-load 'eros
      (defun krisb-edebug-previous-result--around (_ &rest r)
        "Adviced `edebug-previous-result'."
        (require 'eros)
        (eros--make-result-overlay edebug-previous-result
          :where (point)
          :duration eros-eval-result-duration))
      (advice-add #'edebug-previous-result :around #'krisb-edebug-previous-result--around))

    (defun krisb-edebug-compute-previous-result (previous-value)
      (if edebug-unwrap-results
          (setq previous-value
                (edebug-unwrap* previous-value)))
      (setq edebug-previous-result
            (concat "Result: "
                    (edebug-safe-prin1-to-string previous-value)
                    (eval-expression-print-format previous-value))))

    (defun edebug-previous-result ()
      "Print the previous result."
      (interactive)
      (message "%s" edebug-previous-result))

    (defun adviced:edebug-compute-previous-result (_ &rest r)
      "Adviced `krisb-edebug-compute-previous-result'."
      (let ((previous-value (nth 0 r)))
        (if edebug-unwrap-results
            (setq previous-value
                  (edebug-unwrap* previous-value)))
        (setq edebug-previous-result
              (edebug-safe-prin1-to-string previous-value))))
    (advice-add #'krisb-edebug-compute-previous-result :around #'adviced:edebug-compute-previous-result))

  ;;;; Lazy-guard
  ;; Help validate Emacs configuration.  See https://codeberg.org/vifon/lazy-guard
  ;; for more information, including how to automate this with git commit hooks.
  ;; NOTE 2025-03-13: Using the git hook method results in false positives from
  ;; faulty autoloading; I think it's related to use-package, I think.  So I don't
  ;; use that method for now.
  (use-package lazy-guard
    :vc ( :url "https://codeberg.org/vifon/lazy-guard.git")
    :custom
    (lazy-guard-autoloads-strict nil)
    (lazy-guard-autoloads-known-broken nil))

  ;;; Packages
  ;;;; Try
  ;; Install a package only for the current Emacs session.
  (use-package try
    :config
    ;; Add `try' to embark keymap for packages
    (with-eval-after-load 'embark
      (keymap-set embark-package-map "t" #'try)))

  ;;;; Scratch.el
  ;; Easily create scratch buffers for different modes
  (use-package scratch
    :hook (scratch-create-buffer . krisb-scratch-buffer-setup)
    :bind ( :map krisb-open-keymap
            ("S". scratch))
    :config
    (defun krisb-scratch-buffer-setup ()
      "Add contents to `scratch' buffer and name it accordingly.
   Taken from
   https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/"
      (let* ((mode (format "%s" major-mode))
             (string (concat "Scratch buffer for: " mode "\n\n")))
        (when scratch-buffer
          (save-excursion
            (insert string)
            (goto-char (point-min))
            (comment-region (point-at-bol) (point-at-eol)))
          (forward-line 2))
        (rename-buffer (concat "*Scratch for " mode "*") t))))

  ;;; Other
  ;;;; Suggest
  ;; Query `suggest' for elisp coding suggestions!
  (use-package suggest
    :bind ( :map krisb-open-keymap
            ("C-s" . suggest))
    :custom
    (suggest-insert-example-on-start nil))
#+end_src

**** Package authorship
:PROPERTIES:
:CUSTOM_ID: package-authorship
:END:

There are several packages that end up incredibly useful for authoring packages. In addition to the packages below, we can use the scripts provided by [[https://github.com/riscy/melpazoid][riscy/melpazoid]] for packages specifically for the MELPA package archive.

#+begin_src emacs-lisp :tangle "modules/krisb-elisp.el"
  ;;;; Package authorship
  ;;;;; Package-lint-flymake
  (use-package package-lint-flymake
    :hook (emacs-lisp-mode . package-lint-flymake-setup))

  ;;;;; Org-make-toc
  (use-package org-make-toc
    :custom
    (org-make-toc-insert-custom-ids t))

  ;;;;; Package-build
  ;; For help with creating package recipes for, e.g., MELPA.  See
  ;; https://github.com/melpa/melpa/blob/master/CONTRIBUTING.org#preparing-a-pull-request-to-melpa
  ;; for how package-build is used to create MELPA PRs.
  (use-package package-build
    :custom
    (package-build-recipes-dir (expand-file-name "recipes/" krisb-melpa-directory))
    (package-build-archive-dir  (expand-file-name "packages/" krisb-melpa-directory))
    (package-build-working-dir (expand-file-name "working/" krisb-melpa-directory)))

  ;;;;; Lice
  ;; Insert license headers for emacs-lisp files.
  (use-package lice)

  ;;;;; Mode-minder
  ;; Visually represent the hierarchy of major mode inheritance via
  ;; tabulated-list-mode.  NOTE: Calling `mode-minder' loads all packages with a
  ;; known major mode.
  (use-package mode-minder
    :vc ( :url "https://github.com/jdtsmith/mode-minder.git"
          :rev :newest))

  ;;; Provide
  (provide 'krisb-elisp)
#+end_src

*** =krisb-folding.el=
:PROPERTIES:
:CUSTOM_ID: krisb-foldingel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-folding.el"
  ;;; Outline
  (use-package outline
    :ensure nil
    :diminish outline-minor-mode
    :custom
    (outline-minor-mode-cycle t)
    (outline-minor-mode-cycle-filter nil)
    (outline-minor-mode-highlight 'append)
    (outline-blank-line t))

  ;;; Outshine
  ;; Outline-minor-mode but with better keybindings and more support.
  (use-package outshine
    :disabled t ; 2025-04-02: Well-functioning but heavy and sometimes opinionated.  Prefer outli
    :diminish outshine-mode
    :hook ((LaTeX-mode prog-mode conf-mode) . outshine-mode)
    :bind ( :map outshine-mode-map
            ("C-x n s". outshine-narrow-to-subtree)
            :map diff-mode-map
            ("S-<iso-lefttab>" . outshine-cycle-buffer)
            ("<tab>" . outshine-cycle)
            ("C-x n s" . outshine-narrow-to-subtree))
    :custom
    (outshine-use-speed-commands t))

  ;;; Outline-indent
  (use-package outline-indent
    :disabled t                    ; 2025-04-02: Prefer the more lightweight outli
    :hook (prog-mode . outline-indent-minor-mode)
    :bind ( :map krisb-toggle-keymap
            ("o" . krisb-outline-indent-dispatch))
    :config
    (require 'transient)
    (transient-define-prefix krisb-outline-indent-dispatch ()
      "Invoke a transient menu for `tmr'."
      [["At point"
        ("o" "Open" outline-indent-open-fold)
        ("C" "Open recursively" outline-indent-open-fold-rec)
        ("T" "Close" outline-indent-close-fold)]
       ["At point toggle"
        ("t" "Toggle" outline-indent-toggle-fold)
        ("l" "Toggle level at point" outline-indent-toggle-level-at-point)]]
      ["All folds"
       [("O" "Open" outline-indent-open-folds)
        ("C" "Close" outline-indent-close-folds)]]))

  ;;; Outli
  ;; Coding language-agnostic file outlines.  Lightweight and close to the
  ;; built-in outline.el.
  (use-package outli
    :vc ( :url "https://github.com/jdtsmith/outli"
          :rev :newest)
    :hook ((prog-mode text-mode) . outli-mode)
    :bind ( :map outline-minor-mode-map
            ;; 2025-04-02: Assumes `outline-minor-mode-prefix' is "C-c @"
            ("C-c @ C-<return>" . outli-insert-heading-respect-content)
            ("C-c @ ?" . outli-speed-command-help)
            ("C-c @ s" . outli-toggle-narrow-to-subtree))
    :custom
    (outli-allow-indented-headlines t)
    (outli-default-nobar nil)             ; No horizontal rule?
    (outli-blend nil)
    :config
    ;; Add "Heading" (which outli headings are categorized as) imenu group.  Taken
    ;; from https://github.com/jdtsmith/outli?tab=readme-ov-file#faq
    (with-eval-after-load 'consult-imenu
      (push '(?h "Headings")
            (plist-get (cdr (assoc 'emacs-lisp-mode consult-imenu-config)) :types))))

  ;;; Provide
  (provide 'krisb-folding)
#+end_src

*** =krisb-other-languages.el=
:PROPERTIES:
:CUSTOM_ID: krisb-other-languagesel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-other-languages.el"
  ;;; LaTeX
  ;;;; Auctex
  (use-package auctex
    :config
    ;; Add lualatex to commands list
    (with-eval-after-load 'tex
      (add-to-list 'TeX-command-list
                   '("LuaLaTeX" "lualatex --interaction=nonstopmode %t"
                     TeX-run-TeX nil LaTeX-mode :help "Run LuaLaTeX"))))

  ;;;; Auctex-cont-latexmk
  ;; Automatically compile a latex file on-save with the latexmk program.  This is
  ;; a more maintained version of auctex-latexmk
  ;; (https://github.com/tom-tan/auctex-latexmk/).
  (use-package auctex-cont-latexmk
    :ensure-system-package (latexmk . texlive-binextra)
    :after latex
    :bind ( :map LaTeX-mode-map
            ("C-c t k" . auctex-cont-latexmk-toggle)))

  ;;; Hyprlang-ts-mode
  ;; Treesitter mode for hyprland config files
  (use-package hyprlang-ts-mode
    :init
    ;; 2025-03-31: You can install this grammar with:
    ;;     M-x treesit-install-language-grammar RET hyprlang
    (with-eval-after-load 'treesit
      (add-to-list 'treesit-language-source-alist
                   '(hyprlang "https://github.com/tree-sitter-grammars/tree-sitter-hyprlang"))
      (unless (treesit-grammar-location 'hyprlang)
        (treesit-install-language-grammar 'hyprlang))))

  ;;; Provide
  (provide 'krisb-other-languages)
#+end_src

*** =krisb-lsp.el=
:PROPERTIES:
:CUSTOM_ID: krisb-lspel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-lsp.el"
  ;;; Eglot
  (use-package eglot
    :custom
    (eglot-code-action-indications '(eldoc-hint margin))
    (eglot-code-action-indicator "  α ")
    (eglot-sync-connect t)                ; Use `eglot-connect-timeout' seconds
    (eglot-connect-timeout 30)
    (eglot-autoreconnect 10)
    (eglot-events-buffer-config
     (list :size 2000000
           ;; :size 0           ; To boost performance, set size to 0 to stop logging
           :format 'full))
    (eglot-extend-to-xref t))

  ;;;; Eglot-booster
  ;; Boosts Eglot's communication with the server. There's also a version for LSP.
  (use-package eglot-booster
    ;; NOTE 2024-01-10: Must install the `emacs-lsp-booster' binary from
    ;; https://github.com/blahgeek/emacs-lsp-booster/releases
    :vc (:url "https://github.com/jdtsmith/eglot-booster.git"
              :rev :newest)
    :after eglot
    :config
    (eglot-booster-mode 1))

  ;;;; Eglot-signature-eldoc-talkative
  ;; Show documentation of symbols alongside their signature. (By default, only
  ;; the signature is only shown via `eglot-signature-eldoc-function'.)
  (use-package eglot-signature-eldoc-talkative
    :demand t
    :after eglot
    :config
    (advice-add #'eglot-signature-eldoc-function :override #'eglot-signature-eldoc-talkative))

  ;;; Lsp-bridge
  ;; Asynchronous alternative LSP integration.  The asynchronism is at a cost: its
  ;; UI is bespoke.  To use, make sure to follow the install instructions in the
  ;; package README.

  ;; To install the required python packages system-wide try something like:
  ;;     paru -S python-epc python-orjson python-sexpdata python-six \
  ;;     python-setuptools python-paramiko python-rapidfuzz python-watchdog \
  ;;     python-packaging
  (use-package lsp-bridge
    :vc (:url "https://github.com/manateelazycat/lsp-bridge.git")
    :init
    (package-install 'yasnippet)
    (package-install 'markdown-mode))

  ;;; Provide
  (provide 'krisb-lsp)
#+end_src

*** =krisb-debugging.el=
:PROPERTIES:
:CUSTOM_ID: krisb-debuggingel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-debugging.el"
  ;;; Gud
  (use-package gud
    :ensure nil
    :custom
    (gud-highlight-current-line t))

  ;;; Realgud
  (use-package realgud
    :hook (realgud-srcbuf-mode . tool-bar-mode)
    :custom
    (realgud-window-split-orientation 'horizontal)
    (realgud-short-key-on-tracing? t))

  ;;; Gdb-mi
  ;; A graphical interface to gdb.
  (use-package gdb-mi
    :ensure nil
    :custom
    (gdb-many-windows t)
    (gdb-show-main t)
    (gud-gdb-command-name "gdb -i=mi --quiet")
    (gdb-restore-window-configuration-after-quit 'if-gdb-many-windows)
    :config
    (defun krisb-gdb-non-stop-handler ()
      "Version of the original that avoids the GDB startup error regarding \"target-async\"."
      (goto-char (point-min))
      (if (re-search-forward "No symbol" nil t)
          (progn
            (message
             "This version of GDB doesn't support non-stop mode.  Turning it off.")
            (setq gdb-non-stop nil)
            (setq gdb-supports-non-stop nil))
        (setq gdb-supports-non-stop t)
        ;; (gdb-input "-gdb-set target-async 1" 'ignore)
        (gdb-input "-gdb-set mi-async 1" 'ignore) ; Change to this, as advised
        (gdb-input "-list-target-features" 'gdb-check-target-async)))
    (advice-add 'gdb-non-stop-handler :override #'krisb-gdb-non-stop-handler))

  ;;; Provide
  (provide 'krisb-debugging)
#+end_src

** Other
:PROPERTIES:
:CUSTOM_ID: other-1
:END:

*** =krisb-web.el=
:PROPERTIES:
:CUSTOM_ID: krisb-webel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-web.el"
  ;;; Shr
  ;; Emacs' built-in web renderer
  (use-package shr
    :ensure nil
    :custom
    (shr-fill-text nil)                ; Prefer to use `visual-line-mode' instead
    (shr-use-fonts t)
    ;; (shr-use-colors nil)                  ; t is bad for accessibility
    (shr-width nil)
    (shr-discard-aria-hidden t)
    (shr-max-image-proportion 0.6)        ; How big are images?
    (shr-image-animate t)
    ;; (shr-cookie-policy nil)
    )

  ;;; Eww
  ;; Emacs' web browser
  (use-package eww
    :ensure nil
    :hook (eww-after-render . visual-line-mode)
    :custom
    (eww-restore-desktop t)
    (eww-desktop-remove-duplicates t)     ; Don't duplicate pages in history
    (eww-search-prefix "https://duckduckgo.com/html/?q=") ; Use duckduckgo search engine
    (eww-download-directory (no-littering-expand-var-file-name "eww/downloads/")) ; Where to put downloads
    (eww-history-limit 150)
    (eww-readable-adds-to-history nil)
    (eww-browse-url-new-window-is-tab nil)
    (eww-form-checkbox-selected-symbol "[X]")
    (eww-form-checkbox-symbol "[ ]")
    (eww-auto-rename-buffer 'title))

  ;;; Engine-mode
  ;; Send arbitrary search engine queries to your browser from within Emacs
  (use-package engine-mode
    :custom
    (engine/browser-function 'browse-url-default-browser)
    :config
    (engine-mode 1)

    ;; My searches
    (defengine amazon
      "https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

    (defengine duckduckgo
      "https://duckduckgo.com/?q=%s"
      :keybinding "d")

    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "g")

    (defengine google
      "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "G")

    (defengine wikipedia
      "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w")

    (defengine youtube
      "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
      :keybinding "y"))

  ;;; Wallabag
  (use-package wallabag
    :disabled t                           ; 2025-04-06: Prefer wombag.el
    :hook (wallabag-entry-mode . olivetti-mode)
    :bind ( :map krisb-open-keymap
            ("w" . wallabag)
            :map wallabag-search-mode-map
            ("n" . next-line)
            ("p" . previous-line)
            ("M-n" . wallabag-search-next-page)
            ("M-p" . wallabag-search-previous-page)
            :map wallabag-sidebar-mode-map
            ("RET" . wallabag-sidebar-find-tag)
            :map wallabag-entry-mode-map
            ("SPC" . scroll-up-command)
            ("DEL" . scroll-down-command))
    :custom
    (wallabag-host "https://app.wallabag.it")
    (wallabag-username "krisbalintona")
    (wallabag-password (auth-source-pick-first-password :host "app.wallabag.it"))
    (wallabag-clientid "23882_1jzdzdd09ikgw4k8o0cog4wggk48cgc0gwk8oos0gsc44gcsco")
    (wallabag-secret (auth-source-pick-first-password :host "emacs-wombag.el"))
    (wallabag-db-file (no-littering-expand-var-file-name "wallabag/wallabag.sqlite"))
    (wallabag-search-page-max-rows 50))

  ;;; Wombag
  (use-package wombag
    :vc (:url "https://github.com/karthink/wombag.git"
              :rev :newest)
    :hook ((wombag-show-mode . org-remark-mode)
           (wombag-show-mode . krisb-wombag-entry-setup))
    :bind ( :map krisb-open-keymap
            ("w" . wombag))
    :custom
    (wombag-dir (no-littering-expand-var-file-name "wombag"))
    (wombag-db-file (no-littering-expand-var-file-name "wombag/wombag.sqlite"))
    (wombag-host "https://app.wallabag.it")
    (wombag-username "krisbalintona")
    (wombag-password (auth-source-pick-first-password :host "app.wallabag.it"))
    (wombag-client-id "23882_1jzdzdd09ikgw4k8o0cog4wggk48cgc0gwk8oos0gsc44gcsco")
    (wombag-client-secret (auth-source-pick-first-password :host "emacs-wombag.el"))
    (wombag-search-filter "")
    :config
    (defun krisb-wombag-entry-setup ()
      "Set up the visual for wombag-entry buffers."
      (setq-local line-spacing 0.08)
      (face-remap-add-relative 'default :height 1.1)
      (when (require 'olivetti nil t)
        (olivetti-mode 1)
        (olivetti-set-width 120))
      (when (require 'mixed-pitch nil t)
        (mixed-pitch-mode 1))
      (visual-line-mode 1)))

  ;;; Krisb-wombag-ext
  (use-package krisb-wombag-ext
    :ensure nil
    :demand t
    :after wombag
    :config
    (krisb-org-remark-wombag-mode 1))

  ;;; Provide
  (provide 'krisb-web)
#+end_src

*** =krisb-directories.el=
:PROPERTIES:
:CUSTOM_ID: krisb-directoriesel
:END:

#+begin_src emacs-lisp :tangle "modules/krisb-directories.el"
  ;;; Dired
  ;; Emacs' file manager
  (use-package dired
    :ensure nil
    :hook ((dired-mode . dired-hide-details-mode)
           (dired-mode . turn-on-gnus-dired-mode)) ; Email attachment integration with dired
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)                 ; Guess default target directory?
    (dired-hide-details-hide-symlink-targets nil) ; Don't hide symlink targets
    (dired-kill-when-opening-new-dired-buffer t)  ; Basically `dired-single'
    (dired-listing-switches "--group-directories-first --time-style=long-iso -alhgv") ; Flags `dired' passes to `ls'
    (dired-movement-style 'bounded)
    ;; Always copy/delete recursively?
    (dired-recursive-copies  'always)
    (dired-recursive-deletes 'top)
    ;; Ask whether destination dirs should get created when copying/removing files.
    (dired-create-destination-dirs 'ask)
    (dired-vc-rename-file t)
    :config
    ;; Mark files and do a sexp in their buffers. Based off
    ;; https://superuser.com/a/176629
    (defun krisb-dired-eval-form (sexp &optional prefix)
      "Run SEXP in marked dired files. If called with
  PREFIX (`universal-argument' if interactively), run a particular
  command."
      (interactive (list (if current-prefix-arg
                             (read-extended-command) ; Command
                           (read--expression "Run expression on marked files: ")) ; Sexp
                         current-prefix-arg))
      (save-window-excursion
        (mapc #'(lambda (filename)
                  (with-current-buffer (find-file-noselect filename)
                    (if prefix
                        (call-interactively (intern sexp))             ; Command
                      (funcall-interactively 'eval-expression sexp)))) ; Sexp
              (dired-get-marked-files)))))

  ;;; Dired-x
  (use-package dired-x
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :custom
    (dired-omit-verbose nil))

  ;;; Nerd-icons-dired
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))

  ;;; Dired-hist
  ;; History for dired buffers
  (use-package dired-hist
    :hook (dired-mode . dired-hist-mode)
    :bind ( :map dired-mode-map
            ("l" . dired-hist-go-back)
            ("r" . dired-hist-go-forward)))

  ;;; Cascading-dir-locals
  ;; "Provides a global minor mode that changes how Emacs handles the lookup of
  ;; applicable dir-locals files (".dir-locals.el"): instead of starting at the
  ;; directory of the visited file and moving up the directory tree only until a
  ;; first dir-locals file is found, collect and apply all (!) dir-locals files
  ;; found from the current directory up to the root one."
  (use-package cascading-dir-locals
    :config
    (cascading-dir-locals-mode 1))

  ;;; Provide
  (provide 'krisb-directories)
#+end_src

* Lisp (libraries)
:PROPERTIES:
:VISIBILITY: children
:CUSTOM_ID: lisp-libraries
:END:

** =krisb-common.el=
:PROPERTIES:
:CUSTOM_ID: krisb-commonel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-common.el"
  ;;; krisb-common.el --- Common variables, functions, macros, and more -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Variables and functions I use throughout my Emacs config.

  ;;; Code:

  ;;; Variables

  ;;;; Me
  (setq user-full-name "Kristoffer Balintona"
        user-mail-address "krisbalintona@gmail.com")

  ;;;; System
  (defconst krisb-system-win-p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst krisb-system-mac-p
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst krisb-system-linux-p
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst krisb-linux-distribution
    (when krisb-system-linux-p (shell-command-to-string "printf %s \"$(lsb_release -sd)\""))
    "An escaped string that has the name of my Linux distribution.")

  (defconst krisb-linux-ubuntu-p
    (integerp (string-match "Ubuntu" krisb-linux-distribution))
    "Is this Ubuntu?")

  (defconst krisb-linux-fedora-p
    (integerp (string-match "Fedora" krisb-linux-distribution))
    "Is this Fedora?")

  (defconst krisb-linux-arch-p
    (integerp (string-match "Arch" krisb-linux-distribution))
    "Is this Arch Linux?")

  ;;;; Org
  (defvar krisb-org-directory (expand-file-name "org-database" "~/Documents")
    "The directory holding my org files.
  Meant to be used as the value of `org-directory'.")

  (defvar krisb-notes-directory (expand-file-name "notes" krisb-org-directory)
    "My notes directory.")

  (defvar krisb-blog-directory (expand-file-name "blog" krisb-notes-directory)
    "The directory for my pre-export blog files.")

  (defvar krisb-org-archive-directory (expand-file-name "archive" krisb-org-directory)
    "The archive directory for my org files.")

  (defvar krisb-org-agenda-directory (expand-file-name "agenda" krisb-org-directory)
    "The directory holding my main org-agenda files.")

  (defvar krisb-org-agenda-main-file (expand-file-name "todo.org" krisb-org-agenda-directory)
    "My main org-agenda file.")

  (defvar krisb-bibliography-files (list (expand-file-name "master-lib.bib" krisb-org-directory))
    "A list of my bibliography (.bib) files.")

  ;;;; Other
  (defvar krisb-zotero-directory (expand-file-name "Zotero" "~")
    "The directory for everything Zotero.
  Useful for some citation-related configurations.")

  (defvar krisb-email-directory (expand-file-name "~/Documents/emails/")
    "Directory that houses my local email files.")

  (defvar krisb-emacs-repos-directory (expand-file-name "~/emacs-repos/")
    "Directory that for Emacs-related local repositories.")

  (defvar krisb-melpa-directory (expand-file-name "other/melpa" krisb-emacs-repos-directory)
    "Directory that for local MELPA repository.")

  ;;; Functions
  (defun krisb-org-agenda-directory-files ()
    "Return list of all org and org_archive files in `krisb-org-directory'."
    (directory-files-recursively krisb-org-agenda-directory
                                 (rx (or (literal ".org") (literal ".org_archive")) eol)
                                 nil
                                 (lambda (subdir)
                                   "Ignore \".st\" subdirectories.
  These are directories created by SyncThing which may have org files I do
  not want to include."
                                   (not (string-match (rx (literal ".st")) subdir)))))

  ;;; Macros
  (defmacro krisb-evaluate-when-internet (interval &rest body)
    "Asynchronously evaluate BODY once internet connection is available.
  Retries every INTERVAL seconds."
    (declare (indent 0))
    `(let ((url "https://google.com"))
       (cl-labels ((check-connection (status)
                     (if (plist-get status :error)
                         (progn
                           (message "No internet. Retrying in %s seconds..." interval)
                           (run-at-time interval nil
                                        (lambda () (url-retrieve url #'check-connection))))
                       (progn ,@body))))  ; Execute BODY on success.
         (url-retrieve url #'check-connection))))

  (defmacro krisb-modus-themes-setup-faces (label &rest body)
    "Set up faces using modus-themes.
  Does several things:
  - Defines a function whose name begins with \"krisb-modus-themes-\",
    followed by LABEL and \"-setup-faces\".
  - This function evaluates BODY within a `modus-themes-with-colors' block
    if the enabled theme's name begins with \"modus-\".
  - Adds that function to `enable-theme-functions'.
  - Calls the function immediately to apply the changes."
    (let ((name (intern (concat "krisb-modus-themes-" label "-setup-faces"))))
      `(progn
         ;; Define the function
         (defun ,name (theme)
           ,(concat "Set up faces for " label ".
  This function was generated by the macro
  `krisb-modus-themes-setup-faces'.")
           (when (string-match "^modus-" (symbol-name theme))
             (modus-themes-with-colors
               ,@body)))
         (,name (car custom-enabled-themes))
         (add-hook 'enable-theme-functions #',name))))

  ;; A useful macro for executing stuff in other windows. Taken from
  ;; https://karthinks.com/software/emacs-window-management-almanac/#with-other-window-an-elisp-helper
  (defmacro krisb-with-other-window (&rest body)
    "Execute forms in BODY in the other window."
    `(unless (one-window-p)
       (with-selected-window (other-window-for-scrolling)
         ,@body)))

  ;;; Keymaps
  (defvar-keymap krisb-note-keymap
    :doc "Prefix for my note-taking needs.")
  (bind-key "C-c n" krisb-note-keymap 'global-map)

  (defvar-keymap krisb-lsp-keymap
    :doc "Prefix for lsp-related commands.")
  (with-eval-after-load 'lsp-mode
    (bind-key "C-c l" krisb-lsp-keymap 'lsp-mode-map))

  (defvar-keymap krisb-file-keymap
    :doc "Prefix for file-related commands.")
  (bind-key "C-c f" krisb-file-keymap 'global-map)

  (defvar-keymap krisb-yank-keymap
    :doc "Prefix for yanking stuff.")
  (bind-key "C-c i" krisb-yank-keymap 'global-map)

  (defvar-keymap krisb-open-keymap
    :doc "Prefix for opening various hings.")
  (bind-key "C-c o" krisb-open-keymap 'global-map)

  (defvar-keymap krisb-toggle-keymap
    :doc "Prefix for toggling stuff.")
  (bind-key "C-c t" krisb-toggle-keymap 'global-map)

  ;;; Provide
  (provide 'krisb-common)
  ;;; krisb-common.el ends here
#+end_src

** =krisb-themes-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-themes-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-themes-ext.el"
  ;;; krisb-themes-ext.el --- Manage switching/toggling of themes  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code for switching between two themes on-demand according to
  ;; time-of-day.

  ;;; Code:
  (require 'color)

  ;;; Theme switcher
  ;;;; Variables
  (defgroup krisb-themes-ext ()
    "Extensions for using themes."
    :group 'faces
    :prefix "krisb-themes-ext-")


  (defcustom krisb-themes-ext-dark nil
    "The chosen dark theme."
    :type 'symbol)

  (defcustom krisb-themes-ext-light nil
    "The chosen light theme."
    :type 'symbol)

  ;;;; Function definitions
  (defun krisb-themes-ext-ensure-themes-loaded ()
    "Ensure that the themes in `krisb-themes-ext-list' are loaded."
    (unless (or (custom-theme-p krisb-themes-ext-dark)
                (custom-theme-p krisb-themes-ext-light))
      (load-theme krisb-themes-ext-dark t t)
      (load-theme krisb-themes-ext-light t t)))

  (defun krisb-themes-ext-proper-load-theme-light ()
    "Properly load `krisb-theme-light' theme.
  Also disables its light counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-dark)
    (load-theme krisb-themes-ext-light t))

  (defun krisb-themes-ext-proper-load-theme-dark ()
    "Properly load `krisb-theme-dark' theme.
  Also disables its dark counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-light)
    (load-theme krisb-themes-ext-dark t))

  (defun krisb-theme-ext-enable-theme-time-of-day (day-start night-start)
    "Enables the theme based on time of day.
  If daytime, call `krisb-themes-ext-proper-load-theme-light'. If
  nighttime, call `krisb-themes-ext-proper-load-theme-dark'.

  Nighttime begins at NIGHT-START hour and daytime begins at DAY-START
  hour."
    (interactive (list 8 19))
    (let ((hour (string-to-number (format-time-string "%H"))))
      ;; Dark theme between NIGHT-START and DAY-START
      (if (or (<= night-start hour) (<= hour day-start))
          (krisb-themes-ext-proper-load-theme-dark)
        (krisb-themes-ext-proper-load-theme-light))))

  ;;;; Command
  (defun krisb-themes-ext-theme-switcher ()
    "Switch between the light and dark themes."
    (interactive)
    (krisb-themes-ext-ensure-themes-loaded)
    (let* ((current (car custom-enabled-themes)))
      (cond ((equal krisb-themes-ext-light current)
             (krisb-themes-ext-proper-load-theme-dark))
            ((equal krisb-themes-ext-dark current)
             (krisb-themes-ext-proper-load-theme-light)))))

  ;;; Window transparency toggle
  (add-to-list 'default-frame-alist '(alpha-background . 100))
  (defun krisb-themes-ext-toggle-window-transparency (&optional arg)
    "Toggle the value of `alpha-background'.

  Toggles between 100 and 72 by default.  Can choose which value to change
  to if called with ARG, or any prefix argument."
    (interactive "P")
    (let ((transparency (pcase arg
                          ((pred numberp) arg)
                          ((pred car) (read-number "Change the transparency to which value (0-100)? "))
                          (_
                           (pcase (frame-parameter nil 'alpha-background)
                             (72 100)
                             (100 72)
                             (t 100))))))
      (set-frame-parameter nil 'alpha-background transparency)))

  ;;; Provide
  (provide 'krisb-themes-ext)
  ;;; krisb-themes-ext.el ends here
#+end_src

** =krisb-indentation.el=
:PROPERTIES:
:CUSTOM_ID: krisb-indentationel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-indentation.el"
  ;;; krisb-indentation.el --- Bespoke utilities for consistent indentation  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: convenience, tools, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Functions and commands used for easily maintaining consistent indentation and
  ;; whitespace in buffers.

  ;;; Code:

  ;;; Indent whole buffer
  (declare-function comint-bol "comint")
  (declare-function comint-next-prompt "comint")
  (declare-function conf-align-assignments "conf-mode")
  (declare-function org-align-tags "org")
  (declare-function krisb-org-ext-add-blank-lines "krisb-org-ext")

  (defun krisb-format-buffer-indentation--base (&optional beg end)
    "Basic indentation fix using `indent-region'.
  By default, indents entire buffer.  If BEG and END are specified, act
  upon that region instead."
    (let ((beg (or beg (point-min)))
          (end (or end (point-max))))
      (save-excursion
        (untabify beg end)           ; Untabify before the following alters points
        ;; FIXME 2024-01-13: Because untabify could potentially increase the
        ;; number of tabs in the region, indent-region could potentially fail to
        ;; indent in the edge case that characters near the end of the region need
        ;; to be indented.
        (indent-region beg end nil)
        (delete-trailing-whitespace))))

  (defun krisb-format-buffer-indentation--fill-comments (&optional beg end)
    "Basic indentation fill comments.
  Filling of commands only occurs when region is not active.

  See `krisb-format-buffer-indentation--base' for an explanation of the
  parameters BEG and END."
    (krisb-format-buffer-indentation--base beg end)
    (unless (region-active-p)
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward comment-start nil t)
          (call-interactively 'fill-paragraph)
          (forward-line 1)))))

  ;;;###autoload
  (defun krisb-format-buffer-indentation (&optional beg end)
    "DWIM indent the buffer.
  If called from Lisp, indent region from BEG to END, defaulting to the
  first and last point, respectively.  If interactive, either indent the
  entire buffer or the region if active."
    (interactive (list
                  (when (region-active-p) (region-beginning))
                  (when (region-active-p) (region-end))))
    (let ((start-time (current-time)))
      (message "Formatting buffer...")
      (cond
       ((eq major-mode 'emacs-lisp-mode)
        (krisb-format-buffer-indentation--base beg end))
       ((eq major-mode 'inferior-emacs-lisp-mode)
        (krisb-format-buffer-indentation--base
         (save-excursion (goto-char (point-max)) (comint-bol))
         (save-excursion (goto-char (point-max)) (comint-next-prompt 1))))
       ((eq major-mode 'conf-mode)
        (conf-align-assignments)
        (krisb-format-buffer-indentation--base beg end))
       ((eq major-mode 'org-mode)
        (when org-hide-drawers-mode
          (org-hide-drawers-delete-overlays))
        (org-align-tags (not (region-active-p)))
        (krisb-org-ext-add-blank-lines (unless (region-active-p) 'whole-buffer))
        (krisb-format-buffer-indentation--base beg end)
        (when org-hide-drawers-mode
          (org-hide-drawers-make-overlays)))
       ((and (require 'apheleia nil t) (apheleia--get-formatters))   ; If there is an available apheleia formatter
        (call-interactively 'apheleia-format-buffer))
       ((derived-mode-p 'message-mode)
        (delete-trailing-whitespace))
       ((derived-mode-p 'prog-mode)
        (krisb-format-buffer-indentation--fill-comments beg end))
       (t
        (krisb-format-buffer-indentation--base beg end)))
      (message (format-time-string "Formatting buffer... Done. Took %s.%3N seconds."
                                   (float-time (time-subtract (current-time) start-time))))))

  ;;; Provide
  (provide 'krisb-indentation)
  ;;; krisb-indentation.el ends here
#+end_src

** =krisb-vertico.el=
:PROPERTIES:
:CUSTOM_ID: krisb-verticoel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-vertico.el"
  ;;; krisb-vertico.el --- Vertico extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extension to Vertico.

  ;;; Code:
  (require 'vertico)

  ;;; Tab for tramp paths
  ;; Exception for TAB behavior when completing TRAMP paths. See
  ;; https://github.com/minad/vertico/wiki#restore-old-tab-behavior-when-completing-tramp-paths
  (defun krisb-vertico-insert-unless-tramp ()
    "Insert current candidate in minibuffer, except for tramp."
    (interactive)
    (if (vertico--remote-p (vertico--candidate))
        (minibuffer-complete)
      (vertico-insert)))
  (bind-key [remap vertico-insert] #'krisb-vertico-insert-unless-tramp 'vertico-map)

  ;;; Exceptions for org commands
  ;; Special for `org-agenda-filter' and `org-tags-view'. See
  ;; https://github.com/minad/vertico?tab=readme-ov-file#org-agenda-filter-and-org-tags-view
  (defun krisb-vertico-org-enforce-basic-completion (&rest args)
    (minibuffer-with-setup-hook
        (:append
         (lambda ()
           (let ((map (make-sparse-keymap)))
             (define-key map [tab] #'minibuffer-complete)
             (use-local-map (make-composed-keymap (list map) (current-local-map))))
           (setq-local completion-styles (cons 'basic completion-styles)
                       vertico-preselect 'prompt)))
      (apply args)))
  (with-eval-after-load 'org
    (declare-function org-make-tags-matcher "org")
    (advice-add #'org-make-tags-matcher :around #'krisb-vertico-org-enforce-basic-completion))
  (with-eval-after-load 'org-agenda
    (declare-function org-agenda-filter "org-agenda")
    (advice-add #'org-agenda-filter :around #'krisb-vertico-org-enforce-basic-completion))

  ;;; Truncate long filenames
  ;; Left-truncate filename candidates. Taken from
  ;; https://github.com/minad/vertico/wiki#left-truncate-recentf-filename-candidates-eg-for-consult-buffer
  (defun krisb-vertico-truncate-filename-candidates (args)
    (if-let ((arg (car args))
             (type (get-text-property 0 'multi-category arg))
             ((eq (car-safe type) 'file))
             (w (max 30 (- (window-width) 38)))
             (l (length arg))
             ((> l w)))
        (setcar args (concat "…" (truncate-string-to-width arg l (- l w)))))
    args)
  (advice-add #'vertico--format-candidate :filter-args #'krisb-vertico-truncate-filename-candidates)

  ;;; Provide
  (provide 'krisb-vertico)
  ;;; krisb-vertico.el ends here
#+end_src

** =krisb-consult-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-consult-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-consult-ext.el"
  ;;; krisb-consult-ext.el --- Extensions for Consult  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: help, tools

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke extensions or Consult.

  ;;; Code:

  ;;; `consult-buffer' sources
  (defvar krisb-consult-buffer--dired-source
    (list :name     "Dired"
          :category 'buffer
          :narrow   ?d
          :face     'consult-buffer
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'dired-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--dired-source 'append)

  (defvar krisb-consult-buffer--info-source
    (list :name     "Info"
          :category 'buffer
          :narrow   ?i
          :face     'info-title-1
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'Info-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--info-source 'append)

  (defvar krisb-consult-buffer--customize-source
    (list :name     "Customize"
          :category 'buffer
          :narrow   ?c
          :face     'custom-group-tag
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'Custom-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--customize-source 'append)

  ;;; Provide
  (provide 'krisb-consult-ext)
  ;;; krisb-consult-ext.el ends here
#+end_src

** =krisb-org-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-org-ext.el"
  ;;; krisb-org-ext.el --- Org-mode extensions         -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: tools

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke extensions to org-mode.

  ;;; Code:
  (require 'org)

  ;;; Blank lines between headings and their contents
  ;; Ensure that there are blank lines before and after org heading. Use with
  ;; `universal-argument' to apply to whole buffer. Taken from
  ;; https://github.com/alphapapa/unpackaged.el?tab=readme-ov-file#ensure-blank-lines-between-headings-and-before-contents
  ;;;###autoload
  (defun krisb-org-ext-add-blank-lines (&optional prefix)
    "Ensure that blank lines exist between headings and their contents.
  With PREFIX, operate on whole buffer.  Ensures that blank lines exist
  after each heading's drawers."
    (interactive "P")
    (org-map-entries (lambda ()
                       (org-with-wide-buffer
                        ;; `org-map-entries' narrows the buffer, which prevents us from seeing
                        ;; newlines before the current heading, so we do this part widened.
                        (while (not (looking-back "\n\n" nil))
                          ;; Insert blank lines before heading.
                          (insert "\n")))
                       (let ((end (org-entry-end-position)))
                         ;; Insert blank lines before entry content
                         (forward-line)
                         (while (and (org-at-planning-p)
                                     (< (point) (point-max)))
                           ;; Skip planning lines
                           (forward-line))
                         (while (re-search-forward org-drawer-regexp end t)
                           ;; Skip drawers. You might think that `org-at-drawer-p' would suffice, but
                           ;; for some reason it doesn't work correctly when operating on hidden text.
                           ;; This works, taken from `org-agenda-get-some-entry-text'.
                           (re-search-forward "^[ \t]*:END:.*\n?" end t)
                           (goto-char (match-end 0)))
                         (unless (or (= (point) (point-max))
                                     (org-at-heading-p)
                                     (looking-at-p "\n"))
                           (insert "\n"))))
                     t (if prefix
                           nil
                         'tree)))

  ;;; Automate creation of CUSTOM_ID
  ;;;###autoload
  (defun krisb-org-ext-create-custom-id ()
    "Get the CUSTOM_ID of the current entry.
  If the entry already has a CUSTOM_ID, return it as-is, else create a new
  one.

  This function is a copy of `denote-link-ol-get-id'."
    (interactive nil org-mode)
    (let* ((pos (point))
           (id (org-entry-get pos "CUSTOM_ID")))
      (if (and (stringp id) (string-match-p "\\S-" id))
          id
        (setq id (org-id-new "h"))
        (org-entry-put pos "CUSTOM_ID" id)
        id)))

  ;;; Eldoc backend for footnote content
  ;;;###autoload
  (defun krisb-org-ext-eldoc-footnote (callback &rest _rest)
    "Show formatted footnote content for footnote reference at point.
  Read `eldoc-documentation-functions' for an explanation of CALLBACK and
  _REST."
    (when-let*
        ((reference (org-footnote-at-reference-p))
         (label (nth 0 (org-footnote-at-reference-p)))
         (definition (org-footnote-get-definition label))
         (footnote-content (buffer-substring (nth 1 definition)
                                             (nth 2 definition))))
      (funcall callback footnote-content)))

  ;;; Provide
  (provide 'krisb-org-ext)
  ;;; krisb-org-ext.el ends here
#+end_src

** =krisb-denote-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-denote-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-denote-ext.el"
  ;;; krisb-denote-ext.el --- Denote extensions        -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code to extend Denote.

  ;;; Code:
  (require 'denote)
  (require 'org-element)
  (require 'denote-org-extras)

  ;;; Auto-rename denote file based on front-matter
  (defun krisb-denote-ext-auto-rename-file ()
    "Rename denote file based on front-matter.
  Intended to be added to `after-save-hook'."
    (when-let ((f (buffer-file-name)))
      (when (and (file-in-directory-p f denote-directory)
                 (denote-filename-is-note-p f))
        ;; We ignore user-errors since `denote--rename-file' (called internally by
        ;; `denote-rename-file') throws a user-error if you are trying to rename
        ;; the current file to a file that already exists.  This is suppose to
        ;; safeguard against cases wherein renaming a file overwrites another
        ;; file.  However, in my use-case, this should never happen.  I use this
        ;; as a workaround to prevent user-errors from being constantly thrown.
        (condition-case-unless-debug err
            (denote-rename-file-using-front-matter f)
          (user-error nil)))))

  ;;; Standardizing note front-matter
  (defun krisb-org-set-keyword (keyword value)
    "Set org KEYWORD in current buffer to VALUE."
    ;; Got lazy and copied `org-roam-set-keyword'
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" keyword ":\\(.*\\)") (point-max) t)
            (if (string-blank-p value)
                (kill-whole-line)
              (replace-match (concat " " value) 'fixedcase nil nil 1))
          ;; Don't think this is necessary, and it'd be too much code
          ;; to copy if it were
          ;; (org-roam-end-of-meta-data 'drawers)
          (if (save-excursion (end-of-line) (eobp))
              (progn
                (end-of-line)
                (insert "\n"))
            (forward-line)
            (beginning-of-line))
          (insert "#+" keyword ": " value "\n")))))

  (defun krisb-note-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
        (denote-trim-whitespace
         (buffer-substring-no-properties
          (match-beginning 1)
          (match-end 1))))))

  (defun krisb-denote-insert-identifier-maybe ()
    (when (and (buffer-file-name) (denote-file-is-note-p (buffer-file-name)))
      (cond
       ;; ID doesn't exist
       ((not (krisb-note-buffer-prop-get "identifier"))
        (save-excursion
          (goto-char (point-min))
          ;; Move cursor until after the first of following
          ;; properties exists: filetags, date, or title
          (while (and (not (eobp))
                      (cond
                       ((krisb-note-buffer-prop-get "filetags")
                        (re-search-forward (rx bol "#+"
                                               (or "F" "f")
                                               (or "I" "i")
                                               (or "L" "l")
                                               (or "E" "e")
                                               (or "T" "t")
                                               (or "A" "a")
                                               (or "G" "g")
                                               (or "S" "s")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "date")
                        (re-search-forward (rx bol "#+"
                                               (or "D" "d")
                                               (or "A" "a")
                                               (or "T" "t")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "title")
                        (re-search-forward (rx bol "#+"
                                               (or "T" "t")
                                               (or "I" "i")
                                               (or "T" "t")
                                               (or "L" "l")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))))
            (cond
             ((save-excursion (end-of-line) (eobp))
              (end-of-line)
              (insert "\n"))
             (t
              (forward-line)
              (beginning-of-line))))
          (insert "#+identifier: " (denote-retrieve-filename-identifier (buffer-file-name)) "\n")))
       ;; When file name ID and identifier property value differ
       ((not (string= (denote-retrieve-filename-identifier (buffer-file-name))
                      (krisb-note-buffer-prop-get "identifier")))
        (krisb-org-set-keyword "identifier" (denote-retrieve-filename-identifier (buffer-file-name)))))))
  (defun krisb-denote-rearrange-keywords-maybe ()
    (let* ((f (buffer-file-name))
           (file-type (denote-filetype-heuristics f))
           (cur-keywords (seq-uniq (denote-retrieve-keywords-value f file-type)))
           (sorted-keywords (denote-keywords-sort (cl-copy-list cur-keywords))))
      (denote-rewrite-keywords f sorted-keywords file-type)
      ;; Add empty filetags property if one isn't already present
      (unless (krisb-note-buffer-prop-get "filetags")
        (goto-char (point-min))
        (while (and (not (eobp))
                    (cond
                     ((krisb-note-buffer-prop-get "date")
                      (re-search-forward (rx bol "#+"
                                             (or "D" "d")
                                             (or "A" "a")
                                             (or "T" "t")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))
                     ((krisb-note-buffer-prop-get "title")
                      (re-search-forward (rx bol "#+"
                                             (or "T" "t")
                                             (or "I" "i")
                                             (or "T" "t")
                                             (or "L" "l")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))))
          (cond
           ((save-excursion (end-of-line) (eobp))
            (end-of-line)
            (insert "\n"))
           (t
            (forward-line)
            (beginning-of-line))))
        (insert "#+filetags:\n"))))
  (defun krisb-denote-ensure-title-space ()
    (save-excursion
      (goto-char (point-min))
      (if-let ((end-of-title-keyword
                (re-search-forward (rx bol "#+"
                                       (or "T" "t")
                                       (or "I" "i")
                                       (or "T" "t")
                                       (or "L" "l")
                                       (or "E" "e")
                                       ":")
                                   (point-max) t)))
          (progn
            (goto-char end-of-title-keyword)
            (just-one-space))
        (error "No title in %s!" (buffer-file-name)))))

  ;;;###autoload
  (defun krisb-denote-standardize-front-matter ()
    (interactive)
    (let ((existing-buffers (buffer-list)))
      (save-mark-and-excursion
        (dolist (file (denote-directory-files (rx (literal ".org") eol)))
          ;; Export all the files
          (with-current-buffer (find-file-noselect file)
            (read-only-mode -1)
            (save-restriction
              (widen)
              (krisb-denote-insert-identifier-maybe)
              (krisb-denote-rearrange-keywords-maybe)
              (krisb-denote-ensure-title-space)
              (delete-trailing-whitespace))
            (with-demoted-errors "Error: %S"
              (denote-rename-file-using-front-matter file))
            ;; Kill buffer unless it already exists
            (unless (member (get-buffer (buffer-name)) existing-buffers)
              (kill-buffer)))))))

  ;;; Update link descriptions
  (defun krisb-denote-update-link-descriptions (confirmp)
    "Recreate denote link descriptions in the current buffer.
  If called with CONFIMP, then prompt user to confirm a replacement. When
  interactively called, CONFIRMP is non-nil by default, flipping the value
  with `prefix-arg'."
    (interactive (list (not current-prefix-arg)))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward (denote-org-extras--get-link-type-regexp 'denote) nil :no-error)
        (condition-case err
            (save-match-data
              (let* ((link-beg (match-beginning 0))
                     (link-end (match-end 0))
                     (s (match-string-no-properties 0))
                     (link (with-temp-buffer
                             (let ((org-inhibit-startup nil))
                               (insert s)
                               (org-mode)
                               (goto-char (point-min))
                               (org-element-link-parser))))
                     (type (org-element-property :type link))
                     (path (org-element-property :path link))
                     (file (denote-get-path-by-id (car (string-split path "::"))))
                     (heading-custom-id (cadr (string-split path "::")))
                     (new-link-text
                      ;; TODO 2024-03-04: This is a brittle way to create the
                      ;; link. Changes to Denote might break this. Avoid that.
                      (if (and denote-org-store-link-to-heading heading-custom-id)
                          (format "[[denote:%s::#%s][%s]]"
                                  (denote-retrieve-filename-identifier file)
                                  (string-remove-prefix "#" heading-custom-id)
                                  (concat (denote--link-get-description file)
                                          "::"
                                          (save-excursion
                                            (with-current-buffer (find-file-noselect file)
                                              (org-link-search heading-custom-id)
                                              (org-link-display-format
                                               (denote-link-ol-get-heading))))))
                        (format "[[denote:%s][%s]]"
                                (denote-retrieve-filename-identifier file)
                                (denote--link-get-description file))))
                     (current-link-text (buffer-substring link-beg link-end)))
                (when (and (not (string= (substring-no-properties current-link-text) new-link-text))
                           (or (not confirmp)
                               (yes-or-no-p (concat "Replace this link? " current-link-text))))
                  (goto-char link-beg)
                  (delete-region link-beg link-end)
                  (insert new-link-text))))
          (error (message "[krisb-denote-update-link-descriptions] Error encountered:  %s"
                          (error-message-string err))))))
    (message "Corrected links in %s"
             (propertize (denote-retrieve-front-matter-title-value
                          (buffer-file-name)
                          (denote-filetype-heuristics (buffer-file-name)))
                         'face 'denote-faces-title)))

  (defun krisb-denote-update-link-descriptions-globally (dir confirmp)
    "Update the link description of all notes in DIR.
  If CONFIRMP is non-nil, then prompt the user to confirm each
  replacement."
    (interactive (list (denote-subdirectory-prompt) current-prefix-arg))
    (save-window-excursion
      (dolist (f (denote-directory-files (concat (file-name-nondirectory dir) "/") nil t))
        (save-excursion
          (let* ((live-buffer (get-file-buffer f)))
            (with-current-buffer (find-file-noselect f)
              (krisb-denote-update-link-descriptions confirmp))
            (unless live-buffer (kill-buffer live-buffer))))))
    (message "Updated all links in %s!" dir))

  ;;; Provide
  (provide 'krisb-denote-ext)
  ;;; krisb-denote-ext.el ends here
#+end_src

** =krisb-org-roam-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-roam-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-org-roam-ext.el"
  ;;; krisb-org-roam-ext.el --- My bespoke org-roam extensions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: tools, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Org-roam stuff for my own Zettelkasten org-roam workflow.

  ;;; Code:
  (require 'org-roam-node)
  (require 'org-roam-folgezettel)
  (require 'transient)
  (require 'org-expiry)

  ;;; Custom org-roam-node accessors
  ;;;; Normal values
  ;;;###autoload
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy of NODE.
  The hierarchy is the node title prepended with the file and outline path
  if it is a headline.  These parts are separated by \" > \"."
    (when-let* ((level (org-roam-node-level node)))
      (concat
       (org-roam-node-title node)
       (when (> level 1)
         (concat
          (propertize " (" 'face 'shadow)
          (propertize (string-join (nconc (list (org-roam-node-file-title node)) (org-roam-node-olp node))
                                   " > ")
                      'face 'shadow)
          (propertize ")" 'face 'shadow))))))

  ;;;###autoload
  (cl-defmethod org-roam-node-directories ((node org-roam-node))
    "Access the address of NODE.
  The address of a node is the value of the \"ROAM_PLACE\" property."
    (when-let* ((dirs (file-name-directory
                       (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (car (split-string dirs "/"))))

  ;;;###autoload
  (cl-defmethod org-roam-node-address ((node org-roam-node))
    "Access the address of NODE.
  The address of a node is the value of the \"ROAM_PLACE\" property."
    (let ((address (cdr (assoc "ROAM_PLACE" (org-roam-node-properties node) #'string-equal))))
      (when (and address (not (string-empty-p address)))
        (string-trim address))))

  ;;;###autoload
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Access the type of NODE.
  The address of a node is the value of the \"ROAM_TYPE\" property."
    (let ((index-number (cdr (assoc "ROAM_TYPE" (org-roam-node-properties node) #'string-equal))))
      (when (and index-number (not (string-empty-p index-number)))
        (string-trim index-number))))

  ;;;###autoload
  (cl-defmethod org-roam-node-person ((node org-roam-node))
    "Access the person associated with NODE.
  The address of a node is the value of the \"ROAM_PERSON\" property."
    (let ((person (cdr (assoc "ROAM_PERSON" (org-roam-node-properties node) #'string-equal))))
      (when (and person (not (string-empty-p person)))
        (string-trim person))))

  ;;;; Values formatted values for display templates
  ;;;###autoload
  (cl-defmethod org-roam-node-directories-display-template ((node org-roam-node))
    "Returned formatted directory path of NODE.
  Formats the value of `org-roam-node-directories' on NODE."
    (when-let* ((path (org-roam-node-directories node)))
      (propertize (concat "/" path " ") 'face 'shadow)))

  ;;;###autoload
  (cl-defmethod org-roam-node-person-display-template ((node org-roam-node))
    "Returned formatted person of NODE.
  Formats the value of `org-roam-node-person' on NODE."
    (when-let* ((person (org-roam-node-person node)))
      (propertize (concat "@" person " ") 'face 'font-lock-keyword-face)))

  ;;;###autoload
  (cl-defmethod org-roam-node-type-display-template ((node org-roam-node))
    "Returned formatted type of NODE.
  Formats the value of `org-roam-node-type' on NODE."
    (when-let* ((type (org-roam-node-type node)))
      (propertize (concat "&" type " ") 'face 'font-lock-doc-face)))

  ;;;###autoload
  (cl-defmethod org-roam-node-address-display-template ((node org-roam-node))
    "Returned formatted address of NODE.
  Formats the value of `org-roam-node-address' on NODE."
    (when-let* ((address (org-roam-node-address node)))
      (propertize (concat address " ") 'face 'shadow)))

  ;;; Custom org-roam node formatter function
  ;; We use this function as the value of `org-roam-node-formatter' instead of a
  ;; display template string because we want our inserted description to be
  ;; dependent on the existence or non-existence of certain values, e.g., the node
  ;; address
  (cl-defmethod krisb-org-roam-node-formatter ((node org-roam-node))
    "Formatted output of an org-roam NODE.
  This is meant to be used as the value of `org-roam-node-formatter',
  which modifies the description of org-roam nodes from
  `org-roam-node-insert'."
    (let* ((address (org-roam-node-address node))
           (type (org-roam-node-type node))
           (title (org-roam-node-title node))
           (file-title (org-roam-node-file-title node)))
      (concat (when address (format "(%s) " address))
              (when type (format "{%s} " type))
              title
              (unless (string= title file-title)
                (propertize (concat " (" file-title ")") 'face 'shadow)))))

  ;;; Update link descriptions
  (defun krisb-org-roam-ext-lint-descriptions (dir)
    "Correct org-roam link descriptions in DIR.
  If called interactively, DIR defaults to `org-roam-directory'.  When
  called with a prefix argument, prompt the user for the directory in
  which link swill be corrected.

  This function does the following operations in this order:
  1. List all org-roam nodes.
  2. Act (steps 3-6) on each node in turn.
  3. Retrieve backlinks and correctly formatted node text
     (`org-roam-node-formatted').
  4. For each backlink to node, in reverse-point order, update their link
     description if it does not match the correctly formatted node text.
  5. Kill any newly opened buffers."
    (interactive (list (if current-prefix-arg
                           (read-directory-name "Correct descriptions in directory: "
                                                (expand-file-name org-roam-directory))
                         org-roam-directory)))
    (let ((save-silently t)
          (node-list (seq-filter
                      (lambda (node)
                        (file-in-directory-p (org-roam-node-file node) dir))
                      (org-roam-node-list)))
          (corrected-counter 0))
      (message "Correcting all links in %s... (this may take a while)" dir)
      ;; Before iterating on node-list, must first ensure that the database file
      ;; correctly reflects buffer contents.  This is because the location data of
      ;; backlinks (their points) must be accurate, otherwise new link
      ;; descriptions might not change the correct region of the buffer.  To do
      ;; this, we first save all files that are visiting a node in node-list and
      ;; update the org-roam database
      (save-some-buffers nil (lambda () (member (buffer-file-name)
                                                (mapcar #'org-roam-node-file node-list))))
      (org-roam-db-sync)
      (dolist (node node-list)
        (let* ((node-formatted (org-roam-node-formatted node))
               (backlinks (org-roam-backlinks-get node :unique t))
               (initial-buffer-list (buffer-list)))
          (message "Correcting links to %s" node-formatted)
          ;; We must iterate through backlinks in the reverse order of their
          ;; points (i.e. later links come first) so if any of those links are
          ;; changed the backlink points in any earlier links aren't disrupted
          (dolist (backlink (reverse (sort backlinks :key #'org-roam-backlink-point)))
            (let ((path (org-roam-node-file
                         (org-roam-backlink-source-node backlink))))
              (with-current-buffer (find-file-noselect path)
                (save-restriction
                  (widen)
                  (save-excursion
                    (let ((link-pt (org-roam-backlink-point backlink)))
                      (goto-char link-pt)
                      (let ((element (org-element-context)))
                        (if (eq (org-element-type element) 'link)
                            (let ((begin (org-element-property :contents-begin element))
                                  (end (org-element-property :contents-end element)))
                              (when (and begin end)
                                (unless (string= (buffer-substring-no-properties begin end)
                                                 node-formatted)
                                  (goto-char begin)
                                  (delete-region begin end)
                                  (insert node-formatted)
                                  (setq corrected-counter (1+ corrected-counter))
                                  ;; It is important to save the buffer and ensure
                                  ;; it is updated in the org-roam database such
                                  ;; that later nodes in node-list that have
                                  ;; backlinks in buffers with modified links
                                  ;; correctly report the location (point) of those
                                  ;; links
                                  ;; TODO 2024-11-30: Right now we save the file and
                                  ;; update the database for every change in a link.
                                  ;; This command could be much more performant if
                                  ;; we only do this once after we update the links
                                  ;; in that file.  This would, however, require
                                  ;; iterating per-file rather than per-node, which
                                  ;; (I think) would make the logic of this function
                                  ;; less intuitive.
                                  (save-buffer)
                                  (unless org-roam-db-autosync-mode
                                    (org-roam-db-update-file path)))))
                          (message "[krisb-org-roam-ext-lint-descriptions] Element at %s in %s not a link!"
                                   link-pt path)))))))))
          ;; Kill newly opened buffers
          (mapc #'kill-buffer (seq-difference (buffer-list) initial-buffer-list))))
      (message "Finished correcting %s links in %s!" corrected-counter dir)))

  ;;; Index numbering conversion
  ;; TODO 2024-12-03: Rename the functions below more appropriately.
  ;; TODO 2024-12-02: This function takes in a list rather than a single
  ;; letter/number.  Rename appropriately.
  (defun krisb-org-roam-ext--convert-index-num-or-letter (num-or-letter)
    "Turn a number into a letter and a letter into a number.
  NUM-OR-LETTER is either a number or a letter.  If it is a number, return
  the letter in the alphabet at that place in the alphabet.  For instance,
  \"2\" turns into \"b\".  If it is a letter, then return the place it is
  in the alphabet as a string.  For instance, \"d\" returns \"4\"."
    (mapcar (lambda (item)
              (cond
               ;; If item is a number string, convert it to a letter.
               ((string-match-p "^[0-9]+$" item)
                (let ((num (string-to-number item)))
                  (if (and (>= num 1) (<= num 26))
                      (char-to-string (+ ?a (- num 1)))
                    (error "Number out of range: %s" item))))
               ;; If item is a single letter, convert it to a number.
               ((string-match-p "^[a-zA-Z]$" item)
                (let ((char (string-to-char (downcase item))))
                  (number-to-string (- char ?a -1))))
               ;; Otherwise, raise an error for invalid input.
               (t (error "Invalid input: %s" item))))
            num-or-letter))

  (defun krisb-org-roam-ext-convert-index--next-num-or-letter (input)
    "Return the next number or letter of the alphabet as a string for INPUT.
  - If INPUT is a number string (e.g., \"3\"), return the next
    number (\"4\").
  - If INPUT is a single letter (e.g., \"a\"), return the next
    letter (\"b\").  Wrap from \"z\" to \"a\".
  - Raise an error for invalid input."
    (cond
     ;; Case 1: Input is a number
     ((string-match-p "^[0-9]+$" input)
      (number-to-string (1+ (string-to-number input))))
     ;; Case 2: Input is a single letter
     ((string-match-p "^[a-zA-Z]$" input)
      (let* ((char (string-to-char input))
             (next-char (if (char-equal char ?z) ?a
                          (if (char-equal char ?Z) ?A
                            (1+ char)))))
        (char-to-string next-char)))
     ;; Case 3: Invalid input
     (t (error "Invalid input: %s" input))))

  (defun krisb-org-roam-ext-convert-index-numbering (root-index note-index prefix &optional unique)
    "Convert NOTE-INDEX to a child index of ROOT-INDEX by modifying PREFIX.

  This function modifies the NOTE-INDEX to ensure it represents a valid
  child of ROOT-INDEX in a hierarchical numbering system (e.g.,
  \"12.3\").

  - PREFIX is the common prefix that both ROOT-INDEX and NOTE-INDEX
    share.  The function ensures that NOTE-INDEX starts with PREFIX and
    processes the remaining parts (referred to as suffix-parts).
  - If the final part of ROOT-INDEX (referred to as prefix-parts) is a
    letter and the first part of the NOTE-INDEX suffix is also a letter,
    or if both are numbers, the first part of the suffix-parts is
    converted into the alternate type (letter or number) using
    `krisb-org-roam-ext--convert-index-num-or-letter'.
  - If the first part of the suffix-parts is converted, the rest of the
    suffix-parts are also processed to maintain consistency.

  If the optional argument UNIQUE is non-nil:
  - The function ensures the modified NOTE-INDEX does not collide with any
    existing index numbers.  Existing indices are retrieved via
    `org-roam-ql' using the UNIQUE argument as a box predicate.
  - If a collision is detected, the first part of the suffix-parts is
    incremented using
    `krisb-org-roam-ext-convert-index--next-num-or-letter' until a unique
    index is generated.

  Steps:
  1. Extract the suffix-parts of NOTE-INDEX by removing PREFIX.
  2. Extract the prefix-parts of PARENT-INDEX.
  3. If conversion is needed (based on matching types for the final prefix-parts
     and first suffix-parts), process suffix-parts using
     `krisb-org-roam-ext--convert-index-num-or-letter'.
  4. Ensure uniqueness of the modified index if UNIQUE is provided.
  5. Combine root-index and `string-join'd final-suffix-parts into a
     single string.

  Arguments:
  - PARENT-INDEX: The hierarchical index to which NOTE-INDEX will be a child.
  - NOTE-INDEX: The original index to be modified.
  - PREFIX: The common prefix shared between ROOT-INDEX and NOTE-INDEX.
  - UNIQUE: If non-nil, ensures the generated index is unique by checking against
    existing indices.

  Returns:
  A string representing the new index, combining ROOT-INDEX and the converted
  suffix of NOTE-INDEX.

  Examples:
    ;; Convert NOTE-INDEX to a child of ROOT-INDEX without uniqueness
    (krisb-org-roam-ext-convert-index-numbering \"12\" \"12.3\" \"12.\")
    => \"12.3\"

    ;; Convert NOTE-INDEX to a child of ROOT-INDEX, ensuring uniqueness
    ;; (Assume \"12.3\" already exists in UNIQUE box)
    (krisb-org-roam-ext-convert-index-numbering \"12\" \"12.3\" \"12.\" \"unique-box\")
    => \"12.4\""
    ;; Ensure NOTE-INDEX starts with PREFIX
    (unless (string-prefix-p prefix note-index)
      (error "NOTE-INDEX does not start with PREFIX"))
    ;; Step 1: Get parts of NOTE-INDEX after removing PREFIX
    (let* ((suffix-parts (org-roam-folgezettel--index-split
                          (string-remove-prefix prefix note-index)))
           ;; Step 2: Get parts of ROOT-INDEX
           (prefix-parts (org-roam-folgezettel--index-split root-index))
           ;; Step 3: Check and convert first part of SUFFIX-PARTS if necessary
           (head-original (car suffix-parts))
           (head-converted head-original)
           (needs-conversion nil))
      ;; Determine if conversion is needed
      (setq head-converted
            (if (or (and (string-match-p "^[a-zA-Z]$" (car (last prefix-parts)))
                         (string-match-p "^[a-zA-Z]$" head-original))
                    (and (string-match-p "^[0-9]+$" (car (last prefix-parts)))
                         (string-match-p "^[0-9]+$" head-original)))
                (progn
                  (setq needs-conversion t)
                  (car (krisb-org-roam-ext--convert-index-num-or-letter (list head-original))))
              head-original))
      ;; Step 4: Convert the rest of SUFFIX-PARTS if necessary
      (let* ((converted-suffix-parts
              (if needs-conversion
                  (krisb-org-roam-ext--convert-index-num-or-letter suffix-parts)
                suffix-parts))
             ;; Combine prefix-parts and converted suffix-parts
             (final-suffix-parts (cons head-converted (cdr converted-suffix-parts)))
             (new-index nil))
        ;; Step 5: Ensure uniqueness if requested
        (when unique
          (setq new-index
                (concat root-index (string-join final-suffix-parts)))
          (while (member new-index
                         (mapcar #'org-roam-folgezettel-list--retrieve-index
                                 (org-roam-ql-nodes `(box ,unique))))
            (setq head-converted
                  (krisb-org-roam-ext-convert-index--next-num-or-letter head-converted))
            (setq final-suffix-parts
                  (cons head-converted (cdr converted-suffix-parts)))
            (setq new-index
                  (concat root-index (string-join final-suffix-parts)))))
        ;; Step 6: Combine prefix-parts and final-suffix-parts into a single string
        (concat root-index (string-join final-suffix-parts)))))

  ;;; Bespoke functions for creating and managing org-roam heading node properties
  ;; I use this for a bespoke transient menu.

  (defun krisb-org-roam-ext-set-roam-place ()
    "Set the ROAM_PLACE property in the current heading."
    (interactive)
    (let ((place (org-read-property-value "ROAM_PLACE")))
      (org-set-property "ROAM_PLACE" place)))

  (defun krisb-org-roam-ext-set-roam-type ()
    "Set the ROAM_TYPE property in the current heading."
    (interactive)
    (let ((place (org-read-property-value "ROAM_TYPE")))
      (org-set-property "ROAM_TYPE" place)))

  (defun krisb-org-roam-ext-toggle-roam-exclude ()
    "Toggle the ROAM_EXCLUDE property in the current heading."
    (interactive)
    (org-entry-put nil "ROAM_EXCLUDE"
                   (pcase (org-entry-get nil "ROAM_EXCLUDE" nil t)
                     ("t" "nil")
                     ("nil" "t")
                     (_ "t"))))

  (defun krisb-org-roam-ext-set-roam-box ()
    "Set the ROAM_BOX property in the current heading."
    (interactive)
    (let ((box (org-read-property-value "ROAM_BOX")))
      (org-set-property "ROAM_BOX" box)))

  (defun krisb-org-roam-ext-set-roam-person ()
    "Set the ROAM_PERSON property in the current heading."
    (interactive)
    (let ((person (org-read-property-value "ROAM_PERSON")))
      (org-set-property "ROAM_PERSON" person)))

  (defun krisb-org-roam-ext-set-roam-source ()
    "Set the ROAM_SOURCE property in the current heading."
    (interactive)
    (let* ((citation (with-temp-buffer
                       (org-mode)
                       (org-cite-insert nil)
                       (font-lock-ensure)
                       (buffer-string)))
           (source (org-read-property-value "ROAM_SOURCE" nil citation)))
      (org-set-property "ROAM_SOURCE" source)))

  (defun krisb-org-roam-ext-set-roam-context ()
    "Set the ROAM_PROPERTY property in the current heading."
    (interactive)
    (let ((context (org-read-property-value "ROAM_CONTEXT")))
      (org-set-property "ROAM_CONTEXT" context)))

  (defun krisb-org-roam-ext-toggle-properties-visibility ()
    "Toggle the visibility of the PROPERTIES drawer of the Org heading at point."
    (interactive)
    (save-excursion
      (org-back-to-heading t)
      (let ((drawer (save-excursion
                      (when (re-search-forward org-property-drawer-re (save-excursion (outline-next-heading)) t)
                        (match-beginning 0)))))
        (if drawer
            (progn
              (goto-char drawer)
              (org-fold-hide-drawer-toggle (not (org-at-drawer-p))))
          (message "No PROPERTIES drawer found at this heading.")))))

  (defun krisb-org-roam-ext-toggle-heading-content-visibility ()
    "Toggle the visibility of a heading's contents."
    (interactive)
    (if (save-excursion
          (beginning-of-line)
          (and (org-at-heading-p)
               (outline-invisible-p (line-end-position))))
        (org-fold-show-entry)
      (org-fold-hide-entry)))

  (defmacro krisb-org-roam-ext-transient--dyn-roam-property-description (desc prop-name &optional desc-alt)
    "Macro of dynamic descriptions for setting org-roam-specific properties.
  DESC is the description and PROP-NAME is the property name being checked
  for.  If there does not exist a value corresponding to the property
  named PROP-NAME, then the description of the transient command will be
  DESC.  If there is a value, then return DESC with the value of that
  property propertized and appended within parentheses.

  If DESC-ALT is provided, use that string instead as the base string when
  there exists a value for the property named PROP-NAME."
    `(lambda ()
       (let ((prop (org-entry-get (point) ,prop-name nil t)))
         (concat (if (and prop ,desc-alt)
                     ,desc-alt
                   ,desc)
                 (when prop
                   (concat " ("
                           (propertize prop 'face 'transient-value)
                           ")"))))))

  ;;; Provide
  (provide 'krisb-org-roam-ext)
  ;;; krisb-org-roam-ext.el ends here
#+end_src

** =krisb-org-remark-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-org-remark-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-org-remark-ext.el"
  ;;; krisb-org-remark-ext.el --- Extensions for org-remark  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for org-remark.

  ;;; Code:
  (require 'org-remark)
  (require 'transient)

  ;;; My `org-remark' pens
  (defgroup org-remark-ext nil
    "Extension for org-remark."
    :group 'org-remark)

  ;; Sets up `org-remark' faces according to the following schema:
  ;; - Resonant (red)
  ;; - Thesis (yellow)
  ;; - Detail (blue)
  ;; - Outline (green)
  ;; - External (purple/magenta)
  (defface krisb-org-remark-resonant-face
    `((t :background "red"))
    "Face for resonant annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-resonant-minor-face
    `((t :underline (:color "red" :style wave)))
    "Face for less resonant (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-thesis-face
    `((t :background "yellow"))
    "Face for thesis annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-thesis-minor-face
    `((t :underline (:color "yellow" :style wave)))
    "Face for less thesis (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-detail-face
    `((t :background "deep sky blue"))
    "Face for detail annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-detail-minor-face
    `((t :underline (:color "deep sky blue" :style wave)))
    "Face for less detail (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-outline-face
    `((t :background "lawn green"))
    "Face for outline annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-outline-minor-face
    `((t :underline (:color "lawn green" :style wave)))
    "Face for less outline (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-external-face
    `((t :background "magenta"))
    "Face for \"external\" annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-external-minor-face
    `((t :underline (:color "magenta" :style wave)))
    "Face for less \"external\" (underlined) annotations."
    :group 'org-remark-ext)

  (org-remark-create "resonant"
                     'krisb-org-remark-resonant-face
                     `(CATEGORY "resonant" help-echo "Annotation that resonates with me."))
  (org-remark-create "resonant-underline"
                     'krisb-org-remark-resonant-minor-face
                     `(CATEGORY "resonant" help-echo "Annotation that resonates with me but I don't want to be as noticeable."))

  (org-remark-create "thesis"
                     'krisb-org-remark-thesis-face
                     `(CATEGORY "thesis" help-echo "Annotation that denotes something relevant to a thesis."))
  (org-remark-create "thesis-underline"
                     'krisb-org-remark-thesis-minor-face
                     `(CATEGORY "thesis" help-echo "Annotation that denotes something relevant to a thesis but I don't want to be as noticeable."))

  (org-remark-create "detail"
                     'krisb-org-remark-detail-face
                     `(CATEGORY "detail" help-echo "Annotation that denotes a notable detail."))
  (org-remark-create "detail-underline"
                     'krisb-org-remark-detail-minor-face
                     `(CATEGORY "detail" help-echo "Annotation that denotes a notable detail but I don't want to be as noticeable."))

  (org-remark-create "outline"
                     'krisb-org-remark-outline-face
                     `(CATEGORY "outline" help-echo "Annotation that foreshadows structure or main idea(s)."))
  (org-remark-create "outline-underline"
                     'krisb-org-remark-outline-minor-face
                     `(CATEGORY "outline" help-echo "Annotation that foreshadows structure or main idea(s) but I don't want to be as noticeable."))

  (org-remark-create "external"
                     'krisb-org-remark-external-face
                     `(CATEGORY "external" help-echo "Annotation that resonates with me but is external to the text."))
  (org-remark-create "external-underline"
                     'krisb-org-remark-external-minor-face
                     `(CATEGORY "external" help-echo "Annotation that resonates with me but is external to the text but I don't want to be as noticeable."))

  ;;;###autoload
  (transient-define-prefix krisb-org-remark-mark-transient ()
    "Transient menu for my pre-defined `org-remark' pens."
    [["Resonant"
      ("r" "Underline" org-remark-mark-resonant-underline)
      ("R" "Highlight" org-remark-mark-resonant)]
     ["Thesis"
      ("t" "Underline" org-remark-mark-thesis-underline)
      ("T" "Highlight" org-remark-mark-thesis)]]
    [["Detail"
      ("d" "Underline" org-remark-mark-detail-underline)
      ("D" "Highlight" org-remark-mark-detail)]
     ["Outline"
      ("o" "Underline" org-remark-mark-outline-underline)
      ("O" "Highlight" org-remark-mark-outline)]
     ["External"
      ("e" "Underline" org-remark-mark-external-underline)
      ("E" "Highlight" org-remark-mark-external)]])

  (provide 'krisb-org-remark-ext)
  ;;; krisb-org-remark-ext.el ends here
#+end_src

** =krisb-pdfs-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-pdfs-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-pdfs-ext.el"
  ;;; krisb-pdfs-ext.el --- pdf-view-mode extensions   -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for pdf-view-mode and other PDF-related workflows.

  ;;; Code:
  (require 'cl-macs)
  (require 'pdf-annot)
  (require 'pdf-links)
  (require 'avy)

  ;;; Custom entry formatter
  (declare-function org-noter-pdf--edges-to-region "org-noter")
  (el-patch-defun pdf-annot--make-entry-formatter (a)
    "Return a formatter function for annotation A.

  A formatter function takes a format cons-cell and returns
  pretty-printed output."
    (lambda (fmt)
      (let ((entry-type (car fmt))
            (entry-width (cdr fmt))
            ;; Taken from css-mode.el
            (contrasty-color
             (lambda (name)
               (if (> (color-distance name "black") 292485)
                   "black" "white")))
            (prune-newlines
             (lambda (str)
               (replace-regexp-in-string "\n" " " str t t))))
        (cl-ecase entry-type
          (date (propertize (pdf-annot-print-property a 'modified)
                            'date
                            (pdf-annot-get a 'modified)))
          (page (pdf-annot-print-property a 'page))
          (label (funcall prune-newlines
                          (pdf-annot-print-property a 'label)))
          (contents
           (truncate-string-to-width
            (funcall prune-newlines
                     (pdf-annot-print-property a 'contents))
            entry-width))
          (type
           (let ((color (pdf-annot-get a 'color))
                 (type (pdf-annot-print-property a 'type)))
             (if (and pdf-annot-list-highlight-type color)
                 (propertize type 'face
                             `(:background ,color
                                           :foreground ,(funcall contrasty-color color)))
               type)))
          (el-patch-add
            (color
             (let* ((color (pdf-annot-get a 'color)))
               (propertize color 'face
                           `(:background ,color
                                         :foreground ,(funcall contrasty-color color))))))
          (el-patch-add
            (text
             (let* ((page (pdf-annot-get a 'page))
                    (edges (or (when (featurep 'org-noter)
                                 (org-noter-pdf--edges-to-region (alist-get 'markup-edges a)))
                               (pdf-annot-get a 'edges)))
                    (raw-text
                     (pdf-info-gettext page
                                       edges
                                       pdf-view-selection-style
                                       pdf-annot-list-document-buffer))
                    (processed-text
                     (replace-regexp-in-string "\n" " "
                                               (replace-regexp-in-string "-\n" "" raw-text)))
                    (text-length (length processed-text)))
               (when (< entry-width text-length)
                 (add-text-properties entry-width text-length '(display "…") processed-text))
               processed-text)))))))


  ;;; Avy keys to highlight region in PDF
  ;; Use an avy-like interface to highlight region in pdf-view-mode. Heavily based
  ;; off of
  ;; https://github.com/dalanicolai/dala-emacs-lisp/blob/master/pdf-avy-highlight.el
  ;; with modifications
  (defcustom krisb-avy-pdf-links-convert-pointsize-scale 0.02
    "The scale factor for the -pointsize convert command.

  This determines the relative size of the font, when interactively
  reading links."
    :group 'pdf-links
    :type '(restricted-sexp :match-alternatives
                            ((lambda (x) (and (numberp x)
                                              (<= x 1)
                                              (>= x 0))))))

  (defun krisb-avy-pdf-links-read-char-action (query prompt)
    "Using PROMPT, interactively read a link-action.
  BORROWED FROM `pdf-links-read-link-action'.
  See `pdf-links-action-perform' for the interface."
    (pdf-util-assert-pdf-window)
    (let* ((links (pdf-info-search-string
                   query
                   (pdf-view-current-page)
                   (current-buffer)))
           (keys (pdf-links-read-link-action--create-keys
                  (length links)))
           (key-strings (mapcar (apply-partially 'apply 'string)
                                keys))
           (alist (cl-mapcar 'cons keys links))
           (size (pdf-view-image-size))
           (colors (pdf-util-face-colors 'pdf-links-read-link pdf-view-dark-minor-mode))
           (args (list
                  :foreground (car colors)
                  :background (cdr colors)
                  :formats
                  `((?c . ,(lambda (_edges) (pop key-strings)))
                    (?P . ,(number-to-string
                            (max 1 (* (cdr size)
                                      krisb-avy-pdf-links-convert-pointsize-scale)))))
                  :commands pdf-links-read-link-convert-commands
                  :apply (pdf-util-scale-relative-to-pixel
                          (mapcar (lambda (l) (car (cdr (assq 'edges l))))
                                  links)))))
      (unless links
        (error "No links on this page"))
      (unwind-protect
          (let ((image-data nil))
            (unless image-data
              (setq image-data (apply 'pdf-util-convert-page args ))
              (pdf-cache-put-image
               (pdf-view-current-page)
               (car size) image-data 'pdf-links-read-link-action))
            (pdf-view-display-image
             (create-image image-data (pdf-view-image-type) t))
            (pdf-links-read-link-action--read-chars prompt alist))
        (pdf-view-redisplay))))

  (defun krisb-avy-pdf-timed-input ()
    "BORROWED FORM `avy--read-candidates'"
    (let ((str "")
          char break)
      (while (and (not break)
                  (setq char
                        (read-char (format "char%s: "
                                           (if (string= str "")
                                               str
                                             (format " (%s)" str)))
                                   t
                                   (and (not (string= str ""))
                                        avy-timeout-seconds))))
        ;; Unhighlight
        (cond
         ;; Handle RET
         ((= char 13)
          (if avy-enter-times-out
              (setq break t)
            (setq str (concat str (list ?\n)))))
         ;; Handle C-h, DEL
         ((memq char avy-del-last-char-by)
          (let ((l (length str)))
            (when (>= l 1)
              (setq str (substring str 0 (1- l))))))
         ;; Handle ESC
         ((= char 27)
          (keyboard-quit))
         (t
          (setq str (concat str (list char))))))
      str))

  (defun krisb-avy-pdf-get-coordinates (end)
    "Prompt for PDF coordinates using avy-like interface."
    (let* ((query (krisb-avy-pdf-timed-input))
           (coords
            (list (or (krisb-avy-pdf-links-read-char-action query
                                                            (format "Please specify %s (SPC scrolls): "
                                                                    (if end "region end" "region beginning")))
                      (error "No char selected")))))
      (car (alist-get 'edges (car coords)))))

  ;;;###autoload
  (defun krisb-avy-pdf-highlight-region-by-char (&optional activate)
    "Use an avy-like interface to highlight region in PDF.

  If called with ACTIVATE, then also activate the created
  annotation immediately after creation."
    (interactive "P")
    (let* ((start (krisb-avy-pdf-get-coordinates nil))
           (end (krisb-avy-pdf-get-coordinates :end))
           (edges (append (cl-subseq start 0 2) (cl-subseq end 2 4)))
           (pdf-annot-activate-created-annotations activate))
      (pdf-annot-add-markup-annotation edges
                                       (let ((type (completing-read "Markup type (default highlight): "
                                                                    '("squiggly" "highlight" "underline" "strike-out")
                                                                    nil t)))
                                         (if (equal type "") 'highlight (intern type)))
                                       (pdf-annot-read-color "Annotation color: "))))

  ;;; Pdf-annot-list custom (tablist) color filter
  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-color-regexp ()
    "Get a prompt to filter for the color column's colors.
  The offered colors are those already present in the document's
  highlights."
    (interactive)
    (unless (derived-mode-p 'tabulated-list-mode)
      (error "Buffer is not in Tabulated List Mode"))
    (let ((unique-colors
           ;; Get unique colors directly from PDF
           (seq-filter
            #'identity
            (cl-remove-duplicates
             (mapcar
              (lambda (a) (pdf-annot-get a 'color))
              (pdf-annot-getannots nil nil pdf-annot-list-document-buffer))
             :test #'string=)))
          (nearby-color)
          (color-alist))
      ;; Scrape unique colors and closest neighboring defined color name
      (let ((lowest-dist most-positive-fixnum)
            (dist))
        (dolist (uc unique-colors)
          (dolist (c (defined-colors))
            (setq dist (color-distance c uc))
            (when (< dist lowest-dist)
              (setq nearby-color c
                    lowest-dist dist)))
          (push (list (propertize (format "%s (%s)" nearby-color uc)
                                  ;; Taken from pdf-annot.el
                                  'face `(:foreground ,(if (> (color-distance uc "black")
                                                              292485)
                                                           "black" "white")
                                                      :background ,uc))
                      uc)
                color-alist)
          (setq lowest-dist most-positive-fixnum)))

      (let* ((selections (completing-read-multiple "Select color: "
                                                   (mapcar 'car color-alist)
                                                   nil t))
             (color-filter (when selections
                             (concat "("
                                     (string-join
                                      (cl-loop for s in selections
                                               collect (concat "Color =~ " (cadr (assoc-string s color-alist))))
                                      " || ")
                                     ")"))))
        (tablist-push-filter (tablist-filter-parse color-filter)
                             (called-interactively-p 'any)))))

  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-regexp ()
    "Drop-in replacement for `tablist-push-regexp-filter'.
  Calls `krisb-pdf-annot-list-filter-color-regexp' when point is in
  the color column."
    (interactive)
    (if (string= "Color" (tablist-read-column-name nil))
        (krisb-pdf-annot-list-filter-color-regexp)
      (call-interactively 'tablist-push-regexp-filter)))

  ;;; Custom org-link type for PDF annotations
  ;; Code copied from the code shared on Thu, 08 Feb 2024 22:13:50 +0000 by Juan
  ;; Manuel Macías <maciaschain@posteo.net> in the Emacs-devel mailing list. The
  ;; original uses the modification date, whereas this verion uses the annotation
  ;; ID, which should be unique even upon deletions and additions of annotations.
  ;; This is because the annotation IDs are robust (don't change upon modifying
  ;; content of annotation). Additionally, the original version relies on an
  ;; in-buffer `re-search-forward', meaning it only worked if you had the current
  ;; modified date as a column in `pdf-annot-list-format'; this is avoided if we
  ;; use ID's like `pdf-annot-list-display-annotation-from-id' likes.
  (defun krisb-pdf-annot-org-store-link ()
    "Stores link to annotation via its annotate.
  Uses the current annotation at point's ID."
    (when (eq major-mode 'pdf-annot-list-mode)
      (let* ((annot-buf pdf-annot-list-document-buffer)
             (pdf-file (buffer-file-name annot-buf))
             (annot (pdf-annot-getannot (tabulated-list-get-id) annot-buf))
             (id (pdf-annot-print-property annot 'id))
             (page (pdf-annot-print-property annot 'page))
             (link (concat "pdf-annot:" pdf-file "::" id))
             (desc (format "%s (annot. on p. %s)" (file-name-nondirectory pdf-file) page)))
        (org-link-store-props
         :type "pdf-annot"
         :link link
         :description desc))))

  (defun krisb-pdf-annot-org-follow-link (path)
    "Open pdf-tools link."
    (let ((id (if (string-match "::\\(.+\\)" path)
                  (match-string 1 path)
                (error "[krisb-pdf-annot-org-follow-link] Not a valid id!")))
          (file-path (replace-regexp-in-string "::.+" "" path)))
      (find-file file-path)
      (pdf-annot-list-annotations)
      (with-current-buffer (format "*%s's annots*" (file-name-sans-extension (buffer-name)))
        (goto-char (point-min))
        (forward-line (save-excursion
                        (goto-char (point-min))
                        ;; Find line whose tabulated-list-id corresponds to
                        ;; annotation ID
                        (let ((row-id (get-text-property (point) 'tabulated-list-id)))
                          (while (not (or (eq row-id (intern id))
                                          (= (line-number-at-pos (point)) (line-number-at-pos (point-max)))))
                            (forward-line)
                            (setq row-id (get-text-property (point) 'tabulated-list-id))))
                        (1- (line-number-at-pos))))
        (pdf-annot-list-display-annotation-from-id id))))

  (with-eval-after-load 'ol
    (org-link-set-parameters
     "pdf-annot"
     :follow #'krisb-pdf-annot-org-follow-link
     :store #'krisb-pdf-annot-org-store-link))

  ;;; Save and restore PDF registers via bookmark handler
  ;; Drop-in extensions for `pdf-view-bookmark-make-record' and
  ;; `pdf-view-bookmark-jump-handler'.  Override those functions with the two
  ;; below.

  ;; NOTE 2024-10-31: When using desktop.el, do not add `pdf-view-register-alist'
  ;; to `desktop-locals-to-save': that causes an infinite loop.  Either choose
  ;; this solution (modifying the bookmark handler) or that one.  I opt for this
  ;; one since other packages utilize bookmarks (e.g. activities.el).

  ;;;###autoload
  (el-patch-defun pdf-view-bookmark-make-record (&optional no-page no-slice no-size no-origin)
    (el-patch-swap
      "Create a bookmark PDF record.

  The optional, boolean args exclude certain attributes."
      "Create a bookmark PDF record.
  The optional, boolean args exclude certain attributes.

  My version of this function also saves the value of the
  `pdf-view-register-alist' buffer local variable.")
    (let ((displayed-p (eq (current-buffer)
                           (window-buffer))))
      (cons (buffer-name)
            (append (bookmark-make-record-default nil t 1)
                    `((el-patch-add ,(cons 'midnight-p (buffer-local-value 'pdf-view-midnight-minor-mode (current-buffer))))
                      ;; FIXME 2024-11-05: Causes infinite recursion with
                      ;; desktop.el.  for some reason
                      ;; (el-patch-add ,(cons 'registers (buffer-local-value 'pdf-view-register-alist (current-buffer))))
                      ,(unless no-page
                         (cons 'page (pdf-view-current-page)))
                      ,(unless no-slice
                         (cons 'slice (and displayed-p
                                           (pdf-view-current-slice))))
                      ,(unless no-size
                         (cons 'size pdf-view-display-size))
                      ,(unless no-origin
                         (cons 'origin
                               (and displayed-p
                                    (let ((edges (pdf-util-image-displayed-edges nil t)))
                                      (pdf-util-scale-pixel-to-relative
                                       (cons (car edges) (cadr edges)) nil t)))))
                      (handler . pdf-view-bookmark-jump-handler))))))

  ;;;###autoload
  (el-patch-defun pdf-view-bookmark-jump-handler (bmk)
    (el-patch-swap
      "The bookmark handler-function interface for bookmark BMK.

  See also `pdf-view-bookmark-make-record'."
      "The bookmark handler-function interface for bookmark BMK.
  See also `pdf-view-bookmark-make-record'.

  My version of this function also restores the value of the
  `pdf-view-register-alist' buffer local variable.")
    (let ((el-patch-add (registers (bookmark-prop-get bmk 'registers)))
          (el-patch-add (midnight-p (bookmark-prop-get bmk 'midnight-p)))
          (page (bookmark-prop-get bmk 'page))
          (slice (bookmark-prop-get bmk 'slice))
          (size (bookmark-prop-get bmk 'size))
          (origin (bookmark-prop-get bmk 'origin))
          (file (bookmark-prop-get bmk 'filename))
          (show-fn-sym (make-symbol "pdf-view-bookmark-after-jump-hook")))
      (fset show-fn-sym
            (lambda ()
              (remove-hook 'bookmark-after-jump-hook show-fn-sym)
              (unless (derived-mode-p 'pdf-view-mode)
                (pdf-view-mode))
              (with-selected-window
                  (or (get-buffer-window (current-buffer) 0)
                      (selected-window))
                (el-patch-add
                  (if midnight-p
                      (pdf-view-midnight-minor-mode 1)
                    (pdf-view-midnight-minor-mode -1)))
                ;; FIXME 2024-11-05: Causes infinite recursion with desktop.el for
                ;; some reason
                ;; (el-patch-add
                ;;   (when registers
                ;;     (setq-local pdf-view-register-alist registers)))
                (when size
                  (setq-local pdf-view-display-size size))
                (when slice
                  (apply 'pdf-view-set-slice slice))
                (when (numberp page)
                  (pdf-view-goto-page page))
                (when origin
                  (let ((size (pdf-view-image-size t)))
                    (image-set-window-hscroll
                     (round (/ (* (car origin) (car size))
                               (frame-char-width))))
                    (image-set-window-vscroll
                     (round (/ (* (cdr origin) (cdr size))
                               (if pdf-view-have-image-mode-pixel-vscroll
                                   1
                                 (frame-char-height))))))))))
      (add-hook 'bookmark-after-jump-hook show-fn-sym)
      (set-buffer (or (find-buffer-visiting file)
                      (find-file-noselect file)))))

  ;;; Provide
  (provide 'krisb-pdfs-ext)
  ;;; krisb-pdfs-ext.el ends here
#+end_src

** =krisb-wombag-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-wombag-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-wombag-ext.el"
  ;;; krisb-wombag-ext.el --- Wombag extensions        -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, comm

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for Wombag.el.

  ;;; Code:
  (require 'wombag)
  (require 'wombag-show)
  (require 'ol)

  ;;; Custom wombag org-link
  (defun krisb-wombag-org-store-link ()
    "Stores link to the current wombag entry."
    (when (eq major-mode 'wombag-show-mode)
      (let* ((title (alist-get 'title (buffer-local-value 'wombag-show-entry (current-buffer))))
             (id (alist-get 'id (buffer-local-value 'wombag-show-entry (current-buffer))))
             (pt (save-restriction (widen) (point)))
             (url (concat "wombag:" (number-to-string id) "::" (number-to-string pt)))
             (desc (format "%s (at point %s)" title pt)))
        (org-link-store-props
         :type "wombag"
         :link url
         :description desc))))

  (defun krisb-wombag-org-follow-link (path)
    "Open wombag entry.
  The PATH is formatted in the following way:
  - \"wombag:\"
  - a wombag entry ID
  - \"::\"
  - an optional number that represents the point in the buffer."
    (let* ((option (and (string-match "::\\(.*\\)\\'" path)
                        (match-string 1 path)))
           (id (string-to-number
                (if (not option)
                    path
                  (substring path 0 (match-beginning 0)))))
           (pt (when option
                 (string-to-number (substring path (+ 2 (match-beginning 0))))))
           (entry (car
                   (wombag-db-get-entries
                    `[:select ,(vconcat (buffer-local-value 'wombag-search-columns (current-buffer))) :from items :where (= id ,id)]
                    (buffer-local-value 'wombag-search-columns (current-buffer))))))
      (with-current-buffer (wombag-show-entry entry)
        (when pt (goto-char pt)))))

  (org-link-set-parameters
   "wombag"
   :follow #'krisb-wombag-org-follow-link
   :store #'krisb-wombag-org-store-link)

  ;;; Comparability with org-remark
  (defun krisb-org-remark-wombag-find-file-name ()
    "Return the ID of the entry.
  It assumes the buffer is a `wombag-show-mode' buffer and has a variable
  `wombag-show-entry' value.

  This function is meant to be set to hook
  `org-remark-source-find-file-name-functions'."
    (when (eq major-mode 'wombag-show-mode)
      (concat "wombag:" (number-to-string (alist-get 'id wombag-show-entry)))))

  (defun krisb-org-remark-wombag-highlight-link-to-source (filename point)
    "Return org-link pointing to the source wombag entry (i.e. FILENAME).
  It assumes the major mode is `wombag-show-mode'.

  Saves the POINT in buffer.

   This function is meant to be set to hook
  `org-remark-highlight-link-to-source-functions'."
    (when (eq major-mode 'wombag-show-mode)
      (let* ((file-title filename)
             (id (string-to-number (cadr (string-split filename ":"))))
             (title (or (caar (wombag-db-query `[:select title :from items :where (= id ,id)]))
                        "UNTITLED")) ; NOTE 2024-09-24: This is what `wombag' currently titles its untitled notes
             (pt (number-to-string point)))
        (concat "[[" file-title "::" pt "][" title " (at point " pt ")" "]]"))))

  (declare-function org-remark-auto-on "org-remark")
  (define-minor-mode krisb-org-remark-wombag-mode
    "Enable Org-remark to work with Wombag."
    :global t
    :group 'org-remark-wombag
    (if krisb-org-remark-wombag-mode
        ;; Enable
        (progn
          (add-hook 'wombag-show-mode-hook #'org-remark-auto-on)
          (add-hook 'org-remark-source-find-file-name-functions
                    #'krisb-org-remark-wombag-find-file-name)
          (add-hook 'org-remark-highlight-link-to-source-functions
                    #'krisb-org-remark-wombag-highlight-link-to-source))
      ;; Disable
      (remove-hook 'wombag-show-mode-hook #'org-remark-auto-on)
      (remove-hook 'org-remark-source-find-file-name-functions
                   #'krisb-org-remark-wombag-find-file-name)
      (remove-hook 'org-remark-highlight-link-to-source-functions
                   #'krisb-org-remark-wombag-highlight-link-to-source)))

  ;;; Provide
  (provide 'krisb-wombag-ext)
  ;;; krisb-wombag-ext.el ends here
#+end_src

** =krisb-mpv.el=
:PROPERTIES:
:CUSTOM_ID: krisb-mpvel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-mpv.el"
  ;;; krisb-mpv.el --- Bespoke MPV extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extending the functionality of mpv.el for my idiosyncratic note-taking
  ;; preferences.

  ;;; Code:
  (require 'mpv)

  ;;; Custom MPV notes
  ;;;; Functions
  (defun krisb-mpv-play ()
    "Call `mpv-start'.
  Prompts for file in `org-attach-directory' if existent.  Otherwise,
  prompts for file in `default-directory'.

  Behaves specially in Dired buffers.  In those cases case, marked files
  will be played as a playlist as chronologically displayed in the Dired
  buffer.  If no files are marked, just the file at point is played.  (It
  is useful to `dired-sort-toggle-or-edit' to control the ordering of
  files.  To reverse the order, pass the \"-r\" flag to the listing
  switches, done by calling `dired-sort-toggle-or-edit' with `C-u'.)"
    (interactive)
    (let* ((dir (if (org-attach-dir)
                    (file-name-as-directory (org-attach-dir))
                  default-directory))
           (files
            (or (cl-remove-if
                 (lambda (f)
                   "Ensure F is not a directory and is a video file."
                   (not (and (not (directory-name-p f))
                             (member (file-name-extension f)
                                     ;; OPTIMIZE 2024-03-31: I hard-code this,
                                     ;; but I don't know if there's a better way
                                     ;; to recognize video extensions
                                     (list "mp4" "avi" "mkv" "mov" "wmv" "flv" "webm" "mpeg" "m4v" "3gp")))))
                 ;; NOTE 2024-03-31: If no files are marked, the file at point
                 ;; is treated as marked
                 (dired-get-marked-files))
                (expand-file-name (read-file-name "Select video: " dir)))))
      (apply #'mpv-start files)))

  (defun krisb-mpv-jump-to-playback-position (time)
    "Prompt user for a TIME to jump to.
  Takes HH:MM:SS time format.  Uses `org-timer-hms-to-secs' to parse user
  input."
    (interactive "MJump to time (HH:MM:SS format): ")
    (let ((secs (org-timer-hms-to-secs time)))
      (mpv-seek secs)))

  ;;;; Keymap
  (defvar-keymap krisb-mpv-map
    :doc "Keymap for my mpv.el commands for use in `org-mode'.
  Commands that control MPV playback mimic MPV keybinds."
    :repeat (mpv-pause mpv-seek-backward mpv-seek-forward)
    "o" #'krisb-mpv-play
    "O" #'mpv-play-url
    "k" #'mpv-kill
    "p" #'mpv-pause
    "b" #'mpv-seek-backward
    "f" #'mpv-seek-forward
    "g" #'krisb-mpv-jump-to-playback-position
    "9" #'mpv-volume-decrease
    "0" #'mpv-volume-increase
    "[" #'mpv-speed-decrease
    "]" #'mpv-speed-increase
    "P" #'mpv-jump-to-playlist-entry
    "i" #'mpv-insert-playback-position)

  ;; Taken from https://github.com/kljohann/mpv.el/wiki
  (defun krisb-mpv-org-metareturn-insert-playback-position ()
    "When on an `org-timer' formatted list, insert playback position."
    (when-let ((item-beg (org-in-item-p)))
      (when (and (not (bound-and-true-p org-timer-start-time))
                 (mpv-live-p)
                 (save-excursion
                   (goto-char item-beg)
                   (and (not (org-invisible-p)) (org-at-item-timer-p))))
        (mpv-insert-playback-position t))))
  (with-eval-after-load 'org
    (add-hook 'org-metareturn-hook #'krisb-mpv-org-metareturn-insert-playback-position))

  ;; Go to timestamps with `org-open-at-point'
  (with-eval-after-load 'org
    (add-hook 'org-open-at-point-functions 'mpv-seek-to-position-at-point))

  ;;; Provide
  (provide 'krisb-mpv)
  ;;; krisb-mpv.el ends here
#+end_src

** =krisb-email-composition-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-email-composition-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-email-composition-ext.el"
  ;;; krisb-email-composition-ext.el --- Email composition extensions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona(require 'message) <krisbalintona@gmail.com>
  ;; Keywords: mail, lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions to composing email.

  ;;; Code:

  ;;; Custom signatures
  (defcustom krisb-signature-separator "--"
    "Separator between email body and its signature."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-open
    (concat (when message-signature-insert-empty-line "\n")
            "\n#+begin_signature\n")
    "String meant to begin email signatures."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-close "\n#+end_signature"
    "String meant to end email signatures."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-alist
    '(("Take care" . "Take care,\nKristoffer")
      ("In gratitude" . "In gratitude,\nKristoffer")
      ("Best" . "Best,\nKristoffer")
      ("With appreciation" . "With appreciation,\nKristoffer")
      ("Phone number mention" . "Best regards,\nKristoffer Balintona\nPhone: (773) 677-9699")
      ("Website link" . "In gratitude,\nKristoffer Balintona\nhttps://kristofferbalintona.me"))
    "Alist of aliases and their corresponding email signatures."
    :type '(alist :key-type (string :tag "Signature name")
                  :value-type (string :tag "Signature content"))
    :group 'message)

  ;;;###autoload
  (defun krisb-signature-select (&optional alias)
    "Select one of the signatures from `krisb-signature-alist'.
  Meant to be the value of `message-signature'.

  If ALIAS is a key in `krisb-signature-alist', then the corresponding
  value will be returned. If it is not, then it will be treated as the
  content of a properly formatted signature.

  If no ALIAS is supplied, then the keys from `krisb-signature-alist' will
   be shown via the `completing-read' interface."
    (let* ((alias (or alias
                      (completing-read
                       "Insert signature: "
                       (cl-loop for (key . value) in krisb-signature-alist
                                collect key))))
           (content (or (alist-get alias krisb-signature-alist nil nil #'string=) alias)))
      (if (bound-and-true-p org-msg-mode)
          ;; If using `org-msg-mode' and a signature was manually typed rather
          ;; than an alias chosen, then format that manually-typed-signature.
          ;; Example: if "Test" is typed, the result will be:
          ;; "#+begin_signature  (`krisb-signature-open')
          ;; ⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼  (`krisb-signature-separator')
          ;; Test,
          ;; Kristoffer
          ;; #+end_signature  (`krisb-signature-close')"
          (format "%s%s\n%s%s%s"
                  krisb-signature-open
                  krisb-signature-separator
                  content
                  ",\nKristoffer"
                  krisb-signature-close)
        content)))

  ;;;###autoload
  (defun krisb-signature-insert-mu4e ()
    "Insert a selection from `krisb-signature-alist'.

  Replaces existing signature if present in buffer. Relies on
  signatures being wrapped in `krisb-signature-open' and
  `krisb-signature-close'."
    (interactive)
    (save-excursion
      (let ((sig (funcall 'krisb-signature-select))
            (existing-sig-beg
             (save-excursion
               (save-match-data
                 (goto-char (point-min))
                 (when (search-forward krisb-signature-open nil t)
                   (match-beginning 0)))))
            (existing-sig-end
             (save-excursion
               (save-match-data
                 (goto-char (point-min))
                 (search-forward krisb-signature-close nil t)))))
        (if (and existing-sig-beg existing-sig-end)
            ;; Replace existing signature
            (progn
              (goto-char existing-sig-beg)
              (delete-region existing-sig-beg existing-sig-end)
              (insert sig))
          ;; Remove leading whitespace from sig if inserting
          (insert (string-trim-left sig)))))
    ;; Change email signature separator to the conventional "--" for text-only
    ;; emails
    (when (and (derived-mode-p 'org-msg-edit-mode)
               (equal (org-msg-get-prop "alternatives")
                      '(text)))
      (save-excursion
        (goto-char (point-min))
        (when (search-forward krisb-signature-separator nil t)
          (replace-match "--" 1)))))

  ;;; Provide
  (provide 'krisb-email-composition-ext)
  ;;; krisb-email-composition-ext.el ends here
#+end_src

** =krisb-notmuch-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-notmuch-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-notmuch-ext.el"
  ;;; krisb-notmuch-ext.el --- Notmuch extensions      -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp, mail

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke extensions to Notmuch.

  ;;; Code:
  (require 'notmuch)

  ;;; Show only unread emails in thread opened via in notmuch-show-mode
  ;;;###autoload
  (defun krisb-notmuch-show-expand-only-unread-h ()
    "The `+notmuch-show-expand-only-unread-h' taken from Doom Emacs.
  In `notmuch-show-mode', when showing a thread, keep read messages
  folded."
    (interactive)
    (let ((unread nil)
          (open (notmuch-show-get-message-ids-for-open-messages)))
      (notmuch-show-mapc (lambda ()
                           (when (member "unread" (notmuch-show-get-tags))
                             (setq unread t))))
      (when unread
        (let ((notmuch-show-hook (remove 'krisb-notmuch-show-expand-only-unread-h notmuch-show-hook)))
          (notmuch-show-filter-thread "tag:unread")))))

  ;;; Bespoke `notmuch-show-mode' commands
  ;;;###autoload
  (defun krisb-notmuch-show-trash-thread-then-next (&optional show)
    "\"Trash\" all messages in the current buffer, then exit thread.
  If SHOW is provided (interactively by prefix-arg), then also open that
  thread."
    (interactive "P")
    (notmuch-show-tag-all
     (notmuch-tag-change-list (append notmuch-archive-tags '("+trash"))))
    (notmuch-show-next-thread t show))

  ;;;###autoload
  (defun krisb-notmuch-show-tag-thread (&optional reverse)
    "Like `notmuch-show-archive-thread' put prompt "
    (interactive "P")
    (let (current-tags)
      (notmuch-show-mapc
       (lambda () (setq current-tags (append (notmuch-show-get-tags) current-tags))))
      (notmuch-show-tag-all
       (notmuch-tag-change-list
        (notmuch-read-tag-changes current-tags)
        reverse))))

  ;;;###autoload
  (defun krisb-notmuch-show-advance-and-tag ()
    "Like `notmuch-show-advance-and-archive' but prompt for tag instead.
  Tagging is done by `krisb-notmuch-show-tag-thread'."
    (interactive)
    (when (notmuch-show-advance)
      (krisb-notmuch-show-tag-thread)
      (notmuch-show-next-thread t)))

  ;; Sets the style of `message's citations before sending a reply
  ;; TODO 2024-10-07: Try setting this automatically. If I can't, then clean up
  ;; the prompting of this function
  (defun krisb-notmuch--set-message-citation-style (orig-func &rest args)
    "Prompt for which style of citations should be used for message reply."
    (let ((selection
           (completing-read "Citation style: "
                            '("default" "traditional" "gmail"))))
      (cond
       ((equal selection "traditional")
        (message "Setting citation style to \"traditional\"")
        (let ((message-cite-function 'message-cite-original)
              (message-citation-line-function 'message-insert-formatted-citation-line)
              (message-citation-line-format "On %a, %b %d %Y, %N wrote:\n")
              (message-cite-reply-position 'below)
              (message-yank-prefix "> ")
              (message-yank-cited-prefix ">")
              (message-yank-empty-prefix ">"))
          (apply orig-func args)))
       ((equal selection "gmail")
        (message "Setting citation style to \"gmail\"")
        ;; These settings set what is specified by `message-cite-style-gmail'. I
        ;; do this manually since not all packages seem to be affected by
        ;; `message-cite-style'
        (let ((message-cite-function 'message-cite-original)
              (message-citation-line-function 'message-insert-formatted-citation-line)
              (message-citation-line-format "On %a, %b %d, %Y at %-I:%M %p %f wrote:\n")
              (message-cite-reply-position 'above)
              (message-yank-prefix "    ")
              (message-yank-cited-prefix "    ")
              (message-yank-empty-prefix "    "))
          (apply orig-func args)))
       ((equal selection "default")
        (message "Using default citation style")
        (apply orig-func args)))))
  (advice-add 'notmuch-mua-new-reply :around #'krisb-notmuch--set-message-citation-style)

  ;;;; `notmuch-mua-reply' overide to obey `message-cite-reply-position'
  (el-patch-defun notmuch-mua-reply (query-string &optional sender reply-all duplicate)
    (el-patch-add "Like `notmuch-mua-reply' but positions citation based on `message-cite-reply-position'.")
    (let* ((duparg (and duplicate (list (format "--duplicate=%d" duplicate))))
           (args `("reply" "--format=sexp" "--format-version=5" ,@duparg))
           (process-crypto notmuch-show-process-crypto)
           reply
           original)
      (when process-crypto
        (setq args (append args '("--decrypt=true"))))
      (if reply-all
          (setq args (append args '("--reply-to=all")))
        (setq args (append args '("--reply-to=sender"))))
      (setq args (append args (list query-string)))
      ;; Get the reply object as SEXP, and parse it into an elisp object.
      (setq reply (apply #'notmuch-call-notmuch-sexp args))
      ;; Extract the original message to simplify the following code.
      (setq original (plist-get reply :original))
      ;; Extract the headers of both the reply and the original message.
      (let* ((original-headers (plist-get original :headers))
             (reply-headers (plist-get reply :reply-headers)))
        ;; If sender is non-nil, set the From: header to its value.
        (when sender
          (plist-put reply-headers :From sender))
        (let
            ;; Overlay the composition window on that being used to read
            ;; the original message.
            ((same-window-regexps '("\\*mail .*")))
          ;; We modify message-header-format-alist to get around
          ;; a bug in message.el.  See the comment above on
          ;; notmuch-mua-insert-references.
          (let ((message-header-format-alist
                 (cl-loop for pair in message-header-format-alist
                          if (eq (car pair) 'References)
                          collect (cons 'References
                                        (apply-partially
                                         'notmuch-mua-insert-references
                                         (cdr pair)))
                          else
                          collect pair)))
            (notmuch-mua-mail (plist-get reply-headers :To)
                              (notmuch-sanitize (plist-get reply-headers :Subject))
                              (notmuch-headers-plist-to-alist reply-headers)
                              nil (notmuch-mua-get-switch-function))))
        ;; Create a buffer-local queue for tag changes triggered when
        ;; sending the reply.
        (when notmuch-message-replied-tags
          (setq notmuch-message-queued-tag-changes
                (list (cons query-string notmuch-message-replied-tags))))
        ;; Insert the message body - but put it in front of the signature
        ;; if one is present, and after any other content
        ;; message*setup-hooks may have added to the message body already.
        (save-restriction
          (message-goto-body)
          (narrow-to-region (point) (point-max))
          (goto-char (point-max))
          (if (re-search-backward message-signature-separator nil t)
              (when message-signature-insert-empty-line
                (forward-line -1))
            (goto-char (point-max))))
        ;; If `message-cite-reply-position' is `above', e.g., for Gmail-like email
        ;; replies, then before inserting the citation, put the point after the
        ;; signature and insert a newline for spacing. Also respects if
        ;; `message-cite-reply-position' is set via `message-cite-style'.
        (el-patch-add (when (or (equal message-cite-reply-position 'above)
                                (and message-cite-style
                                     (eq (eval (cadr
                                                (assoc 'message-cite-reply-position
                                                       (if (symbolp message-cite-style)
                                                           (eval message-cite-style)
                                                         message-cite-style))))
                                         'above)))
                        (goto-char (point-max))
                        (insert "\n")))
        (let ((from (plist-get original-headers :From))
              (date (plist-get original-headers :Date))
              (start (point)))
          ;; notmuch-mua-cite-function constructs a citation line based
          ;; on the From and Date headers of the original message, which
          ;; are assumed to be in the buffer.
          (insert "From: " from "\n")
          (insert "Date: " date "\n\n")
          (insert
           (with-temp-buffer
             (let
                 ;; Don't attempt to clean up messages, excerpt
                 ;; citations, etc. in the original message before
                 ;; quoting.
                 ((notmuch-show-insert-text/plain-hook nil)
                  ;; Don't omit long parts.
                  (notmuch-show-max-text-part-size 0)
                  ;; Insert headers for parts as appropriate for replying.
                  (notmuch-show-insert-header-p-function
                   notmuch-mua-reply-insert-header-p-function)
                  ;; Ensure that any encrypted parts are
                  ;; decrypted during the generation of the reply
                  ;; text.
                  (notmuch-show-process-crypto process-crypto)
                  ;; Don't indent multipart sub-parts.
                  (notmuch-show-indent-multipart nil)
                  ;; Stop certain mime types from being inlined
                  (mm-inline-override-types (notmuch--inline-override-types)))
               ;; We don't want sigstatus buttons (an information leak and usually wrong anyway).
               (cl-letf (((symbol-function 'notmuch-crypto-insert-sigstatus-button) #'ignore)
                         ((symbol-function 'notmuch-crypto-insert-encstatus-button) #'ignore))
                 (notmuch-show-insert-body original (plist-get original :body) 0)
                 (buffer-substring-no-properties (point-min) (point-max))))))
          (set-mark (point))
          (goto-char start)
          ;; Quote the original message according to the user's configured style.
          (funcall notmuch-mua-cite-function)))
      ;; Crypto processing based crypto content of the original message
      (when process-crypto
        (notmuch-mua-reply-crypto (plist-get original :body))))
    ;; Push mark right before signature, if any.
    (message-goto-signature)
    (unless (eobp)
      (end-of-line -1))
    (push-mark)
    (message-goto-body)
    (set-buffer-modified-p nil))
  (advice-add 'notmuch-mua-reply :override #'krisb-notmuch-mua-reply)

  ;;; Provide
  (provide 'krisb-notmuch-ext)
  ;;; krisb-notmuch-ext.el ends here
#+end_src

** =krisb-ox-hugo-ext.el=
:PROPERTIES:
:CUSTOM_ID: krisb-ox-hugo-extel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-ox-hugo-ext.el"
  ;;; krisb-ox-hugo-ext.el --- Extensions to blogging with Hugo  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: text, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Supplementary functionality for my workflow of blogging with Hugo.

  ;;; Code:
  (require 'denote) ; TODO 2024-11-07: Use declare-functions instead of require to remove denote dependency
  (require 'ox-hugo)
  (require 'el-patch)

  ;;; Return the title portion of the denote file corresponding to ID
  (declare-function denote--retrieve-title-or-filename "denote")
  ;;;###autoload
  (defun krisb-org-hugo-retrieve-denote-name (denote-id &optional custom-id)
    "Return the title portion of the denote file corresponding to DENOTE_ID.
  If CUSTOM-ID is provided, then this is a CUSTOM-ID to a heading in the
  file corresponding to DENOTE_ID.  In this case, the title of the heading
  will be returned instead.

  If a file does not correspond to DENOTE-ID, then throw an error.  If a
  heading does not have a CUSTOM-ID, then also throw an error."
    (let ((paths (denote-directory-files denote-id)))
      (cond
       ((null paths)
        (error "No file found for Denote ID %s" denote-id))
       ((> (length paths) 1)
        (error "Multiple files found for Denote ID %s" denote-id))
       (t
        (if custom-id
            (with-current-buffer (find-file-noselect (car paths))
              (let ((found nil))
                (org-map-entries
                 (lambda ()
                   (when (string= (org-entry-get nil "CUSTOM_ID") custom-id)
                     (setq found (denote-link-ol-get-heading))))
                 nil 'file)
                (or found
                    (error "No heading found with CUSTOM_ID %s" custom-id))))
          (denote-retrieve-title-or-filename (car paths) 'org))))))

  ;;; Exclude the exportation of certain heading tags
  (defvar krisb-org-hugo-exclude-tags
    `("ATTACH" "project" ,(rx "__" (0+ anychar)))
    "Regexps to exclude tags from org-hugo export.
  For more information, see
  `krisb-org-hugo--tag-processing-fn-ignore-tags-maybe'.")

  (defun krisb-org-hugo--tag-processing-fn-ignore-tags-maybe (tag-list _info)
    "Ignore tags which match a regexp found in `krisb-org-hugo-exclude-tags'.
  TAG-LIST and INFO are as described in
  `org-hugo-tag-processing-functions'."
    (cl-set-difference tag-list krisb-org-hugo-exclude-tags
                       :test (lambda (t1 t2) (string-match-p t2 t1))))
  (add-to-list 'org-hugo-tag-processing-functions #'krisb-org-hugo--tag-processing-fn-ignore-tags-maybe)

  ;;; Convenience bundle-setting
  (defvar krisb-org-hugo-bundle-workflow t
    "Whether I am using a Hugo bundle workflow.
  Relevant for my `krisb-org-hugo--get-pub-dir'.  A non-nil value means
  bundles are given a default name; see `krisb-org-hugo--get-pub-dir'.")

  (defun krisb-org-hugo-title-slug (name)
    "Sanitize NAME to be safe as a directory or file name.
  This function is used by my bespoke bundle workflow to determine the
  directory name of the bundle.  Additionally, this function is used for
  my bespoke code for relative links to Denote notes and Org-roam nodes."
    ;; (message "[krisb-org-hugo-title-slug DBG] title: %s" title)
    (let ((invalid-chars (rx (or "/" "\\" ":" "*" "?" "\"" "<" ">" "|" "(" ")"  ","))))
      (file-name-as-directory
       (downcase
        (replace-regexp-in-string "\\s-" "_" (replace-regexp-in-string invalid-chars "" name))))))

  (el-patch-defun org-hugo--get-pub-dir (info)
    (el-patch-swap
      "Return the post publication directory path.

  The publication directory is created if it does not exist.

  INFO is a plist used as a communication channel."
      "Return the post publication directory path.

  The publication directory is created if it does not exist.

  INFO is a plist used as a communication channel.

  My version sets a default bundle directory name if
  `krisb-org-hugo-bundle-workflow' is non-nil.  This directory name will
  be a sluggified version of the file's title.")
    (let* ((base-dir (if (plist-get info :hugo-base-dir)
                         (file-name-as-directory (plist-get info :hugo-base-dir))
                       (user-error "It is mandatory to set the HUGO_BASE_DIR property or the `org-hugo-base-dir' local variable")))
           (content-dir (concat org-hugo-content-folder "/"))
           (section-path (org-hugo--get-section-path info))
           ;; Use the bundle path if its value exists (with underscores replaced
           ;; with hyphens).  If it doesn't, then defer to using the file's title
           ;; slug as a default value, but only if
           ;; `krisb-org-hugo-bundle-workflow' is non-nil.  Otherwise, have
           ;; bundle-dir be an empty string.
           (el-patch-swap
             (bundle-dir (let ((bundle-path (or ; Hugo bundle set in the post subtree gets higher precedence
                                             (org-hugo--entry-get-concat nil "EXPORT_HUGO_BUNDLE" "/")
                                             (plist-get info :hugo-bundle)))) ; This is mainly to support per-file flow
                           (if bundle-path
                               (file-name-as-directory bundle-path)
                             "")))
             (bundle-dir (let ((bundle-path (or (org-hugo--entry-get-concat nil "EXPORT_HUGO_BUNDLE" "/")
                                                (plist-get info :hugo-bundle)))
                               (default-bundle-path (car (plist-get info :title))))
                           (cond
                            ((and bundle-path (not (string= bundle-path "")))
                             (krisb-org-hugo-title-slug bundle-path))
                            ((and bundle-path krisb-org-hugo-bundle-workflow)
                             (krisb-org-hugo-title-slug default-bundle-path))
                            (t "")))))
           (pub-dir (let ((dir (concat base-dir content-dir section-path bundle-dir)))
                      (make-directory dir :parents) ;Create the directory if it does not exist
                      dir)))
      (file-truename pub-dir)))

  ;;; Relative links
  (defun krisb-org-export-resolve-denote-relative-link (link _info)
    "Return `denote' file referenced as LINK destination.
  INFO is a plist used as a communication channel.

  Return value will be the file name of LINK destination.  Throw an error
  if no match is found."
    (let* ((denote-id (org-element-property :path link))
           (denote-files (denote-directory-files denote-id)))
      ;; (message "[denote-files]: %s" denote-files)
      ;; (message "[car of denote-files]: %s" (car denote-files))
      (cond
       ((and denote-files (equal 1 (length denote-files)))
        (car denote-files))
       (denote-files
        (user-error "[krisb-org-export-resolve-denote-relative-link]: Multiple notes with that ID! %s" denote-files))
       (t
        (signal 'org-link-broken (list denote-id))))))

  (declare-function org-roam-node-title "org-roam-node")
  (declare-function org-roam-node-from-id "org-roam-node")
  (el-patch-defun org-hugo-link (link desc info)
    "Convert LINK to Markdown format.

  DESC is the link's description.
  INFO is a plist used as a communication channel.

  Unlike `org-md-link', this function will also copy local images
  and rewrite link paths to make blogging more seamless."
    (let* ((raw-link (org-element-property :raw-link link))
           (raw-path (org-element-property :path link))
           (type (org-element-property :type link))
           (link-is-url (member type '("http" "https" "ftp" "mailto"))))
      ;; (message "[org-hugo-link DBG] raw-path 1: %s" raw-path)

      (when (and (stringp raw-path)
                 link-is-url)
        (setq raw-path (org-blackfriday--url-sanitize-maybe
                        info (url-encode-url raw-path))))
      ;; (message "[org-hugo-link DBG] raw-link: %s" raw-link)
      ;; (message "[org-hugo-link DBG] raw-path 2: %s" raw-path)
      ;; (message "[org-hugo-link DBG] link: %S" link)
      ;; (message "[org-hugo-link DBG] link type: %s" type)
      (cond
       ;; NOTE 2024-12-03: I have since moved from Denote to Org-roam but have
       ;; left the below just in case it is of use in the future.  However, easier
       ;; than the below, I learned that `org-link-set-parameters' can be used to
       ;; determine how these links are exported.
       ;; For denote org link support
       (el-patch-add
         ((string= type "denote")
          ;; (message "[org-hugo-link DBG] hugo-bundle: %s" (plist-get info :hugo-bundle))
          ;; (message "[org-hugo-link DBG] title %s" (plist-get info :title))
          (let* ((destination (krisb-org-export-resolve-denote-relative-link link info))
                 (note-file (denote-retrieve-title-value destination 'org))
                 (path
                  (if (string= ".org" (downcase (file-name-extension destination ".")))
                      (if (and krisb-org-hugo-bundle-workflow (plist-get info :hugo-bundle))
                          (concat (file-name-as-directory (krisb-org-hugo-title-slug note-file))
                                  "index.md")
                        (concat note-file ".md"))
                    destination)))
            ;; (message "[org-hugo-link DBG] link path: %s" path)
            ;; (message "[org-hugo-link DBG] link desc: %s" desc)
            (format "[%s]({{< relref \"%s\" >}})" (if desc desc path) path))))
       ;; Link type is handled by a special function.
       ((org-export-custom-protocol-maybe link desc 'md info))
       ((member type '("custom-id" "id"
                       "fuzzy")) ;<<target>>, #+name, heading links
        (let ((destination (if (string= type "fuzzy")
                               (org-export-resolve-fuzzy-link link info)
                             (org-export-resolve-id-link link info))))
          ;; (message "[org-hugo-link DBG] link type: %s" type)
          ;; (message "[org-hugo-link DBG] destination: %s" destination)
          ;; (message "[org-hugo-link DBG] link: %S" link)
          ;; (message "[org-hugo-link DBG] link destination elem type: %S" (org-element-type destination))
          (pcase (org-element-type destination)
            (el-patch-swap
              ;; External file.
              (`plain-text
               (let ((path (progn
                             ;; Treat links to `file.org' as links to `file.md'.
                             (if (string= ".org" (downcase (file-name-extension destination ".")))
                                 (concat (file-name-sans-extension destination) ".md")
                               destination))))
                 ;; (message "[org-hugo-link DBG] plain-text path: %s" path)
                 (if (org-id-find-id-file raw-path)
                     (let* ((anchor (org-hugo-link--heading-anchor-maybe link info))
                            (ref (if (and (org-string-nw-p anchor)
                                          (not (string-prefix-p "#" anchor)))
                                     ;; If the "anchor" doesn't begin with
                                     ;; "#", it's a direct reference to a
                                     ;; post subtree.
                                     anchor
                                   (concat path anchor))))
                       ;; (message "[org-hugo-link DBG] plain-text org-id anchor: %S" anchor)
                       (format "[%s]({{< relref \"%s\" >}})" (or desc path) ref))
                   (if desc
                       (format "[%s](%s)" desc path)
                     (format "<%s>" path)))))
              (`plain-text
               (let ((path (progn
                             ;; (message "[org-hugo-link DBG] hugo-bundle: %s" (plist-get info :hugo-bundle))
                             ;; (message "[org-hugo-link DBG] title %s" (plist-get info :title))
                             ;; Treat links to `file.org' as links to `file.md'.
                             (if (string= ".org" (downcase (file-name-extension destination ".")))
                                 ;; NOTE 2022-06-02: I made changes here to get
                                 ;; links to between bundles working.  If the
                                 ;; hugo_bundle file property exists, then this
                                 ;; changes the destination appropriately.
                                 (if (and krisb-org-hugo-bundle-workflow (plist-get info :hugo-bundle))
                                     (concat (krisb-org-hugo-title-slug (file-name-sans-extension destination))
                                             "index.md")
                                   (concat (file-name-sans-extension destination) ".md"))
                               destination))))
                 ;; (message "[org-hugo-link DBG] plain-text path: %s" path)
                 (cond
                  ;; TODO 2024-11-07: Think through what the desired behavior
                  ;; should be if I am linking to a node that is a headline.
                  ;; Org-roam links
                  ((org-roam-node-from-id raw-path)
                   (let* ((node-name (org-roam-node-title (org-roam-node-from-id raw-path)))
                          (destination (concat (krisb-org-hugo-title-slug node-name) "index.md")))
                     (format "[%s]({{< relref \"%s\" >}})" (or desc path) destination)))
                  ((org-id-find-id-file raw-path)
                   (let* ((anchor (org-hugo-link--heading-anchor-maybe link info))
                          (ref (if (and (org-string-nw-p anchor)
                                        (not (string-prefix-p "#" anchor)))
                                   ;; If the "anchor" doesn't begin with "#",
                                   ;; it's a direct reference to a post subtree.
                                   anchor
                                 (concat path anchor))))
                     ;; (message "[org-hugo-link DBG] plain-text org-id anchor: %S" anchor)
                     (format "[%s]({{< relref \"%s\" >}})" (or desc path) ref)))
                  (t (if desc
                         (format "[%s](%s)" desc path)
                       (format "<%s>" path)))))))
            ;; Links of type [[* Some heading]].
            (`headline
             (let ((title (org-export-data (org-element-property :title destination) info)))
               (format
                "[%s](#%s)"
                ;; Description
                (cond ((org-string-nw-p desc))
                      ((org-export-numbered-headline-p destination info)
                       (mapconcat #'number-to-string
                                  (org-export-get-headline-number destination info)
                                  "."))
                      (t
                       title))
                ;; Reference
                (org-hugo--get-anchor destination info))))
            ;; Links to other Org elements like source blocks, tables,
            ;; paragraphs, standalone figures, <<target>> links, etc.
            (_
             (let ((description
                    (or (org-string-nw-p desc)
                        (let ((number (org-export-get-ordinal
                                       destination info
                                       nil #'org-html--has-caption-p)))
                          (when number
                            (let ((num-str (if (atom number)
                                               (number-to-string number)
                                             (mapconcat #'number-to-string number "."))))
                              ;; (message "[org-hugo-link DBG] num-str: %s" num-str)
                              (if org-hugo-link-desc-insert-type
                                  (let* ((type (org-element-type destination))
                                         ;; Org doesn't have a specific
                                         ;; element for figures. So if
                                         ;; the element is `paragraph',
                                         ;; and as this element has an
                                         ;; ordinal, we will assume that
                                         ;; to be a figure.
                                         (type (if (equal 'paragraph type)
                                                   'figure
                                                 type))
                                         (type-str (org-blackfriday--translate type info)))
                                    (format "%s %s" type-str num-str))
                                num-str)))))))
               ;; (message "[org-hugo-link DBG] link description: %s" description)
               (when description
                 (let ((dest-link (cond
                                   ;; Ref to a source block or table.
                                   ((memq (org-element-type destination) '(src-block table))
                                    (org-blackfriday--get-reference destination))
                                   ;; Ref to a standalone figure.
                                   ((and (org-html-standalone-image-p destination info)
                                         (eq (org-element-type destination) 'paragraph))
                                    (let ((figure-ref (org-blackfriday--get-reference destination)))
                                      (if (org-string-nw-p figure-ref)
                                          (replace-regexp-in-string
                                           "\\`org-paragraph--"
                                           (org-blackfriday--get-ref-prefix 'figure)
                                           figure-ref)
                                        (org-export-get-reference destination info))))
                                   ;; Ref to a <<target>>.
                                   ((eq (org-element-type destination) 'target)
                                    (org-blackfriday--get-target-anchor destination))
                                   ;; Ref to all other link destinations.
                                   (t
                                    (org-export-get-reference destination info)))))
                   (format "[%s](#%s)" description dest-link))))))))
       ((org-export-inline-image-p link org-html-inline-image-rules)
        ;; (message "[org-hugo-link DBG] processing an image: %s" desc)
        (let* ((parent (org-export-get-parent link))
               (parent-type (org-element-type parent))
               ;; If this is a hyper-linked image, it's parent type will
               ;; be a link too. Get the parent of *that* link in that
               ;; case.
               (grand-parent (when (eq parent-type 'link)
                               (org-export-get-parent parent)))
               (useful-parent (if grand-parent
                                  grand-parent
                                parent))
               (attr (org-export-read-attribute :attr_html useful-parent))
               (caption (or
                         ;; Caption set using #+caption takes higher precedence.
                         (org-string-nw-p
                          (org-export-data  ;Look for caption set using #+caption
                           (org-export-get-caption (org-export-get-parent-element link))
                           info))
                         (plist-get attr :caption)))
               (caption (when (org-string-nw-p caption)
                          (format "%s%s%s%s"
                                  "<span class=\"figure-number\">"
                                  (format (org-html--translate
                                           (concat
                                            (cdr (assoc 'figure org-blackfriday--org-element-string))
                                            " %d:")
                                           info)
                                          (org-export-get-ordinal
                                           useful-parent info
                                           nil #'org-html--has-caption-p))
                                  " </span>"
                                  caption)))
               (extension (file-name-extension raw-path))
               (inlined-svg (and (stringp extension)
                                 (string= "svg" (downcase extension))
                                 (plist-get attr :inlined))))
          ;; (message "[org-hugo-link DBG] Inline image: %s, extension: %s" raw-path extension)
          ;; (message "[org-hugo-link DBG] inlined svg? %S" inlined-svg)
          ;; (message "[org-hugo-link DBG] caption: %s" caption)
          (if inlined-svg
              (let* ((svg-contents (with-temp-buffer
                                     (insert-file-contents raw-path)
                                     (fill-region (point-min) (point-max)) ;Make huge one-liner SVGs sane
                                     (buffer-substring-no-properties (point-min) (point-max))))
                     (svg-contents-sanitized (replace-regexp-in-string
                                              ;; Remove the HTML comments.
                                              "<!--\\(.\\|\n\\)*?-->" ""
                                              (replace-regexp-in-string
                                               ;; Remove the xml document tag as that cannot be inlined in-between
                                               ;; a Markdown (or even an HTML) file.
                                               "<\\?xml version=\"1\\.0\" encoding=\"UTF-8\" standalone=\"no\"\\?>" ""
                                               ;; Remove !DOCTYPE tag from the inlined SVG.
                                               (replace-regexp-in-string
                                                "<!DOCTYPE svg[^>]+>" ""
                                                svg-contents))))
                     (svg-html (if caption
                                   (format "<figure>\n%s\n<figcaption>\n\n  %s\n</figcaption>\n</figure>"
                                           svg-contents-sanitized caption)
                                 svg-contents-sanitized)))
                ;; (message "[org-hugo-link DBG] svg contents: %s" svg-contents)
                ;; (message "[org-hugo-link DBG] svg contents sanitized: %s" svg-contents-sanitized)
                svg-html)
            (let* ((path (org-hugo--attachment-rewrite-maybe raw-path info))
                   (inline-image (not (org-html-standalone-image-p useful-parent info)))
                   (source (if link-is-url
                               (concat type ":" path)
                             path))
                   (num-attr (/ (length attr) 2)) ;(:alt foo) -> num-attr = 1
                   (alt-text (plist-get attr :alt)))
              ;; (message "[org-hugo-link DBG] path: %s" path)
              ;; (message "[org-hugo-link DBG] inline image? %s" inline-image)
              ;; (message "[org-hugo-link DBG] attr: %s num of attr: %d"
              ;;          attr (length attr))
              ;; (message "[org-hugo-link DBG] parent-type: %s" parent-type)
              ;; (message "[org-hugo-link DBG] useful-parent-type: %s"
              ;;          (org-element-type useful-parent))
              (cond
               (;; Use the Markdown image syntax if the image is inline and
                ;; there are no HTML attributes for the image, or just one
                ;; attribute, the `alt-text'.
                (and inline-image
                     (or (= 0 num-attr)
                         (and alt-text
                              (= 1 num-attr))))
                (let ((alt-text (if alt-text
                                    alt-text
                                  "")))
                  (format "![%s](%s)" alt-text source)))
               (;; Else if the image is inline (with non-alt-text
                ;; attributes), use HTML <img> tag syntax.
                inline-image
                ;; The "target" and "rel" attributes would be meant for <a>
                ;; tags. So do not pass them to the <img> tag.
                (plist-put attr :target nil)
                (plist-put attr :rel nil)
                (org-html--format-image source attr info))
               (t ;Else use the Hugo `figure' shortcode.
                ;; Hugo `figure' shortcode named parameters.
                ;; https://gohugo.io/content-management/shortcodes/#figure
                (let ((figure-params `((src . ,source)
                                       (alt . ,alt-text)
                                       (caption . ,(when (org-string-nw-p caption)
                                                     (replace-regexp-in-string "\"" "\\\\\\&" caption))) ;Escape the double-quotes, if any.
                                       (link . ,(plist-get attr :link))
                                       (title . ,(plist-get attr :title))
                                       (class . ,(plist-get attr :class))
                                       (attr . ,(plist-get attr :attr))
                                       (attrlink . ,(plist-get attr :attrlink))
                                       (width . ,(plist-get attr :width))
                                       (height . ,(plist-get attr :height))
                                       ;; While the `target' and `rel'
                                       ;; attributes are not supported by
                                       ;; the inbuilt Hugo `figure'
                                       ;; shortcode, they can be used as
                                       ;; intended if a user has a custom
                                       ;; `figure' shortcode with the
                                       ;; support added for those.
                                       (target . ,(plist-get attr :target))
                                       (rel . ,(plist-get attr :rel))))
                      (figure-param-str ""))
                  (dolist (param figure-params)
                    (let ((name (car param))
                          (val (cdr param)))
                      (when val
                        (setq figure-param-str (concat figure-param-str
                                                       (format "%s=\"%s\" "
                                                               name val))))))
                  ;; (message "[org-hugo-link DBG] figure params: %s" figure-param-str)
                  (format "{{< figure %s >}}" (org-trim figure-param-str)))))))))
       ((string= type "coderef")
        (let* ((ref-label (org-element-property :path link))
               (ref-info (org-hugo-link--resolve-coderef ref-label info))
               (desc (format (org-export-get-coderef-format ref-label desc)
                             (plist-get ref-info :ref))))
          ;; (message "[org-hugo-link DBG] coderef ref label: %s" ref-label)
          ;; (message "[org-hugo-link DBG] coderef ref str: %s" (plist-get ref-info :ref))
          ;; (message "[org-hugo-link DBG] coderef anchor prefix: %s" (plist-get ref-info :anchor-prefix))
          ;; (message "[org-hugo-link DBG] coderef line num: %s" (plist-get ref-info :line-num))
          ;; (message "[org-hugo-link DBG] coderef desc: %s" desc)
          (format "[%s](#%s-%s)"
                  desc
                  (plist-get ref-info :anchor-prefix)
                  (plist-get ref-info :line-num))))
       ((string= type "radio")
        (let ((destination (org-export-resolve-radio-link link info)))
          (format "[%s](#%s%s)"
                  desc
                  (org-blackfriday--get-ref-prefix 'radio)
                  (org-blackfriday--valid-html-anchor-name
                   (org-element-property :value destination)))))
       (t ;[[file:foo.png]], [[file:foo.org::* Heading]], [[file:foo.org::#custom-id]], link type: file
        (let* ((link-param-str "")
               (path (cond
                      (link-is-url
                       ;; Taken from ox-html.el -- Extract attributes
                       ;; from parent's paragraph.  HACK: Only do this
                       ;; for the first link in parent (inner image link
                       ;; for inline images).  This is needed as long as
                       ;; attributes cannot be set on a per link basis.
                       (let* ((attr
                               (let ((parent (org-export-get-parent-element link)))
                                 (and (eq (org-element-map parent 'link #'identity info :first-match) link)
                                      (org-export-read-attribute :attr_html parent))))
                              ;; https://www.w3schools.com/tags/tag_link.asp
                              (link-params `((title . ,(plist-get attr :title))
                                             (style . ,(plist-get attr :style))
                                             (referrerpolicy . ,(plist-get attr :referrerpolicy))
                                             (media . ,(plist-get attr :media))
                                             (target . ,(plist-get attr :target))
                                             (rel . ,(plist-get attr :rel))
                                             (sizes . ,(plist-get attr :sizes))
                                             (type . ,(plist-get attr :type)))))
                         (dolist (param link-params)
                           (let ((name (car param))
                                 (val (cdr param)))
                             (when val
                               (setq link-param-str (concat link-param-str
                                                            (format "%s=\"%s\" "
                                                                    name val))))))
                         ;; (message "[org-hugo-link DBG] link params: %s" link-param-str)
                         )
                       (concat type ":" raw-path))
                      (;; Remove the "file://" prefix.
                       (string= type "file")
                       ;; (message "[org-hugo-link DBG] raw-path: %s" raw-path)
                       (let* ((path1 (replace-regexp-in-string "\\`file://" "" raw-path))
                              (path-lc (downcase path1)))
                         (cond
                          (;; foo.org, foo.org::* Heading, foo.org::#custom_id
                           (string= ".org" (file-name-extension path-lc "."))
                           (let ((ref "")
                                 (anchor ""))
                             (if (string-suffix-p org-hugo--preprocessed-buffer-dummy-file-suffix path-lc)
                                 (progn
                                   (setq ref (string-remove-suffix
                                              org-hugo--preprocessed-buffer-dummy-file-suffix
                                              (file-name-nondirectory path1)))
                                   ;; Dummy Org file paths created in
                                   ;; `org-hugo--get-pre-processed-buffer'
                                   ;; For dummy Org file paths, we are
                                   ;; limiting to only "#" style search
                                   ;; strings.
                                   (when (string-match ".*\\.org::\\(#.*\\)" raw-link)
                                     (setq anchor (match-string-no-properties 1 raw-link))))
                               ;; Regular Org file paths.
                               (setq ref (file-name-sans-extension (file-name-nondirectory path1)))
                               (let ((link-search-str
                                      ;; If raw-link is "./foo.org::#bar",
                                      ;; set `link-search-str' to
                                      ;; "#bar".
                                      (when (string-match ".*\\.org::\\(.*\\)" raw-link)
                                        (match-string-no-properties 1 raw-link))))
                                 ;; (message "[org-hugo-link DBG] link-search-str: %s" link-search-str)
                                 (when link-search-str
                                   (setq anchor (org-hugo--search-and-get-anchor raw-path link-search-str info)))))
                             ;; (message "[org-hugo-link file.org::*Heading DBG] ref    = %s" ref)
                             ;; (message "[org-hugo-link file.org::*Heading DBG] anchor = %s" anchor)
                             (cond
                              ;; Link to a post subtree.  In this case,
                              ;; the "anchor" is actually the post's
                              ;; slug.
                              ((and (org-string-nw-p anchor) (not (string-prefix-p "#" anchor)))
                               (format "{{< relref \"%s\" >}}" anchor))
                              ;; Link to a non-post subtree, like a subheading in a post.
                              ((or (org-string-nw-p ref) (org-string-nw-p anchor))
                               (format "{{< relref \"%s%s\" >}}" ref anchor))
                              (t
                               ""))))
                          (t ;; attachments like foo.png
                           (org-hugo--attachment-rewrite-maybe path1 info)))))
                      (t
                       raw-path)))
               (link-param-str (org-string-nw-p (org-trim link-param-str))))
          ;; (message "[org-hugo-link DBG] desc=%s path=%s" desc path)
          ;; (message "[org-hugo-link DBG] link-param-str=%s" link-param-str)
          (cond
           ;; Link description is a `figure' shortcode but does not
           ;; already have the `link' parameter set.
           ((and desc
                 (string-match-p "\\`{{<\\s-*figure\\s-+" desc)
                 (not (string-match-p "\\`{{<\\s-*figure\\s-+.*link=" desc)))
            (replace-regexp-in-string "\\s-*>}}\\'"
                                      (format " link=\"%s\"\\&" path)
                                      desc))
           ;; Both link description and link attributes are present.
           ((and desc
                 link-param-str)
            (format "<a href=\"%s\" %s>%s</a>"
                    (org-html-encode-plain-text path)
                    link-param-str
                    (org-link-unescape desc)))
           ;; Only link description, but no link attributes.
           (desc
            (let* ((path-has-space (and
                                    (not (string-prefix-p "{{< relref " path))
                                    (string-match-p "\\s-" path)))
                   (path (if path-has-space
                             ;; https://github.com/kaushalmodi/ox-hugo/issues/376
                             ;; https://github.com/gohugoio/hugo/issues/6742#issuecomment-573924706
                             (format "<%s>" path)
                           path)))
              (format "[%s](%s)" desc path)))
           ;; Only link attributes, but no link description.
           (link-param-str
            (let ((path (org-html-encode-plain-text path)))
              (format "<a href=\"%s\" %s>%s</a>"
                      path
                      link-param-str
                      ;; Below trick is to prevent Hugo from
                      ;; auto-hyperlinking the link in the
                      ;; description. Idea from
                      ;; https://stackoverflow.com/q/25706012/1219634.
                      (replace-regexp-in-string ":" "&colon;" (org-link-unescape path)))))
           ;; Neither link description, nor link attributes.
           ((string-prefix-p "{{< relref " path)
            (format "[%s](%s)" path path))
           ((org-string-nw-p path)
            (format "<%s>" path))
           (t
            "")))))))

  ;;; Provide
  (provide 'krisb-ox-hugo-ext)
  ;;; krisb-ox-hugo-ext.el ends here
#+end_src

** =krisb-oblique-strategies.el=
:PROPERTIES:
:CUSTOM_ID: krisb-oblique-strategiesel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-oblique-strategies.el"
  ;;; krisb-oblique-strategies.el --- Implementation of Oblique Strategies  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: text, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; A simple implementation of Oblique Strategies prompts.  See
  ;; https://github.com/zzkt/oblique-strategies?tab=readme-ov-file and
  ;; https://github.com/zzkt/oblique-strategies?tab=readme-ov-file for more
  ;; information on its potential use and function.

  ;; The list of strategies was taken from https://oblique.ookb.co/list.html.

  ;;; Code:

  (defvar krisb-oblique-strategies-prompts
    (list "(Organic) machinery."
          "A line has two sides."
          "A very small object - Its centre."
          "Abandon desire."
          "Abandon normal instructions."
          "Accept advice."
          "Accretion."
          "Adding on."
          "Allow an easement (an easement is the abandonment of a stricture)."
          "Always give yourself credit for having more than personality."
          "Always the first steps."
          "Animal noises."
          "Are there sections? Consider transitions."
          "Ask a computer program to repeat your last action."
          "Ask people to work against their better judgement."
          "Ask your body."
          "Assemble some of the elements in a group and treat the group."
          "Back up a few steps. What else could you have done?"
          "Balance the consistency principle with the inconsistency principle."
          "Be dirty."
          "Be extravagant."
          "Be less critical more often."
          "Breathe more deeply."
          "Build bridges."
          "Burn bridges."
          "Call your mother and ask her what to do."
          "Cascades."
          "Change ambiguities to specifics."
          "Change specifics to ambiguities."
          "Change instrument roles."
          "Change nothing and continue with immaculate consistency."
          "Children’s voices speaking."
          "Children’s voices singing."
          "Cluster analysis."
          "Consider different fading systems."
          "Consider transitions."
          "Consult other promising sources."
          "Consult other unpromising sources."
          "Convert a melodic element into a rhythmic element."
          "Courage!"
          "Cut a vital connection."
          "Cut a virtual connection."
          "Decorate, decorate."
          "Define an area as “safe” and use it as an anchor."
          "Describe the landscape in which this belongs."
          "Destroy nothing."
          "Destroy the most important thing."
          "Discard an axiom."
          "Disciplined self-indulgence."
          "Disconnect from desire."
          "Discover the recipes you are using and abandon them."
          "Discover your formulas and abandon them."
          "Display your talent."
          "Distorting time."
          "Do nothing for as long as possible."
          "Do something boring."
          "Do something sudden, destructive and unpredictable."
          "Do the last thing first."
          "Do the washing up."
          "Do the words need changing?"
          "Do we need holes?"
          "Don’t avoid what is easy."
          "Don’t be afraid of things because they’re easy to do."
          "Don’t be frightened of cliches."
          "Don’t be frightened to display your talents."
          "Don’t break the silence."
          "Don’t stress one thing more than another."
          "Emphasize differences."
          "Emphasize repetitions."
          "Emphasize the flaws."
          "Faced with a choice, do both!"
          "Feed the recording back out of the medium."
          "Feedback recordings into an acoustic situation."
          "Fill every beat with something."
          "First work alone, then work in unusual pairs."
          "From nothing to more than nothing."
          "Get your neck massaged."
          "Ghost echoes."
          "Give the game away."
          "Give way to your worst impulse."
          "Go outside. Shut the door."
          "Go slowly all the way round the outside."
          "Go to an extreme, move back to a more comfortable place."
          "How would someone else do it?"
          "How would you explain this to your parents?"
          "How would you have done it?"
          "Humanize something that is free of error."
          "Idiot glee."
          "Imagine the music as a moving chain or caterpillar."
          "Imagine the music as a series of disconnected events."
          "In total darkness."
          "In a very large room, very quietly."
          "Infinitesimal gradations."
          "Instead of changing the thing, change the world around it."
          "Credibility of intentions."
          "Nobility of intentions."
          "Humility of intentions."
          "Is it finished?"
          "Is something missing?"
          "Is the intonation correct?"
          "Is the style right?"
          "Is the tuning appropriate?"
          "It is quite possible (after all)."
          "It is simply a matter or work."
          "Just carry on."
          "Left channel, right channel, centre channel."
          "List the qualities it has. List those you’d like."
          "Listen in total darkness."
          "Listen in a very large room, very quietly."
          "Listen to the quiet voice"
          "Look at a very small object, look at its centre."
          "Look at the order in which you do things."
          "Look closely at the most embarrassing details and amplify."
          "Lost in useless territory."
          "Lowest common denominator check: single beat; single note; single riff."
          "Magnify the most difficult details."
          "Make a blank valuable by putting it in an excquisite frame."
          "Make a sudden, destructive unpredictable action. Incorporate."
          "Make an exhaustive list of everything you might do and do the last thing on the list."
          "Make it more sensual."
          "Make it more banal."
          "Make what’s perfect more human."
          "Mechanize something idiosyncratic."
          "Move towards the impossible."
          "Move towards the unimportant."
          "Mute and continue."
          "Not building a wall but making a brick."
          "Once the search is in progress, something will be found."
          "Only a part, not the whole."
          "Only one element of each kind."
          "Overtly resist change."
          "Pae White’s non-blank graphic metacard."
          "Pay attention to distractions."
          "Picture of a man spotlighted."
          "Put in earplugs."
          "Question the heroic approach."
          "Rearrange."
          "Remember those quiet evenings."
          "Remove a restriction."
          "Remove ambiguities and convert to specifics."
          "Remove specifics and convert to ambiguities."
          "Remove the middle, extend the edges."
          "Repetition is a form of change."
          "Retrace your steps."
          "Revaluation (a warm feeling)."
          "Reverse."
          "Short circuit (example; a man eating peas with the idea that they will improve his virility shovels straight into his lap)."
          "Shut the door and listen from outside."
          "Simple subtraction."
          "Simply a matter of work."
          "Slow preparation, fast execution."
          "Spectrum analysis."
          "State the problem in words as simply as possible."
          "Steal a solution."
          "Take a break."
          "Take away as much mystery as possible. What is left?"
          "Take away the elements in order of apparent non-importance."
          "Take away the important parts."
          "Tape your mouth."
          "The inconsistency principle."
          "The most important thing is the thing most easily forgotten."
          "The tape is now the music."
          "Think inside the work."
          "Think outside the work."
          "Think of the radio."
          "Tidy up."
          "Towards the insignificant."
          "Trust in the you of now."
          "Try faking it."
          "Turn it upside down."
          "Twist the spine."
          "Use “unqualified” people."
          "Use an old idea."
          "Use an unacceptable color."
          "Use cliches."
          "Use fewer notes."
          "Use filters."
          "Use something nearby as a model."
          "Use your own ideas."
          "Voice your suspicions."
          "Water."
          "Fire."
          "Earth."
          "Wind."
          "Heart."
          "What are the sections sections of? (Imagine a caterpillar moving)."
          "What context would look right?"
          "What do you do? Now, what do you do best?"
          "What else is this like?"
          "What is the reality of the situation?"
          "What is the simplest solution?"
          "What mistakes did you make last time?"
          "What most recently impressed you? How is it similar? What can you learn from it? What could you take from it?"
          "What to increase? What to reduce? What to maintain?"
          "What were the branch points in the evolution of this entity?"
          "What were you really thinking about just now? Incorporate."
          "What would make this really successful?"
          "What would your closest friend do?"
          "What wouldn’t you do? Do that."
          "When is it for?"
          "When is it for? Who is it for?"
          "Who is it for?"
          "Where is the edge?"
          "Which parts can be grouped?"
          "Who would make this really successful?"
          "Work at a different speed."
          "Would anyone want it?"
          "You are an engineer."
          "You can only make one dot at a time."
          "You don’t have to be ashamed of using your own ideas."
          "Your mistake was a hidden intention.")
    "List of Oblique Strategies prompts.")

  (defun krisb-oblique-strategies--random (&optional n)
    "Return a random Oblique Strategies prompt.
  If N is non-nil, return a list of that many prompts.  If N is nil,
  default to 5."
    (let (prompts)
      (dotimes (i (or n 5))
        (push (seq-random-elt krisb-oblique-strategies-prompts) prompts))
      prompts))

  ;;;###autoload
  (defun krisb-oblique-strategies-select (&optional n)
    "Select a random Oblique Strategies prompt.
  The number of prompts available is N, which defaults to 5 if nil."
    (interactive "P")
    (let* ((n (or n 5))
           (prompts (krisb-oblique-strategies--random n)))
      (completing-read "Choose a prompt: " prompts nil t)))

  ;;;###autoload
  (defun krisb-oblique-strategies-insert (&optional select n)
    "Insert into the current buffer a random Oblique Strategies prompt.
  If SELECT is non-nil, use `krisb-oblique-strategies-select' to choose.
  The number of prompts available is N, which defaults to 5 if nil."
    (interactive "P")
    (let ((prompt (if select
                      (krisb-oblique-strategies-select n)
                    (car (krisb-oblique-strategies--random 1)))))
      (insert prompt)))

  ;;; Provide
  (provide 'krisb-oblique-strategies)
  ;;; krisb-oblique-strategies.el ends here
#+end_src

** =krisb-auto-completion.el=
:PROPERTIES:
:CUSTOM_ID: krisb-auto-completionel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-auto-completion.el"
  ;;; krisb-auto-completion.el --- Implementation of Oblique Strategies  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2025  Kristoffer Balintona
  ;;
  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: text, convenience
  ;;
  ;; This program is free software: you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke auto-completion configuration with external packages.

  ;;; Code:

  ;;;###autoload
  (define-minor-mode krisb-auto-completion-mode
    "Minor mode for my bespoke auto-completion setup.
  This minor mode enables functionality to enable an auto-completion
  setup.
  - Sets relevant variables completion-related packages.
  - Modifies `completion-at-point-functions' appropriately.
  - Modifies relevant minor mode keybindings.
  - DOES NOT enable or disable any modes.  The user must do so separately.

  Notably, this minor mode is designed to work in harmony with
  `completion-preview-mode' previews.

  NOTE: Disabling this minor mode does not revert these changes.

  See also
  https://github.com/minad/corfu?tab=readme-ov-file#orderless-completion
  for recommended corfu settings and usage with orderless."
    :lighter " Auto-C"
    ;; There is a notable, behavior with `corfu-separator': if the corfu
    ;; completions candidates are not shown yet, only through calling
    ;; `corfu-insert-separator' will they be shown.  They will not be shown by
    ;; inserting the character corresponding to the value of `corfu-separator'.
    ;; However, after the first invocation, regular insertions of that character
    ;; will be recognized as separators.
    (if krisb-auto-completion-mode
        (let ((sep " ")
              (min-symbol-length 2))
          (require 'completion-preview)
          (require 'corfu)
          (require 'orderless)

          (setq-local corfu-auto t
                      corfu-auto-delay 0.25
                      corfu-auto-prefix min-symbol-length
                      corfu-separator (string-to-char sep)
                      corfu-quit-at-boundary 'separator
                      corfu-quit-no-match 'separator
                      ;; This setup (particularly its keybinds) is designed to work in
                      ;; conjunction with `completion-preview-mode' in order to take advantage
                      ;; of its candidate previews
                      completion-preview-minimum-symbol-length min-symbol-length)

          ;; TODO 2025-03-26: Is there a more elegant solution?  Overwrite
          ;; `corfu-map' bindings buffer-locally.
          ;; Overwrite `corfu-map' `minibuffer-local-filename-syntax'
          (let ((map (make-sparse-keymap)))
            (set-keymap-parent map corfu-map)
            (bind-keys :map map
                       ;; `corfu-map' remaps `next-line' and `previous-line'; I
                       ;; undo the remapping
                       ([remap next-line] . nil)
                       ([remap previous-line] . nil)
                       ;; Have TAB do nothing
                       ("TAB" . nil)
                       ;; Rely on RET to insert and expand (`corfu-complete').  I
                       ;; prefer to use this and C-j to do the usual RET behavior
                       ("RET" . corfu-complete)
                       ;; Behave like "M-i" in
                       ;; `completion-preview-active-mode-map'
                       ("M-i" . corfu-expand))
            (setq-local corfu-map map))

          ;; Ensure `orderless-component-separator' matches `corfu-separator'
          (when (member 'orderless completion-styles)
            (setq-local orderless-component-separator sep))

          ;; These capfs are annoying with corfu auto-completion since there will
          ;; always be candidates, no matter what I type.  Ensure these are not in
          ;; the global value of `completion-at-point-functions'.
          (dolist (capf '(krisb-cape-super-capf--dict-dabbrev
                          cape-dabbrev))
            (remove-hook 'completion-at-point-functions capf t)))
      ;; TODO 2025-03-27: Can we do more to revert options, modes, etc. when
      ;; disabling?
      (dolist (var '(corfu-auto
                     corfu-auto-prefix
                     corfu-auto-delay
                     corfu-separator
                     corfu-quit-at-boundary
                     corfu-quit-no-match
                     corfu-map))
        (kill-local-variable var))))

  ;;; Provide
  (provide 'krisb-auto-completion)
  ;;; krisb-auto-completion.el ends here
#+end_src

** Packages
:PROPERTIES:
:CUSTOM_ID: packages
:END:

*** =pinching-margins.el=
:PROPERTIES:
:CUSTOM_ID: pinching-marginsel
:END:

#+begin_src emacs-lisp :tangle "lisp/pinching-margins.el"
  ;;; pinching-margins.el ---Center buffer contents    -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: extensions

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Like Centered-window and Perfect-margin. Expands left and right margins to
  ;; center buffer content visually.

  ;;; Code:
  (require 'cl-macs)

  ;;; Options
  (defgroup pinching-margins ()
    "Visually center buffer content."
    :group 'emacs
    :prefix "pinching-margins-")

  (defcustom pinching-margins-visible-width 128
    "The number of columns each window should be pinched to."
    :type 'number)

  (defcustom pinching-margins-ignore-predicates
    (list #'window-minibuffer-p
          (lambda (win)
            (with-selected-window win (bound-and-true-p olivetti-mode))))
    "Predicates to exclude certain windows."
    :type '(repeat function))

  (defcustom pinching-margins-force-predicates nil
    "Predicates to force including certain window."
    :type '(repeat function))

  ;;; Functions
  (defun pinching-margins--calculate-margins (win)
    "Return the margin widths for window WIN.
  The margin widths are returned as a cons cell whose car is the left
  margin's width and cdr is the right margin's width."
    (let ((width (round (max 0 (/ (- (window-total-width win) pinching-margins-visible-width) 2)))))
      (cons width width)))

  (defun pinching-margins--apply-p (win)
    "Determine whether the margins for window WIN should be applied.
  Returns t if so, and nil if not.  Returned value is based on
  `pinching-margins-force-predicates' and
  `pinching-margins-ignore-predicates'."
    (with-current-buffer (window-buffer win)
      (or (run-hook-with-args-until-success 'pinching-margins-force-predicates win)
          (not (run-hook-with-args-until-success 'pinching-margins-ignore-predicates win)))))

  (defun pinching-margins--set-win-margin (win)
    "Pinches margins of WIN if applicable.
  Application proceeds if `pinching-margins--apply-p' returns non-nil."
    (with-selected-window win
      (when (pinching-margins--apply-p win)
        (let ((margins (pinching-margins--calculate-margins win)))
          (set-window-margins win (car margins) (cdr margins))))))

  (defun pinching-margins--set-margins (&optional win)
    "Sets the margins for window WIN.
  Margin widths are determined by `pinching-margins--set-win-margin'."
    (cl-loop for win in (or win (window-list))
             do (pinching-margins--set-win-margin win)))

  (defun pinching-margins--window-splittable-p-advice (orig-fun window &optional horizontal)
    "Advice for `window-splittable-p' to temporarily remove margins when called.
  If WINDOW is not managed by pinched-margins or HORIZONTAL is nil, the
  function will not modify the margins and directly call ORIG-FUN."
    (if (or (not horizontal)
            (not (pinching-margins--apply-p window)))
        (funcall orig-fun window horizontal)
      (let ((margins (window-margins window)))
        (prog2
            (set-window-margins window 0 0)
            (funcall orig-fun window horizontal)
          (set-window-margins window (car margins) (cdr margins))))))

  ;;; Minor mode
  ;;;###autoload
  (define-minor-mode pinching-margins-mode
    "Auto center windows."
    :init-value nil
    :global t
    (if pinching-margins-mode
        ;; Add hook and activate
        (progn
          (advice-add 'window-splittable-p :around #'pinching-margins--window-splittable-p-advice)
          (add-hook 'window-configuration-change-hook #'pinching-margins--set-margins)
          (add-hook 'window-size-change-functions #'pinching-margins--set-margins)
          (pinching-margins--set-margins))
      ;; Remove hook and restore margin
      (advice-remove 'window-splittable-p #'pinching-margins--window-splittable-p-advice)
      (remove-hook 'window-configuration-change-hook #'pinching-margins--set-margins)
      (remove-hook 'window-size-change-functions #'pinching-margins--set-margins)
      ;; FIXME 2024-09-19: This only restores the currently visible windows. E.g.
      ;; `tab-bar' windows that are elsewhere aren't affected.
      (dolist (window (window-list))
        (when (pinching-margins--apply-p window)
          (set-window-margins window 0 0)))))

  ;;; Provide
  (provide 'pinching-margins)
  ;;; pinching-margins.el ends here
#+end_src

*** =krisb-reveal.el=
:PROPERTIES:
:CUSTOM_ID: krisb-revealel
:END:

#+begin_src emacs-lisp :tangle "lisp/krisb-reveal.el"
  ;;; krisb-reveal.el --- Convenience for opening outline and org headings  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Open the org or outline/outshine heading that contains point when needed.

  ;;; Code:
  (require 'cl-macs)

  ;;; Options
  (defgroup krisb-reveal nil
    "Reveal outline/outshine and org heading that contains point after command.
  Inspired by `pulsar--post-command-pulse'."
    :group 'convenience
    :prefix "krisb-reveal-")

  (defcustom krisb-reveal-fold-commands (list)
    "A list that determines arguments to pass to `krisb-reveal-fold'.
  This is a list of plists.

  Each plist requires the following properties:
  - :command -- A symbol representing a command after which `krisb-reveal-fold'
    should be invoked
  - :location -- A function (name or lambda expression) that returns a cons whose
    car is a point at which `krisb-reveal-fold' will be invoked and cdr is the
    buffer to invoke `krisb-reveal-fold' in.

  The following properties are optional:
  - :predicate -- A function (name or lambda expression) that, if returning nil,
    prevents `kris-reveal-fold' from being invoked after the command denoted by
    :command."
    :type '(repeat
            (plist :key-type (choice
                              (const :command)      ; Required
                              (const :location)     ; Required
                              (const :predicate))   ; Optional
                   :value-type (choice
                                (function :tag "Command")           ; For :command
                                (function :tag "Location function") ; For :location
                                (function :tag "Predicate function"))))) ; For :predicate)

  ;;; Functions
  (declare-function org-show-entry "org")
  (declare-function outline-show-entry "outline")

  ;;;###autoload
  (defun krisb-reveal-fold (&optional point buffer)
    "Reveal the outline/outshine or org heading at POINT in BUFFER.
  This function is like `pulsar-reveal-entry' but not just when point is
  at heading.

  This function assumes `krisb-reveal-mode' is non-nil.

  If POINT is nil, the current point in BUFFER will be assumed.  If BUFFER
  is nil, the current buffer will be assumed."
    (when (not krisb-reveal-mode)
      (cl-return))
    (with-current-buffer (or buffer (current-buffer))
      (goto-char (or point (point)))
      (cond
       ((eq major-mode 'org-mode)
        (org-show-entry))
       ((or (eq major-mode 'outline-mode)
            (bound-and-true-p outline-minor-mode))
        (outline-show-entry)))))

  ;; TODO 2024-10-24: Consider resolving aliases like
  ;; `pulsar--resolve-function-aliases'.
  (defun krisb-reveal--post-command ()
    "Maybe reveal fold at point.
  A \"fold\" is an outline, outshine, or org heading.  Folds are revealed
  if the `this-command' is one of the ones listed in
  `krisb-reveal-fold-commands'.  Revealing is achieved by
  `krisb-reveal-fold'.

  This function is meant to be added to `post-command-hook'.

  This function was inspired by `pulsar--post-command-pulse'."
    (dolist (plist (cl-remove-if-not
                    (lambda (plist)
                      (eq (plist-get plist :command) this-command))
                    krisb-reveal-fold-commands))
      (let ((predicate (plist-get plist :predicate)))
        (when (or (not predicate) (funcall predicate))
          (let* ((location (funcall (plist-get plist :location)))
                 (point (car location))
                 (buffer (cdr location)))
            (krisb-reveal-fold point buffer))))))

  ;;; Minor mode
  ;;;###autoload
  (define-minor-mode krisb-reveal-mode
    "Set up krisb-reveal for each command in `krisb-reveal-fold-commands'.
  This is a buffer-local mode.  Also check `krisb-reveal-global-mode'."
    :global nil
    (if krisb-reveal-mode
        (add-hook 'post-command-hook #'krisb-reveal--post-command nil 'local)
      (remove-hook 'post-command-hook #'krisb-reveal--post-command 'local)))

  ;;;###autoload
  (defun krisb-reveal--on ()
    "Enable `krisb-reveal-mode'."
    (unless (minibufferp)
      (let (inhibit-quit)
        (krisb-reveal-mode 1))))

  ;;;###autoload
  (define-globalized-minor-mode krisb-reveal-global-mode krisb-reveal-mode krisb-reveal--on)

  ;;; Provide
  (provide 'krisb-reveal)
  ;;; krisb-reveal.el ends here
#+end_src

*** =dungeons-and-dragons.el=
:PROPERTIES:
:CUSTOM_ID: dungeons-and-dragonsel
:END:

#+begin_src emacs-lisp :tangle "lisp/dungeons-and-dragons.el"
  ;;; dungeons-and-dragons-rcp.el --- Bespoke Dungeons and Dragons features  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; My custom configuration for playing Dungeons and Dragons.

  ;;; Code:

  ;;;; Bespoke keywords
  (with-eval-after-load 'org
    (defface kb/dnd-keywords-character
      '((((background light))
         :foreground "PaleVioletRed3")
        (((background dark))
         :foreground "PaleVioletRed1"))
      "Face for characters.")

    (defface kb/dnd-keywords-place
      '((((background light))
         :foreground "DeepSkyBlue")
        (((background dark))
         :foreground "DeepSkyBlue"))
      "Face for places.")

    (defface kb/dnd-keywords-designation
      '((((background light))
         :background "orange2")
        (((background dark))
         :background "orange1"))
      "Face for designations.")

    (defcustom kb/dnd-keywords
      '(("character" . kb/dnd-keywords-character)
        ("place" . kb/dnd-keywords-place)
        ("designation" . kb/dnd-keywords-designation))
      "Keywords used for for playing Dungeons and Dragons.
    Is an alist from keyword, as a string, to the foreground of the
    link whose path is that keyword.")

    (defface kb/dnd-faces-missing `((t :strike-through "red"))
      "Face used when keyword does not exist.
    Is the fallback face when using a keyword that does not exist in
    `kb/dnd-keywords.'")

    (defun kb/dnd-link-face (keyword)
      "Calculate face used with `dnd' org link type.
  KEYWORD is a string that should be present in `kb/dnd-keywords'.
  If not, uses the face denoted by `kb/dnd-faces-missing'.

  Used in `org-link-set-parameters'."
      (or (cdr (assoc keyword kb/dnd-keywords))
          'kb/dnd-faces-missing))

    (defun kb/dnd-link-complete (&optional _arg)
      "Function for completions with `dnd' org link type.
  Used in `org-link-set-parameters'."
      (concat "dnd:"
              (completing-read "Which keyword?: "
                               (s-split-words (key-description kb/dnd-keywords)))))

    (org-link-set-parameters "dnd"
                             :face #'kb/dnd-link-face
                             :complete #'kb/dnd-link-complete))

  (provide 'dungeons-and-dragons-rcp)
  ;;; dungeons-and-dragons-rcp.el ends here
#+end_src

* Local :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

#  LocalWords:  Vertico Minibuffer Todos Notmuch LocalWords Eshell config apheleia WSLg

# Local Variables:
# apheleia-inhibit: t
# eval: (add-hook 'before-save-hook 'org-make-toc)
# End:

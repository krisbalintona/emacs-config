#+title: Emacs configuration
#+author: Kristoffer Balintona
#+email: krisbalintona@gmail.com
#+language: en
#+options: num:t author:t email:t

* Emacs build
:PROPERTIES:
:VISIBILITY: folded
:END:

The following are the flags I prefer to compile Emacs with.
#+begin_src emacs-lisp :exports both
  system-configuration-options
#+end_src

#+RESULTS:
: --with-mailutils --with-pgtk --with-native-compilation --with-x-toolkit=gtk3 'CFLAGS=-O2 -pipe -march=native -fomit-frame-pointer'

* Initialization
:PROPERTIES:
:VISIBILITY: children
:END:

** =early-init.el=

Emacs 27 introduces early-init.el, which is run before init.el, before package and UI initialization happens.

*** Garbage collection

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Defer garbage collection
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Native compilation

#+begin_src emacs-lisp :tangle "early-init.el"
  ;;; Native-compilations settings
  ;; Basic settings
  (setq native-comp-jit-compilation t
        native-comp-async-report-warnings-errors 'silent ; Show in *Warnings*  buffer but don't show buffer
        native-comp-async-jobs-number
        (- (string-to-number (string-trim-right (shell-command-to-string "nproc"))) 1)) ; Use as many cores as possible

  ;; Make sure `eln-cache' is set. Sometimes gets set to .emacs.d directory,
  ;; meaning chemacs2 gets in the way.
  (unless (version-list-<
           (version-to-list emacs-version)
           '(28 0 1 0))
    (when (boundp 'native-comp-eln-load-path)
      (add-to-list 'native-comp-eln-load-path
                   (expand-file-name "eln-cache/" user-emacs-directory))))
#+end_src

*** Runtime optimizations

**** Doom Emacs' suggestions

All of the settings below are taken from Doom Emacs, whose developers have the know-how for smartly increasing startup performance.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;; I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;; say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;; reordering of bidirectional text with embedded parentheses (and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)               ; Emacs 27+ only

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; PGTK builds only: there's a timeout that adds latency to frame operations,
  ;; like `make-frame-invisible', which Emacs frequently calls without a guard
  ;; because it's inexpensive in non-PGTK builds. Lowering the timeout from the
  ;; default 0.1 should make childframes and packages that manipulate them (like
  ;; `lsp-ui', `company-box', and `posframe') feel much snappier. See
  ;; emacs-lsp/lsp-ui#613.
  (when (boundp 'pgtk-wait-for-event-timeout)
    (setq pgtk-wait-for-event-timeout 0.001))

  ;; NOTE 2024-09-16: From Doom Emacs.
  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)
#+end_src

**** Other optimizations

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-09-13: Suggested by "minimal emacs." By default, Emacs "updates"
  ;; its UI more often than it needs to
  (setq idle-update-delay 1.0)

  ;; I defer garbage collection until after starting Emacs. See my configuration
  ;; of `gcmh-mode'.
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Buffer encoding

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs.
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")
  ;; ...but `set-language-environment' also sets `default-input-method', which is
  ;; a step too opinionated.
  (setq default-input-method nil)
#+end_src

*** Graphical elements

This sets the default graphical element settings used by every frame.
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; NOTE 2024-10-03: From Doom Emacs. If we're disabling these graphical
  ;; elements, it's faster to do so before they've been initialized.
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because their manipulation of frame parameters can
  ;;   trigger/queue a superfluous (and expensive, depending on the window system)
  ;;   frame redraw at startup. The variables must be set to `nil' as well so
  ;;   users don't have to call the functions twice to re-enable them.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  ;; Frame defaults
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t
        frame-title-format '("%b")
        ring-bell-function 'ignore
        use-dialog-box t                  ; For mouse events
        use-file-dialog nil
        use-short-answers nil
        inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t     ; REVIEW 2024-10-03: Not sure the precise effect
        inhibit-startup-echo-area-message user-login-name ; Read the docstring
        inhibit-startup-buffer-menu t)
#+end_src

** =init.el=

*** Add modules and bespoke libraries to ~load-path~

#+begin_src emacs-lisp :tangle "init.el"
  (dolist (path (list (expand-file-name "modules" user-emacs-directory)
                      (expand-file-name "lisp" user-emacs-directory)))
    (add-to-list 'load-path path))
#+end_src

*** Initial scratch buffer

#+begin_src emacs-lisp :tangle "init.el"
  ;; Shave seconds off startup time by starting the scratch buffer in
  ;; `fundamental-mode'
  (setopt initial-major-mode 'fundamental-mode
          initial-scratch-message "Hello 👋")
#+end_src

*** Load libraries

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load libraries
  (require 'krisb-common)
  (require 'krisb-essentials)
  (require 'krisb-indentation)
#+end_src

*** Package configurations

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Packages
#+end_src

**** =package=
=Package.el= (henceforth =package=) is the built-in package manager for Emacs. =package= downloads packages into ~package-user-dir~ from online package archives (defined in ~package-archives~). Every package download creates a directory in ~package-user-dir~ that holds that package files and whose name is the package followed by the version downloaded. The version downloaded depends on ~package-archive-priorities~: =package= will download from the highest priority archive that offers the desired package. Additionally, users can "pin" packages to a particular version via ~package-pinned-packages~.[fn:1]

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Package.el
  ;; Initialize package resources
  (setopt package-archives '(("gnu-elpa" . "https://elpa.gnu.org/packages/")
                             ("gnu-elpa-devel" . "https://elpa.gnu.org/devel/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))
          package-archive-priorities '(("gnu-elpa" . 4)
                                       ("melpa" . 3)
                                       ("nongnu" . 2)
                                       ("gnu-elpa-devel" . 1))
          package-install-upgrade-built-in t
          package-pinned-packages nil)

  (setopt load-prefer-newer t) ; Do not load outdated byte code files
#+end_src

[fn:1] Those who utilize =use-package= can use the convenient ~:pin~ keyword instead of modifying ~package-pinned-packages~ direcctly.

**** =use-package=
Releases of Emacs 29.1 and above come with =use-package= built-in. =use-package= offers an array of easy-to-use user-facing macros for setting user options, adding hooks, controlling the loading packages (order, lazily, dependencies, etc.), and setting keybindings (via =bind-key=).

Uncommonly known are the commands =use-package= offers that help users debug and introspect the loading of their packages. The following is a non-exhaustive list:
+ ~use-package-jump-to-package-form~ :: Prompts the user for a package configured using use-package and jumps to its corresponding use-package declaration. Useful for navigating a large =.init.el= or many small config files.
+ ~use-package-lint~ :: Reports any syntax errors in use-package declarations in the current buffer.
+ ~use-package-report~ :: Show statistics about all your use--package declarations. Requires ~use-package-compute-statistics~ to be non-nil.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Although `use-package' is built-in starting Emacs 29.1, I should make sure
  ;; it's installed just in case I test/use an earlier Emacs version
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setopt use-package-always-ensure t
          use-package-expand-minimally t  ; Verbosity of use-package macro
          use-package-always-defer nil)

  ;; Only be verbose when interpreted, otherwise errors are caught at compile time
  (setopt use-package-verbose (not (bound-and-true-p byte-compile-current-file)))

  ;; Compile statistics to be shown in `use-package-report'
  (setopt use-package-compute-statistics t)
#+end_src

**** =no-littering=

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set better default package paths
  (use-package no-littering
    :init
    ;; Set these variables prior to loading the feature
    (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory) ; Config files
          no-littering-var-directory (expand-file-name "var/" user-emacs-directory)) ; Persistent files
    :config
    ;; Ensure the directories exist
    (mkdir no-littering-etc-directory t)
    (mkdir no-littering-var-directory t)

    ;; Read docstring. Sets more secure values for
    ;; `auto-save-file-name-transforms', `backup-directory-alist', and
    ;; `undo-tree-history-directory-alist'.
    (no-littering-theme-backups))
#+end_src

**** =on=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; On
  ;; Package exposes a number of utility hooks and functions ported from Doom
  ;; Emacs. The hooks make it easier to speed up Emacs startup by providing
  ;; finer-grained control of the timing at which packages are loaded. Provides
  ;; the following hooks:
  ;; - on-first-input-hook
  ;; - on-init-ui-hook
  ;; - on-first-file-hook
  ;; - on-switch-frame-hook
  ;; - on-first-buffer-hook
  ;; - on-switch-buffer-hook
  ;; - on-switch-window-hook
  (use-package on)
#+end_src

**** =system-packages=

#+begin_src emacs-lisp :tangle "init.el"
  ;;; System-packages
  ;; Install system packages via Emacs. Necessary for use-package's
  ;; `:ensure-system-package' flag
  (use-package system-packages
    :custom
    (system-packages-noconfirm nil)
    :config
    (when (executable-find "paru")
      (add-to-list 'system-packages-supported-package-managers
                   '(paru . ((default-sudo . nil)
                             (install . "paru -S")
                             (search . "paru -Ss")
                             (uninstall . "paru -Rns")
                             (update . "paru -Syu")
                             (clean-cache . "paru -Sc")
                             (change-log . "paru -Qc")
                             (log . "cat /var/log/paru.log")
                             (get-info . "paru -Qi")
                             (get-info-remote . "paru -Si")
                             (list-files-provided-by . "paru -qQl")
                             (owning-file . "paru -Qo")
                             (owning-file-remote . "paru -F")
                             (verify-all-packages . "paru -Qkk")
                             (verify-all-dependencies . "paru -Dk")
                             (remove-orphaned . "paru -Rns $(paru -Qtdq)")
                             (list-installed-packages . "paru -Qe")
                             (list-installed-packages-all . "paru -Q")
                             (list-dependencies-of . "paru -Qi")
                             (noconfirm . "--noconfirm"))))
      (setq system-packages-package-manager 'paru
            system-packages-use-sudo nil)))
#+end_src

**** =enlight=
#+begin_src emacs-lisp :tangle "init.el"
  ;;; Enlight
  ;; Easily create simple startup screens
  (use-package enlight
    :hook (after-init . enlight-open)
    :custom
    (enlight-content
     (concat
      (grid-get-box `( :align center
                       :width 80
                       :content
                       ;; Art generated by
                       ;; https://www.patorjk.com/software/taag/#p=display&f=Isometric1&t=emacs
                       ,(propertize
                         "      ___           ___           ___           ___           ___
       /\\  \\         /\\__\\         /\\  \\         /\\  \\         /\\  \\
      /::\\  \\       /::|  |       /::\\  \\       /::\\  \\       /::\\  \\
     /:/\\:\\  \\     /:|:|  |      /:/\\:\\  \\     /:/\\:\\  \\     /:/\\ \\  \\
    /::\\~\\:\\  \\   /:/|:|__|__   /::\\~\\:\\  \\   /:/  \\:\\  \\   _\\:\\~\\ \\  \\
   /:/\\:\\ \\:\\__\\ /:/ |::::\\__\\ /:/\\:\\ \\:\\__\\ /:/__/ \\:\\__\\ /\\ \\:\\ \\ \\__\\
   \\:\\~\\:\\ \\/__/ \\/__/~~/:/  / \\/__\\:\\/:/  / \\:\\  \\  \\/__/ \\:\\ \\:\\ \\/__/
    \\:\\ \\:\\__\\         /:/  /       \\::/  /   \\:\\  \\        \\:\\ \\:\\__\\
     \\:\\ \\/__/        /:/  /        /:/  /     \\:\\  \\        \\:\\/:/  /
      \\:\\__\\         /:/  /        /:/  /       \\:\\__\\        \\::/  /
       \\/__/         \\/__/         \\/__/         \\/__/         \\/__/    "
                         'face 'modus-themes-fg-yellow-intense)))
      "\n\n"
      (grid-get-box
       `( :align center
          :width 80
          :content ,(enlight-menu
                     '(("Configs"
                        ("Emacs" (project-switch-project user-emacs-directory) "e")
                        ("Dotfiles" (project-switch-project "~/dotfies/") "d"))
                       ("Other"
                        ("Projects" project-switch-project "p")
                        ("Email" notmuch "n"))))))))
    :init
    ;; For more complex layouts, as recommended by the README
    (use-package grid
      :autoload (grid-get-box grid-get-row grid-get-column)
      :vc (:url "https://github.com/ichernyshovvv/grid.el")))
#+end_src
**** Load modules

#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Modules
  (require 'krisb-garbage-collection)
  (require 'krisb-system-env)
  (require 'krisb-essentials)
  (require 'krisb-themes)
  (require 'krisb-fonts)
  (require 'krisb-mode-line)

  (require 'krisb-saving-state)
  (require 'krisb-persistence)
  (require 'krisb-completion)
  (require 'krisb-expansion)
  (require 'krisb-windows)
  (require 'krisb-navigation)

  (require 'krisb-prose)
  (require 'krisb-org)
  (require 'krisb-org-agenda)
  (require 'krisb-org-export)
  (require 'krisb-denote)
  (require 'krisb-citations)

  (require 'krisb-pdfs)
  (require 'krisb-web-annotations)

  (require 'krisb-programming)
  (require 'krisb-vc)
  (require 'krisb-projects)
  (require 'krisb-flymake)
  (require 'krisb-elisp)
  (require 'krisb-info)

  (require 'krisb-email-composition)
  (require 'krisb-notmuch)

  (require 'krisb-mermaid)

  (require 'krisb-web)
  (require 'krisb-directories)
#+end_src

*** Load ~custom-file~

#+begin_src emacs-lisp :tangle "init.el"
  ;;; Load custom file
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Modules
:PROPERTIES:
:VISIBILITY: children
:END:

** Base

*** =krisb-garbage-collection.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-garbage-collection.el"
  ;; NOTE 2024-02-11: Please reference https://emacsconf.org/2023/talks/gc/ for a
  ;; statistically-informed recommendation for GC variables
  (setq garbage-collection-messages t)
  (setq gc-cons-percentage 0.15)

  ;;; GCMH
  ;; Garbage collect on when idle
  (use-package gcmh
    :diminish
    :hook ((after-init . gcmh-mode)
           (minibuffer-setup . krisb-gcmh-minibuffer-setup)
           (minibuffer-exit . krisb-gcmh-minibuffer-exit))
    :custom
    ;; For a related discussion, see
    ;; https://www.reddit.com/r/emacs/comments/bg85qm/comment/eln27qh/?utm_source=share&utm_medium=web2x&context=3
    (gcmh-high-cons-threshold (* 16       ; 16 mb, as Doom uses in doom-start.el
                                 1024 1024))
    (gcmh-idle-delay 3)
    (gcmh-verbose nil)
    :config
    (setq garbage-collection-messages nil)

    ;; Increase GC threshold when in minibuffer
    (defvar krisb-gc-minibuffer--original gcmh-high-cons-threshold
      "Temporary variable to hold `gcmh-high-cons-threshold'")

    (defun krisb-gcmh-minibuffer-setup ()
      "Temporarily have \"limitless\" `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-setup] Increasing GC threshold")
      (setq gcmh-high-cons-threshold most-positive-fixnum))

    (defun krisb-gcmh-minibuffer-exit ()
      "Restore value of `gc-cons-threshold'."
      ;; (message "[krisb-gcmh-minibuffer-exit] Restoring GC threshold")
      (setq gcmh-high-cons-threshold krisb-gc-minibuffer--original))

    ;; Increase `gc-cons-threshold' while using corfu, like we do for the
    ;; minibuffer
    (with-eval-after-load 'corfu
      (advice-add 'completion-at-point :before 'krisb-gcmh-minibuffer-setup)
      (advice-add 'corfu-quit :before 'krisb-gcmh-minibuffer-exit)
      (advice-add 'corfu-insert :before 'krisb-gcmh-minibuffer-exit)))

  ;;; Diagnose memory usage
  ;; See how Emacs is using memory. From
  ;; https://www.reddit.com/r/emacs/comments/ck4zb3/comment/evji1n7/?utm_source=share&utm_medium=web2x&context=3
  (defun krisb-diagnose-garbage-collect ()
    "Run `garbage-collect' and print stats about memory usage."
    (interactive)
    (message (cl-loop for (type size used free) in (garbage-collect)
                      for used = (* used size)
                      for free = (* (or free 0) size)
                      for total = (file-size-human-readable (+ used free))
                      for used = (file-size-human-readable used)
                      for free = (file-size-human-readable free)
                      concat (format "%s: %s + %s = %s\n" type used free total))))

  ;;; Emacs-gc-stats
  ;; Collect GC statistics. Requested by someone who'd like GC statistics:
  ;; https://www.reddit.com/r/emacs/comments/14dej62/please_help_collecting_statistics_to_optimize/.
  ;; Also see https://elpa.gnu.org/packages/emacs-gc-stats.html
  (use-package emacs-gc-stats
    :disabled t                           ; Dont collecting data
    :hook (on-first-input . emacs-gc-stats-mode)
    :custom
    ;; Optionally reset Emacs GC settings to default values (recommended)
    (emacs-gc-stats-gc-defaults 'emacs-defaults)
    (emacs-gc-stats-remind (* 7))  ; Optionally set reminder to upload the stats
    (emacs-gc-stats-inhibit-command-name-logging nil))

  ;;; Provide
  (provide 'krisb-garbage-collection)
#+end_src

*** =krisb-system-env.el=

#+begin_src emacs-lisp :tangle "modules/krisb-system-env.el"
  ;;; Exec-path-from-shell
  ;; Ensure Emacs' and system shell have same path
  (use-package exec-path-from-shell
    :custom
    (exec-path-from-shell-variables
     '("PATH" "MANPATH" "BROWSER"
       ;; Language paths
       "GOPATH"
       ;; `ssh-agent' environment variables. See
       ;; https://wiki.archlinux.org/title/SSH_keys#Start_ssh-agent_with_systemd_user
       "SSH_AGENT_PID" "SSH_AUTH_SOCK"
       ;; For LSP-mode. See
       ;; https://emacs-lsp.github.io/lsp-mode/page/performance/#use-plists-for-deserialization
       "LSP_USE_PLISTS"))
    :config
    (exec-path-from-shell-initialize)

    ;; For npm. Found here:
    ;; https://www.reddit.com/r/emacs/comments/s6zkb6/comment/ht794j7/?utm_source=share&utm_medium=web2x&context=3
    (when (eq (length (getenv "NODE_PATH")) 0)
      (setenv "NODE_PATH" "/usr/local/lib/node_modules")))

  ;;; Provide
  (provide 'krisb-system-env)
#+end_src

*** =krisb-essentials.el=

**** Preamble

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; krisb-essentials.el --- Essential Emacs-wide settings  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Setting general user options.

  ;;; Code:
#+end_src

**** Customize and customize buffers

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Customize
  (setopt custom-file (no-littering-expand-etc-file-name "custom.el")
          custom-safe-themes t
          custom-theme-allow-multiple-selections t
          custom-unlispify-tag-names nil
          custom-buffer-style 'links
          custom-search-field nil)
#+end_src

**** Scrolling behavior

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Scrolling
  (setopt scroll-error-top-bottom nil
          scroll-preserve-screen-position t
          scroll-margin 0
          next-screen-context-lines 6
          scroll-minibuffer-conservatively t
          scroll-conservatively 1         ; Affects `scroll-step'
          scroll-up-aggressively nil      ; Center after point leaves window?
          scroll-down-aggressively nil)   ; Center after point leaves window?

  ;;;;; Font locking
  (setopt jit-lock-defer-time 0
          ;; NOTE 2024-09-16: The below are used by Doom Emacs.
          ;; These are the three ways to increase scrolling performance.
          ;; See (info "(emacs) Scrolling") for details. Introduced in Emacs HEAD
          ;; (b2f8c9f), this inhibits fontification while receiving input, which should
          ;; help a little with scrolling performance.
          redisplay-skip-fontification-on-input t
          ;; More performant rapid scrolling over unfontified regions. May cause
          ;; brief spells of inaccurate syntax highlighting right after scrolling,
          ;; which should quickly self-correct.
          fast-but-imprecise-scrolling t)
#+end_src

**** Commands

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Commands
  ;;;; Restart or close Emacs
  (defun krisb-restart-or-kill-emacs (&optional arg restart)
    "Kill Emacs.
  If called with RESTART (`universal-argument’ interactively) restart
  Emacs instead. Passes ARG to `save-buffers-kill-emacs'."
    (interactive "P")
    (save-buffers-kill-emacs arg (or restart (equal arg '(4)))))
  (bind-key [remap save-buffers-kill-terminal] #'krisb-restart-or-kill-emacs)

  ;;;; Scrolling
  (bind-keys
   ("C-M-S-s-p" . scroll-down-line)
   ("C-M-S-s-n" . scroll-up-line))

  ;;;; Joining lines
  (defun krisb-open-line-above-goto ()
    "Insert an empty line above the current line.
  Position the cursor at it's beginning, according to the current
  mode. Credit to
  https://emacsredux.com/blog/2013/06/15/open-line-above/"
    (interactive)
    (beginning-of-line)
    (newline)
    (previous-line)
    (indent-according-to-mode))

  (defun krisb-open-line-below-goto ()
    "Insert an empty line after the current line.
  Position the cursor at its beginning, according to the current mode.
  Credit to https://emacsredux.com/blog/2013/03/26/smarter-open-line/"
    (interactive)
    (move-end-of-line nil)
    (newline-and-indent))

  (defun krisb-join-line-above ()
    "Join the current line with the line above."
    (interactive)
    (save-excursion (delete-indentation))
    (when (string-match-p "\\`\\s-*$" (thing-at-point 'line))
      (funcall indent-line-function)))

  (defun krisb-join-line-below ()
    "Join the current line with the line below."
    (interactive)
    (save-excursion (delete-indentation t))
    (when (bolp)
      (funcall indent-line-function)))

  (bind-keys
   ("C-S-p" . krisb-open-line-above-goto)
   ("C-S-n" . krisb-open-line-below-goto)
   ("C-S-k" . krisb-join-line-above)
   ("C-S-j" . krisb-join-line-below))

  ;;;; Empty trash
  (defun krisb-empty-trash ()
    "Empty the trash directory."
    (interactive)
    (when delete-by-moving-to-trash
      (save-window-excursion (async-shell-command (concat "rm -rf " trash-directory)))))

  ;;;; Remove all advice from a function
  ;; Thanks to
  ;; https://emacs.stackexchange.com/questions/24657/unadvise-a-function-remove-all-advice-from-it
  (defun krisb-advice-unadvice (sym)
    "Remove all advices from symbol SYM."
    (interactive "aFunction symbol: ")
    (advice-mapc (lambda (advice _props)
                   (advice-remove sym advice))
                 sym))

  ;;;; Delete this file
  (defun krisb-delete-this-file (&optional path force-p)
    "Delete PATH, kill its buffers and expunge it from vc/magit cache.
    If PATH is not specified, default to the current buffer's file.

    If FORCE-P, delete without confirmation."
    (interactive
     (list (buffer-file-name (buffer-base-buffer))
           current-prefix-arg))
    (let* ((path (or path (buffer-file-name (buffer-base-buffer))))
           (short-path (abbreviate-file-name path)))
      (unless (and path (file-exists-p path))
        (user-error "Buffer is not visiting any file"))
      (unless (file-exists-p path)
        (error "File doesn't exist: %s" path))
      (unless (or force-p (y-or-n-p (format "Really delete %S? " short-path)))
        (user-error "Aborted"))
      (let ((buf (current-buffer)))
        (unwind-protect
            (progn (delete-file path) t)
          (if (file-exists-p path)
              (error "Failed to delete %S" short-path)
            ;; ;; Ensures that windows displaying this buffer will be switched to
            ;; ;; real buffers (`doom-real-buffer-p')
            ;; (doom/kill-this-buffer-in-all-windows buf t)
            ;; (doom--update-files path)
            (kill-this-buffer)
            (message "Deleted %S" short-path))))))
  (bind-key "D" #'krisb-delete-this-file 'krisb-file-keymap)

  ;;;; Yank current buffer's file-path
  (defun krisb-yank-buffer-filename ()
    "Copy the current buffer's path to the kill ring."
    (interactive)
    (if-let ((filename (or buffer-file-name list-buffers-directory)))
        (progn (kill-new filename)
               (message "Copied %s" filename))
      (error "Couldn't find filename in current buffer")))
  (bind-key "w" #'krisb-yank-buffer-filename 'krisb-file-keymap)
#+end_src

**** Minor modes

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Minor modes
  ;;;; Recognize camel case as words
  (global-subword-mode 1)

  ;;;; Repeat-mode
  (repeat-mode 1)

  ;;;; Delete-selection-mode
  ;; When selecting text, if typing new text, replace the selected text with the
  ;; new text
  (delete-selection-mode t)

  ;;;; Show context menu from right-click
  (when (display-graphic-p)
    (context-menu-mode 1))

  ;;;; Avoid collision of mouse with point
  (mouse-avoidance-mode 'jump)

  ;;;; Find-funtion-mode
  ;; Binds useful commands for jumping to variables, functions, and libraries
  (find-function-mode 1)

  ;;;; Visual-line-mode in *Messages* buffer
  (add-hook 'messages-buffer-mode-hook #'visual-line-mode)

  ;;;; Undo frame deletions
  (undelete-frame-mode 1)

  ;;;; So-long-mode everywhere
  (global-so-long-mode 1)

  ;;;; Show a default value only when default is applicable
  (minibuffer-electric-default-mode 1)
#+end_src

**** Miscellaneous

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  ;;; Miscellaneous
  ;;;; Enable all disabled commands
  (setopt disabled-command-function nil)

  ;;;; Stretch cursor to the glyph width
  (setopt x-stretch-cursor t)

  ;;;; Middle-click pastes at point, not at mouse
  (setopt mouse-yank-at-point t)

  ;;;; More leeway for Emacs subprocesses
  ;; Let Emacs subprocesses read more data per chunk
  (setopt read-process-output-max (* 4 1024 1024)) ; 4mb
  ;; Recommend here
  ;; https://www.reddit.com/r/emacs/comments/17nl7cw/comment/k7u1ueu/?utm_source=share&utm_medium=web2x&context=3
  (setopt process-adaptive-read-buffering nil)

  ;;;; Don't do anything with inactive mark
  (setopt mark-even-if-inactive nil)

  ;;;; Strategy for uniquifying buffer names
  (setopt uniquify-buffer-name-style 'post-forward)

  ;;;; Don't show "obsolete" byte-compile warnings
  (setopt byte-compile-warnings (remove 'obsolete byte-compile-warning-types))

  ;;;; Enable `view-mode' when calling `read-only-mode'
  (setopt view-read-only t)

  ;;;; Behavior for `cycle-spacing-actions'
  ;; Read the docstring for an explanation (or try it out!)
  (setopt cycle-spacing-actions '(just-one-space (delete-all-space -) restore))

  ;;;; Word wrapping
  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)

  ;;;; Repeatedly pop mark with C-u SPC
  (setopt set-mark-command-repeat-pop t)

  ;;;; Default fill column
  (setq-default fill-column 80)

  ;;;; Insert spaces instead of tab characters
  (setq-default indent-tabs-mode nil)

  ;;;; Trash
  (setq-default trash-directory (no-littering-expand-var-file-name "trash")
                delete-by-moving-to-trash t)

  ;;;; Don't create lock files
  (setopt create-lockfiles nil)

  ;;;; Confirm to kill emacs
  (setopt confirm-kill-emacs 'y-or-n-p)

  ;;;; Don’t warn when advising
  (setopt ad-redefinition-action 'accept)

  ;;;; Double space delimits end of sentence?
  (setq-default sentence-end-double-space nil)
  (add-hook 'prog-mode-hook (lambda () (setq-local sentence-end-double-space t)))
  (add-hook 'conf-mode-hook (lambda () (setq-local sentence-end-double-space t)))

  ;;;; Keep the cursor out of the read-only portions of the minibuffer
  (setq minibuffer-prompt-properties
        '(read-only t intangible t cursor-intangible t face
                    minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;;;; Allow minibuffer commands in minibuffer
  (setq enable-recursive-minibuffers t)

  ;;;; Ignore case basically everywhere
  (setq read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)
  (setq-default case-fold-search t)

  ;;;; `indent-for-tab-command' functionality.
  (setopt tab-always-indent 'complete
          tab-first-completion 'word)

  ;;;; Duplicate-dwim binding
  (bind-key "C-x ;" #'duplicate-dwim)
  (setopt duplicate-line-final-position 0
          duplicate-region-final-position 1)

  ;;;; Rebind case commands
  ;; Remap these defaults; they are effectively the same while phasing out the
  ;; need the *-region binds
  (bind-keys
   ([remap upcase-word] . upcase-dwim)
   ([remap downcase-word] . downcase-dwim)
   ([remap capitalize-word] . capitalize-dwim))

  ;;;; Echo unfinished keystrokes quicker
  ;; Echo keystrokes (of unfinished commands) much quicker
  (setopt echo-keystrokes 0.5)
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-essentials.el"
  (provide 'krisb-essentials)
  ;;; krisb-essentials.el ends here
#+end_src

*** =krisb-completion.el=

**** Built-in

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Minibuffer
  (use-package minibuffer
    :ensure nil
    :custom
    (completion-cycle-threshold nil)
    (completion-lazy-hilit t)             ; Lazy highlighting; added Emacs 30.1
    (completion-auto-select 'second-tab)
    (completions-max-height 20)
    (completion-ignore-case t)
    (completion-flex-nospace t)
    (minibuffer-default-prompt-format " [%s]") ; Format of portion for default value

    ;; Completions buffer
    (completions-format 'one-column)
    (completions-detailed t) ; Show more details in completion minibuffer (inspired by `marginalia')
    (completions-group t)    ; Groups; Emacs 28

    ;; Category settings. A non-exhaustve list of known completion categories:
    ;; - `bookmark'
    ;; - `buffer'
    ;; - `charset'
    ;; - `coding-system'
    ;; - `color'
    ;; - `command' (e.g. `M-x')
    ;; - `customize-group'
    ;; - `environment-variable'
    ;; - `expression'
    ;; - `face'
    ;; - `file'
    ;; - `function' (the `describe-function' command bound to `C-h f')
    ;; - `info-menu'
    ;; - `imenu'
    ;; - `input-method'
    ;; - `kill-ring'
    ;; - `library'
    ;; - `minor-mode'
    ;; - `multi-category'
    ;; - `package'
    ;; - `project-file'
    ;; - `symbol' (the `describe-symbol' command bound to `C-h o')
    ;; - `theme'
    ;; - `unicode-name' (the `insert-char' command bound to `C-x 8 RET')
    ;; - `variable' (the `describe-variable' command bound to `C-h v')
    ;; - `consult-grep'
    ;; - `consult-isearch'
    ;; - `consult-kmacro'
    ;; - `consult-location'
    ;; - `embark-keybinding'
    (completion-category-defaults
     '((buffer (styles . (basic substring)))
       (unicode-name (styles . (basic substring)))
       (project-file (styles . (substring)))
       (xref-location (styles . (substring)))
       (info-menu (styles . (basic substring)))
       (symbol-help (styles . (basic shorthand substring)))
       (calendar-month (display-sort-function . identity))))
    (completion-category-overrides
     '((file (styles . (basic partial-completion flex))) ; Include `partial-completion' to enable wildcards and partial paths.
       (citar-candidate (styles basic substring)))))

  ;;; Crm
  (use-package crm
    :ensure nil
    :config
    ;; Add prompt indicator to `completing-read-multiple'. We display
    ;; [CRM<separator>], e.g., [CRM,] if the separator is a comma. Taken from
    ;; https://github.com/minad/vertico
    (defun krisb-crm-indicator (args)
      (cons (format "[completing-read-multiple: %s]  %s"
                    (propertize
                     (replace-regexp-in-string
                      "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                      crm-separator)
                     'face 'error)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'krisb-crm-indicator))
#+end_src

**** Accessories

Enhancements to all built-in-based completions.
#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Marginalia
  ;; Enable richer annotations in minibuffer (companion package of consult.el)
  (use-package marginalia
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    (marginalia-field-width 80)
    (marginalia-align-offset -2)          ; Two to the left
    :config
    (marginalia-mode 1))

  ;;; Nerd-icons-completion
  ;; Use nerd-icons in completing-read interfaces. An alternative would be
  ;; all-the-icons-completion which uses all-the-icons -- I prefer nerd-icons.
  (use-package nerd-icons-completion
    :demand t
    :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
    :config
    (nerd-icons-completion-mode 1))

  ;;; Prescient
  ;; Sorting and filtering of minibuffer candidates. The difference between
  ;; `orderless' and this package is that `orderless' filters but does not sort -
  ;; it leaves that up to the "candidate source and the completion UI."
  ;; Additionally, `orderless' has style "dispatchers," i.e., I can define
  ;; predicates for what filtering style to use for which token
  (use-package prescient
    :custom
    ;; (completion-styles '(prescient flex))
    ;; NOTE 2024-02-03: Flex is chosen as a backup in case nothing in prescient is
    ;; matched, which only happens if I'm clueless about what I'm searching for.
    ;; We prefer this over adding the fuzzy matching in `prescient-filter-method'
    ;; because we don't want a bunch of random results included in the filtered
    ;; prescient results and cluttering it
    (prescient-filter-method '(literal initialism regexp))
    (prescient-aggressive-file-save t)
    (prescient-sort-full-matches-first t)
    (prescient-history-length 200)
    (prescient-frequency-decay 0.997)
    (prescient-frequency-threshold 0.05)
    :config
    (prescient-persist-mode 1))

  ;;; Orderless
  ;; Alternative and powerful completion style (i.e. filters candidates)
  (use-package orderless
    :custom
    (completion-styles '(orderless flex))
    (orderless-matching-styles
     '(orderless-regexp
       orderless-prefixes
       orderless-initialism
       ;; orderless-literal
       ;; orderless-flex
       ;; orderless-without-literal          ; Recommended for dispatches instead
       ))
    (orderless-component-separator 'orderless-escapable-split-on-space)
    (orderless-style-dispatchers '(krisb-orderless-consult-dispatch))
    :config
    ;; Eglot forces `flex' by default.
    (add-to-list 'completion-category-overrides '(eglot (styles . (orderless flex))))

    ;; Taken from Doom
    (defun krisb-orderless-consult-dispatch (pattern _index _total)
      "Basically `orderless-affix-dispatch-alist' but with prefixes too."
      (cond
       ;; Ensure $ works with Consult commands, which add disambiguation suffixes
       ((string-suffix-p "$" pattern)
        `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
       ;; Ignore single !
       ((string= "!" pattern) `(orderless-literal . ""))
       ;; Without literal
       ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
       ((string-suffix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1 -1)))
       ;; Character folding
       ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
       ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
       ;; Initialism matching
       ((string-prefix-p "," pattern) `(orderless-initialism . ,(substring pattern 1)))
       ((string-suffix-p "," pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
       ;; Literal matching
       ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
       ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
       ;; Flex matching
       ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
       ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1))))))
#+end_src

**** Minibuffer completion

***** Vertico

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Vertico
  ;;;; Itself
  (use-package vertico
    :pin gnu-elpa-devel
    :bind ("C-M-s-." . vertico-repeat)
    :hook (minibuffer-setup . vertico-repeat-save)
    :custom
    (vertico-count 13)
    (vertico-resize 'grow-only)
    (vertico-cycle nil)
    :init
    (vertico-mode 1)
    :config
    (require 'krisb-vertico))

  ;;;; Vertico-directory
  ;; More convenient path modification commands
  (use-package vertico-directory
    :requires vertico
    :ensure nil
    :bind ( :map vertico-map
            ("RET" . vertico-directory-enter)
            ("DEL" . vertico-directory-delete-char)
            ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  ;;;; Vertico-multiform
  (use-package vertico-multiform
    :requires vertico
    :ensure nil
    :custom
    (vertico-multiform-categories
     '(;; (consult-grep buffer)
       ;; (imenu buffer)
       (buffer (vertico-sort-function . nil))
       (citar (vertico-sort-function . vertico-sort-history-alpha))))
    (vertico-multiform-commands
     '((pdf-view-goto-label (vertico-sort-function . nil))
       (".+-history" (vertico-sort-function . nil))))
    :config
    (vertico-multiform-mode 1))

  ;;;; Vertico-buffer
  (use-package vertico-buffer
    :requires vertico
    :ensure nil
    :custom
    (vertico-buffer-hide-prompt nil)
    (vertico-buffer-display-action '(display-buffer-reuse-window)))

  ;;;; Vertico-prescient
  (use-package vertico-prescient
    :requires prescient
    :after vertico
    :custom
    ;; Sorting
    (vertico-prescient-enable-sorting t)
    (vertico-prescient-override-sorting nil)

    ;; Filtering. Below only applies when `vertico-prescient-enable-filtering' is
    ;; non-nil
    (vertico-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (vertico-prescient-completion-styles '(prescient flex))
    ;; Only set if `vertico-prescient-enable-filtering' is non-nil. See also
    ;; `prescient--completion-recommended-overrides'
    (vertico-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (vertico-prescient-mode 1))
#+end_src

**** Inline completion

***** Corfu

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;;; Corfu
  ;; Faster, minimal, and more lightweight autocomplete that is more faithful to
  ;; the Emacs infrastructure
  ;;;;; Itself
  (use-package corfu
    :demand t
    :bind ( :map corfu-map
            ("M-d" . corfu-info-documentation))
    :custom
    (corfu-auto nil) ; REVIEW 2024-09-20: Perhaps try https://github.com/minad/corfu?tab=readme-ov-file#auto-completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.25)
    (corfu-on-exact-match 'insert)

    (corfu-min-width 80)
    (corfu-max-width corfu-min-width)     ; Always have the same width
    (corfu-count 14)
    (corfu-scroll-margin 4)
    (corfu-cycle nil)

    ;; `nil' means to ignore `corfu-separator' behavior, that is, use the older
    ;; `corfu-quit-at-boundary' = nil behavior. Set this to separator if using
    ;; `corfu-auto' = `t' workflow (in that case, make sure you also set up
    ;; `corfu-separator' and a keybind for `corfu-insert-separator', which my
    ;; configuration already has pre-prepared). Necessary for manual corfu usage with
    ;; orderless, otherwise first component is ignored, unless `corfu-separator'
    ;; is inserted.
    (corfu-quit-at-boundary nil)
    (corfu-separator ?\s)            ; Use space
    (corfu-quit-no-match 'separator) ; Don't quit if there is `corfu-separator' inserted
    (corfu-preview-current t)
    (corfu-preselect 'valid)
    :custom-face
    ;; Always use a fixed-pitched font for corfu; variable pitch fonts (which will
    ;; be adopted in a variable pitch buffer) have inconsistent spacing
    (corfu-default ((t (:inherit 'default))))
    :config
    (global-corfu-mode 1)

    ;; Enable corfu in minibuffer if `vertico-mode' is disabled. From
    ;; https://github.com/minad/corfu#completing-with-corfu-in-the-minibuffer
    (defun krisb-corfu-enable-in-minibuffer ()
      "Enable Corfu in the minibuffer if vertico is not active."
      (unless (bound-and-true-p vertico-mode)
        (setq-local corfu-auto nil)       ; Ensure auto completion is disabled
        (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'krisb-corfu-enable-in-minibuffer 1))

  ;;;;; Corfu-history
  ;; Save the history across Emacs sessions
  (use-package corfu-history
    :ensure nil
    :hook (corfu-mode . corfu-history-mode)
    :config
    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;;;;; Corfu-popupinfo
  ;; Documentation window for corfu!
  (use-package corfu-popupinfo
    :ensure nil
    :hook (corfu-mode . corfu-popupinfo-mode)
    :bind ( :map corfu-map
            ([remap corfu-info-documentation] . corfu-popupinfo-toggle)
            ("M-l" . corfu-popupinfo-location))
    :custom
    (corfu-popupinfo-delay '(0.5 . 0.3))
    (corfu-popupinfo-direction '(right left vertical))
    (corfu-popupinfo-hide t)
    (corfu-popupinfo-resize t)
    (corfu-popupinfo-max-height 20)
    (corfu-popupinfo-max-width 70)
    (corfu-popupinfo-min-height 1)
    (corfu-popupinfo-min-width 30))

  ;;;;; Corfu-prescient
  (use-package corfu-prescient
    :requires prescient
    :after corfu
    :custom
    ;; Sorting
    (corfu-prescient-enable-sorting t)
    (corfu-prescient-override-sorting nil)

    ;; Filtering. Below only applies when `corfu-prescient-enable-filtering' is
    ;; non-nil
    (corfu-prescient-enable-filtering nil) ; We want orderless to do the filtering
    (corfu-prescient-completion-styles '(prescient flex))
    ;; See also `prescient--completion-recommended-overrides'
    (corfu-prescient-completion-category-overrides
     '(;; Include `partial-completion' to enable wildcards and partial paths.
       (file (styles partial-completion prescient))
       ;; Eglot forces `flex' by default.
       (eglot (styles prescient flex))))
    :config
    (corfu-prescient-mode 1))

  ;;;; Kind-icon
  ;; Icons for corfu! An alternative is nerd-icons-corfu for specifically nerd
  ;; icons.
  (use-package kind-icon
    :requires corfu
    :custom
    (kind-icon-use-icons t)
    (kind-icon-default-face 'corfu-default) ; To unify background color
    (kind-icon-blend-background nil)
    (kind-icon-blend-frac 0.08)
    (kind-icon-default-style
     '(:padding 0 :stroke 0 :margin 0 :radius 0 :height 0.8 :scale 1.0))
    ;; Use VSCode's icons (i.e. nerd icons' codicons set). Read about it from my
    ;; write-up in the kind-icon wiki here:
    ;; https://github.com/jdtsmith/kind-icon/wiki#using-svg-icons-from-a-nerd-fonts-icon-collection
    (kind-icon-mapping
     '((array          "a"   :icon "symbol-array"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (boolean        "b"   :icon "symbol-boolean"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (color          "#"   :icon "symbol-color"       :face success                          :collection "nerd-fonts-codicons")
       (command        "cm"  :icon "chevron-right"      :face default                          :collection "nerd-fonts-codicons")
       (constant       "co"  :icon "symbol-constant"    :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (class          "c"   :icon "symbol-class"       :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (constructor    "cn"  :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (enum           "e"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enummember     "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (enum-member    "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (event          "ev"  :icon "symbol-event"       :face font-lock-warning-face           :collection "nerd-fonts-codicons")
       (field          "fd"  :icon "symbol-field"       :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (file           "f"   :icon "symbol-file"        :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (folder         "d"   :icon "folder"             :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (function       "f"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (interface      "if"  :icon "symbol-interface"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (keyword        "kw"  :icon "symbol-keyword"     :face font-lock-keyword-face           :collection "nerd-fonts-codicons")
       (macro          "mc"  :icon "lambda"             :face font-lock-keyword-face)
       (magic          "ma"  :icon "lightbulb-autofix"  :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (method         "m"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "nerd-fonts-codicons")
       (module         "{"   :icon "file-code-outline"  :face font-lock-preprocessor-face)
       (numeric        "nu"  :icon "symbol-numeric"     :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (operator       "op"  :icon "symbol-operator"    :face font-lock-comment-delimiter-face :collection "nerd-fonts-codicons")
       (param          "pa"  :icon "gear"               :face default                          :collection "nerd-fonts-codicons")
       (property       "pr"  :icon "symbol-property"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (reference      "rf"  :icon "library"            :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (snippet        "S"   :icon "symbol-snippet"     :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (string         "s"   :icon "symbol-string"      :face font-lock-string-face            :collection "nerd-fonts-codicons")
       (struct         "%"   :icon "symbol-structure"   :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (text           "tx"  :icon "symbol-key"         :face font-lock-doc-face               :collection "nerd-fonts-codicons")
       (typeparameter  "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (type-parameter "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "nerd-fonts-codicons")
       (unit           "u"   :icon "symbol-ruler"       :face font-lock-constant-face          :collection "nerd-fonts-codicons")
       (value          "v"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "nerd-fonts-codicons")
       (variable       "va"  :icon "symbol-variable"    :face font-lock-variable-name-face     :collection "nerd-fonts-codicons")
       (t              "."   :icon "question"           :face font-lock-warning-face           :collection "nerd-fonts-codicons")))
    :init
    (require 'svg-lib)
    (add-to-list 'svg-lib-icon-collections
                 '("nerd-fonts-codicons" . "https://github.com/microsoft/vscode-codicons/raw/HEAD/src/icons/%s.svg"))
    :config
    ;; TODO 2022-05-24: See if I can use the cooler icons from
    ;; `lsp-bridge-icon--icons' without requiring the package
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)

    ;; Reset cache on loading new theme
    (add-hook 'enable-theme-functions (lambda (_) (funcall-interactively 'kind-icon-reset-cache))))
#+end_src

***** Cape

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Cape
  ;; Expand capf functionality with corfu! See an updated list of the defined capf
  ;; functions in the package's commentary.
  (use-package cape
    :bind (("C-M-s-c p" . completion-at-point)
           ("C-M-s-c d" . cape-dabbrev)
           ("C-M-s-c h" . cape-history)
           ("C-M-s-c f" . cape-file)
           ("C-M-s-c k" . cape-keyword)
           ("C-M-s-c s" . cape-elisp-symbol)
           ("C-M-s-c a" . cape-abbrev)
           ("C-M-s-c w" . cape-dict)
           ("C-M-s-c l" . cape-line)
           ("C-M-s-c \\" . cape-tex)
           ("C-M-s-c _" . cape-tex)
           ("C-M-s-c ^" . cape-tex)
           ("C-M-s-c &" . cape-sgml)
           ("C-M-s-c r" . cape-rfc1345)
           ([remap dabbrev-completion] . cape-dabbrev))
    :custom
    (cape-dabbrev-min-length 2)
    :init
    ;; These are added to the global definition of
    ;; `completion-at-point-functions', which acts as a fallback if buffer-local
    ;; values end in `t'. Read (info "(cape) Configuration") for an explanation.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)

    ;; Macro to help adding capfs via hooks
    (defmacro krisb-cape-setup-capfs (label hooks capfs)
      "Set up `completion-at-point-functions' for HOOKS.
  CAPFS are a list of `completion-at-point-functions'. Adds CAPFS when a
  hook in HOOKS is run. These effects are added by a defined function with
  LABEL appended to `krisb-cape-setup-capfs-'.

  The order of elements in CAPFS are the order they will appear in
  `completion-at-point-functions' for that buffer. That is, the first
  element in CAPFS will be the first element in
  `completion-at-point-functions'.

  This macro does not affect capfs already in
  `completion-at-point-functions' nor how later capfs are added to
  `completion-at-point-functions'."
      (declare (indent 0))
      `(dolist (hook ,hooks)
         (add-hook hook
                   (defun ,(intern (concat "krisb-cape-setup-capfs-" label)) ()
                     (dolist (capf (reverse ,capfs))
                       (add-to-list 'completion-at-point-functions capf))))))

    (krisb-cape-setup-capfs
      "elisp"
      '(emacs-lisp-mode-hook lisp-interaction-mode-hook)
      (list #'cape-file #'cape-elisp-symbol))

    (krisb-cape-setup-capfs
      "commit"
      '(git-commit-setup-hook vc-git-log-edit-mode-hook)
      (list #'cape-elisp-symbol #'cape-dabbrev)))
#+end_src

**** Embark

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Embark
  ;; Allow an equivalent to ivy-actions to regular completing-read minibuffers
  (use-package embark
    :bind (("C-.". embark-act)
           ("C-h B". embark-bindings)
           :map vertico-map
           ("C-.". embark-act)
           :map embark-symbol-map
           ("R". raise-sexp))
    :custom
    ;; Embark Actions menu
    (embark-prompter 'embark-keymap-prompter) ; What interface do I want to use for Embark Actions?
    (embark-indicators                    ; How the Embark Actions menu appears
     '(embark-mixed-indicator
       embark-highlight-indicator))
    (prefix-help-command #'embark-prefix-help-command) ; Use completing read when typing ? after prefix key

    (embark-mixed-indicator-delay 1.5)
    (embark-collect-live-initial-delay 0.8)
    (embark-collect-live-update-delay 0.5)
    :config
    (add-to-list 'embark-keymap-alist '(raise-sexp . embark-symbol-map)))

  ;;; Embark-consult
  (use-package embark-consult
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-completion.el"
  ;;; Provide
  (provide 'krisb-completion)
#+end_src

*** =krisb-saving-state.el=

Configuration related to "saving a state," that is, storing or restoring anything about the point, window configuration, file, buffer, et cetera.
#+begin_src emacs-lisp :tangle "modules/krisb-saving-state.el"
  ;;; Register
  (use-package register
    :ensure nil
    :custom
    (register-preview-delay 0)
    (register-separator "  ")
    (register-use-preview nil)            ; Highlighting + navigation?
    (register-preview-display-buffer-alist
     '(display-buffer-at-bottom
       (window-height . fit-window-to-buffer)
       (preserve-size . (nil . t))
       (window-parameters . ((mode-line-format . none)
                             (no-other-window . t)))))
    :config
    (with-eval-after-load 'consult
      ;; Better than `consult-register'
      (setq register-preview-function #'consult-register-format)
      ;; Adds thin lines, sorting and hides the mode line of the register preview
      ;; window. Copied from https://github.com/minad/consult#use-package-example
      (advice-add #'register-preview :override #'consult-register-window)))

  ;;; Files
  ;; No-littering's `no-littering-theme-backups' sets the values for
  ;; `auto-save-file-name-transforms', `backup-directory-alist', and
  ;; `undo-tree-history-directory-alist'. Read its docstring for more information.

  ;;;; Backup
  ;; Backup files. "Emacs makes a backup for a file only the first time the file
  ;; is saved from the buffer that visits it."
  (setopt make-backup-files t
          backup-by-copying nil       ; See (info "(emacs) Backup Copying")
          vc-make-backup-files t)     ; Still backup even if under version control

  ;; Numbering backups
  (setopt version-control t
          kept-new-versions 6
          kept-old-versions 2
          delete-old-versions t)

  ;; Modified from Doom Emacs. Backup files have names that are hashed.
  (defun krisb-backup-file-name-hash (file)
    "Hash the backup file name.
  A few places use the backup file name so paths don't get too long.

  Takes any FILE and return a hashed version."
    (let ((alist backup-directory-alist)
          backup-directory)
      (while alist
        (let ((elt (car alist)))
          (if (string-match (car elt) file)
              (setq backup-directory (cdr elt)
                    alist nil)
            (setq alist (cdr alist)))))
      (let ((file (make-backup-file-name--default-function file)))
        (if (or (null backup-directory)
                (not (file-name-absolute-p backup-directory)))
            file
          (expand-file-name (sha1 (file-name-nondirectory file))
                            (file-name-directory file))))))
  (setopt make-backup-file-name-function #'krisb-backup-file-name-hash)


  ;;;; Auto-save
  (setopt auto-save-default t ; Only a local minor mode exists; this variable influences the global value
          auto-save-timeout 3
          auto-save-interval 150
          auto-save-no-message t
          auto-save-include-big-deletions t)

  (setopt delete-auto-save-files t
          kill-buffer-delete-auto-save-files nil)

  ;; Prevent auto-save from complaining about long file names by hashing them.
  ;; Copied from Doom Emacs.
  (defun krisb-auto-save-hash-file-name (&rest args)
    "Turn `buffer-file-name' into a hash.
  Then apply ARGS."
    (let ((buffer-file-name
           (if (or
                ;; Don't do anything for non-file-visiting buffers. Names
                ;; generated for those are short enough already.
                (null buffer-file-name)
                ;; If an alternate handler exists for this path, bow out. Most of
                ;; them end up calling `make-auto-save-file-name' again anyway, so
                ;; we still achieve this advice's ultimate goal.
                (find-file-name-handler buffer-file-name
                                        'make-auto-save-file-name))
               buffer-file-name
             (sha1 buffer-file-name))))
      (apply args)))
  (advice-add 'make-auto-save-file-name :around #'krisb-auto-save-hash-file-name)

  ;;;; Autosave-visited
  ;; Save visited files after an idea time
  (setopt auto-save-visited-interval 8
          auto-save-visited-predicate ; Value Inspired by `super-save'
          (lambda ()
            (or (< (save-restriction (widen) (count-lines (point-min) (point-max)))
                   5000)
                (derived-mode-p 'pdf-view-mode)))
          remote-file-name-inhibit-auto-save-visited nil)
  (add-hook 'on-first-file-hook #'auto-save-visited-mode)

  ;;;; Autorevert
  ;; Automatically update buffers as files are externally modified
  (use-package autorevert
    :diminish auto-revert-mode
    :ensure nil
    :hook (on-first-file . global-auto-revert-mode)
    :custom
    (auto-revert-interval 3)
    (auto-revert-avoid-polling t)
    (auto-revert-check-vc-info t)
    (auto-revert-verbose t))

  ;;; Provide
  (provide 'krisb-saving-state)
#+end_src

*** =krisb-persistence.el=

#+begin_src emacs-lisp :tangle "modules/krisb-persistence.el"
  ;;; Savehist
  ;; Make history of certain things (e.g. minibuffer) persistent across sessions
  (use-package savehist
    :ensure nil
    :custom
    (history-length 10000)
    (history-delete-duplicates t)
    (savehist-save-minibuffer-history t)
    (savehist-autosave-interval 30)
    :config
    (dolist (var '(kill-ring
                   Info-history-list
                   last-kbd-macro
                   kmacro-ring
                   shell-command-history))
      (add-to-list 'savehist-additional-variables var))
    (savehist-mode 1))

  ;;; Saveplace
  ;; Save and restore the point's location in files
  (use-package saveplace
    :ensure nil
    :hook (on-first-file . save-place-mode)
    :custom
    (save-place-forget-unreadable-files t)
    (save-place-limit 3000))

  ;;; Desktop
  ;; Save buffers across Emacs sessions
  (use-package desktop
    :ensure nil
    :custom
    (desktop-load-locked-desktop 'check-pid)
    (desktop-save 'ask-if-exists)
    (desktop-auto-save-timeout 3)
    (desktop-files-not-to-save
     (rx (or (regexp "\\(\\`/[^/:]*:\\|(ftp)\\'\\)")
             ;; Don't save files from other Emacs repos because sometimes they
             ;; have local variables that mess with desktop's loading of files
             (literal (expand-file-name "emacs-repos/" "~"))
             ;; Don't want to open my large org-agenda files which I'll open
             ;; eventually anyway
             (literal krisb-org-agenda-directory))))
    (desktop-globals-to-save '(desktop-missing-file-warning
                               tags-file-name
                               tags-table-list
                               search-ring
                               regexp-search-ring
                               ;; REVIEW 2024-10-13: The previews in
                               ;; `jump-to-register' cause errors when trying to
                               ;; visit a buffer or window which no longer exists.
                               ;; Removing it from the saved globals list is the
                               ;; workaround I choose for now.
                               ;; register-alist
                               file-name-history))
    (desktop-locals-to-save '(desktop-locals-to-save
                              truncate-lines
                              case-fold-search
                              case-replace
                              fill-column

                              overwrite-mode
                              change-log-default-name
                              line-number-mode

                              column-number-mode
                              size-indication-mode

                              buffer-file-coding-system
                              buffer-display-time

                              indent-tabs-mode
                              tab-width
                              indicate-buffer-boundaries

                              indicate-empty-lines
                              show-trailing-whitespace))

    (desktop-restore-eager 10)
    (desktop-restore-forces-onscreen nil)
    (desktop-restore-frames t)
    (desktop-restore-in-current-display nil)
    :config
    (desktop-save-mode 1))

  ;;; Provide
  (provide 'krisb-persistence)
#+end_src

*** =krisb-windows.el=

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;; Window
  (use-package window
    :ensure nil
    :bind* ("M-o" . other-window)
    :bind (([remap other-window] . krisb-other-window-mru)
           :repeat-map other-window-repeat-map
           ("o" . krisb-other-window-mru))
    :custom
    (split-width-threshold (ceiling (* 0.6 (frame-width))))
    (split-height-threshold 80)
    (window-sides-vertical t)
    (window-resize-pixelwise t)
    (window-combination-resize t) ; Allow to resize existing windows when splitting?
    (fit-window-to-buffer-horizontally t)

    (switch-to-buffer-obey-display-actions t) ; As per suggestion of Mastering Emacs
    (switch-to-buffer-in-dedicated-window 'pop)
    :config
    ;; Modified version of "other-window-mru" taken from
    ;; https://karthinks.com/software/emacs-window-management-almanac/#the-back-and-forth-method
    ;; that accepts a prefix arg
    (defun krisb-other-window-mru (&optional arg)
      "Select the most recently used window on this frame."
      (interactive "p")
      (when-let ((windows-by-mru              ; Used `get-mru-window' as a reference
                  (sort (delq nil
                              (mapcar
                               (lambda (win)
                                 (when (and (not (eq win (selected-window)))
                                            (not (window-no-other-p win)))
                                   (cons (window-use-time win) win)))
                               (window-list-1 nil 'nomini nil)))
                        :lessp #'>
                        :key #'car)))
        (select-window (cdr (nth (1- (min (length windows-by-mru) (or arg 1))) windows-by-mru))))))

  ;;; Tab-bar
  (use-package tab-bar
    :ensure nil
    :bind ( :map tab-prefix-map
            ("w" . tab-bar-move-window-to-tab)
            :repeat-map krisb-tab-bar-repeat-map
            ("C-c <left>" . tab-bar-history-back)
            ("C-c <right>" . tab-bar-history-forward)
            :continue
            ("<left>" . tab-bar-history-back)
            ("<right>" . tab-bar-history-forward))
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-new-tab-choice 'clone)
    (tab-bar-close-last-tab-choice 'delete-frame)
    (tab-bar-select-tab-modifiers '(meta))
    (tab-bar-tab-hints t)
    (tab-bar-show t)
    (tab-bar-separator " ")
    (tab-bar-format
     '(tab-bar-format-tabs-groups
       tab-bar-separator
       tab-bar-format-align-right
       tab-bar-format-global))
    :config
    (tab-bar-mode 1)
    (tab-bar-history-mode 1))

  ;;; Ace-window
  (use-package ace-window
    :bind (("C-c w" . ace-window)
           ("C-c W" . krisb-ace-window-prefix))
    :custom
    (aw-scope 'global)
    (aw-swap-invert t)
    (aw-background t)
    (aw-display-mode-overlay nil)
    (aw-dispatch-always t) ; Dispatch available even when less than three windows are open
    (aw-minibuffer-flag t)
    (aw-keys '(?q ?w ?e ?r ?t ?y ?u ?i ?p))
    (aw-fair-aspect-ratio 3)
    :custom-face
    (aw-leading-char-face ((t (:height 3.0 :weight bold))))
    :config
    ;; Is not a defcustom, so use setq
    (setq aw-dispatch-alist
          '((?k aw-delete-window "Delete window")
            (?K delete-other-windows "Delete other windows")
            (?s aw-swap-window "Swap windows")
            (?m krisb-ace-window-take-over-window "Go to window and delete current window")
            (?c aw-copy-window "Copy window")
            (?o aw-flip-window "Other window")
            (?v krisb-ace-window-set-other-window "Set to other-scroll-window's window")
            (?b aw-switch-buffer-in-window "Switch to buffer in window")
            (?B aw-switch-buffer-other-window "Change buffer in window")
            (?2 aw-split-window-vert "Split vertically")
            (?3 aw-split-window-horz "Split horizontally")
            (?+ aw-split-window-fair "Split heuristically") ; See `aw-fair-aspect-ratio'
            (?? aw-show-dispatch-help)))

    ;; Taken from Karthink's config
    (defun krisb-ace-window-take-over-window (window)
      "Move from current window to WINDOW.

  Delete current window in the process."
      (let ((buf (current-buffer)))
        (if (one-window-p)
            (delete-frame)
          (delete-window))
        (aw-switch-to-window window)
        (switch-to-buffer buf)))

    ;; Taken from Karthink's config
    (defun krisb-ace-window-prefix ()
      "Use `ace-window' to display the buffer of the next command.
  The next buffer is the buffer displayed by the next command invoked
  immediately after this command (ignoring reading from the minibuffer).
  Creates a new window before displaying the buffer. When
  `switch-to-buffer-obey-display-actions' is non-nil, `switch-to-buffer'
  commands are also supported."
      (interactive)
      (display-buffer-override-next-command
       (lambda (buffer _)
         (let (window type)
           (setq
            window (aw-select (propertize " ACE" 'face 'mode-line-highlight))
            type 'reuse)
           (cons window type)))
       nil "[ace-window]")
      (message "Use `ace-window' to display next command buffer..."))

    ;; Based off of similar code taken from
    ;; https://karthinks.com/software/emacs-window-management-almanac/#scroll-other-window--built-in
    (defun krisb-ace-window-set-other-window (window)
      "Set WINDOW as the \"other window\" for the current one.
  \"Other window\" is the window scrolled by `scroll-other-window' and
  `scroll-other-window-down'."
      (setq-local other-window-scroll-buffer (window-buffer window))))
#+end_src

**** Setting =display-buffer-alist=

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;;; Display-buffer-alist
  (with-eval-after-load 'window
  ;;;;; Messages
    (setq display-buffer-alist
          `((,(rx (literal messages-buffer-name))
             (display-buffer-in-side-window)
             (window-height . 0.36)
             (side . top)
             (slot . 1)
             (post-command-select-window . t))
  ;;;;; Org-mime
            ("OrgMimeMailBody"
             (display-buffer-same-window))

  ;;;;; Diff-mode
            ((major-mode . diff-mode)
             (display-buffer-same-window))

  ;;;;; VC
            ((or . ((major-mode . vc-dir-mode)
                    (major-mode . vc-git-log-view-mode)

                    (major-mode . vc-git-region-history-mode)))
             (display-buffer-same-window))
            ("\\*\\vc-\\(incoming\\|outgoing\\|git : \\).*"
             (display-buffer-reuse-mode-window display-buffer-below-selected)
             (window-height . 20)
             (dedicated . t)
             (preserve-size . (t . t)))
            ("\\*vc-log\\*"
             (display-buffer-reuse-mode-window display-buffer-below-selected)
             (dedicated . t))

  ;;;;; Help
            ((major-mode . help-mode)
             (display-buffer-reuse-window display-buffer-pop-up-window display-buffer-below-selected)
             (window-height . shrink-window-if-larger-than-buffer))

  ;;;;; Eldoc
            ("^\\*eldoc"
             (display-buffer-at-bottom)
             (post-command-select-window . t)
             (window-height . shrink-window-if-larger-than-buffer)
             (window-parameters . ((mode-line-format . none))))

  ;;;;; Org and calendar
            ("\\*\\(?:Org Select\\|Agenda Commands\\)\\*"
             (display-buffer-in-side-window)
             (window-height . fit-window-to-buffer)
             (side . top)
             (slot . -2)
             (preserve-size . (nil . t))
             (window-parameters . ((mode-line-format . none)))
             (post-command-select-window . t))
            ("\\*Calendar\\*"
             (display-buffer-below-selected)
             (window-height . fit-window-to-buffer))
            ))

  ;;;;; Xref
    (with-eval-after-load 'xref
      (add-to-list 'display-buffer-alist
                   `((or (major-mode . xref--xref-buffer-mode)
                         (,(rx (literal xref-buffer-name))))
                     (display-buffer-below-selected display-buffer-at-bottom)
                     (window-height . 0.25)))))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-windows.el"
  ;;; Provide
  (provide 'krisb-windows)
#+end_src

*** =krisb-expansion.el=

#+begin_src emacs-lisp :tangle "modules/krisb-expansion.el"
  ;;; Abbrev
  ;; Automatically correct typed strings (e.g. words).  Most useful for correcting
  ;; spelling mistakes as they are made.
  (use-package abbrev
    :ensure nil
    :diminish
    :custom
    (save-abbrevs 'silently)
    (abbrev-suggest t)
    (abbrev-suggest-hint-threshold 2)
    :config
    (defun krisb-abbrev-todo-keyword--string ()
      "Select a todo keyword."
      ;; OPTIMIZE 2024-10-12: Don't rely on `hl-todo-keyword-faces'
      (completing-read "Keyword: " (split-string (key-description nil hl-todo-keyword-faces))))

    (defun krisb-abbrev-todo-keyword ()
      "Insert the a todo keyword."
      (insert (krisb-abbrev-todo-keyword--string)))

    (defun krisb-abbrev-current-date--string ()
      "Return the current date formatted."
      (format-time-string "%F"))

    (defun krisb-abbrev-current-date ()
      "Insert the current date."
      (insert (krisb-abbrev-current-date--string)))

    (defun krisb-abbrev-todo-keyword-and-date ()
      "Insert a todo keyword followed by the current date and colon."
      (insert (krisb-abbrev-todo-keyword--string) " " (krisb-abbrev-current-date--string) ":"))
    :config
    ;; Enable the mode globally
    (setq-default abbrev-mode t)

    ;; Allow abbrevs with a prefix colon, semicolon, or underscore. See:
    ;; <https://protesilaos.com/codelog/2024-02-03-emacs-abbrev-mode/>.
    (abbrev-table-put global-abbrev-table :regexp "\\(?:^\\|[\t\s]+\\)\\(?1:[:;_].*\\|.*\\)")

    ;; Predefined abbrevs
    (define-abbrev global-abbrev-table ";t" "" #'krisb-abbrev-todo-keyword)
    (define-abbrev global-abbrev-table ";d" "" #'krisb-abbrev-current-date)
    (define-abbrev global-abbrev-table ";td" "" #'krisb-abbrev-todo-keyword-and-date))

  ;;; Hippie-expand
  (use-package hippie-exp
    :ensure nil
    :bind ([remap dabbrev-expand] . hippie-expand))

  ;;; Provide
  (provide 'krisb-expansion)
#+end_src

** Appearance

*** =krisb-themes.el=

#+begin_src emacs-lisp :tangle "modules/krisb-themes.el"
  (require 'color)

  ;;; Krisb-themes-ext
  (use-package krisb-themes-ext
    :ensure nil
    :demand t
    :bind (("<f8>" . krisb-themes-ext-theme-switcher)
           ("<f9>" . krisb-themes-ext-toggle-window-transparency))
    :custom
    (krisb-themes-ext-light 'modus-operandi)
    (krisb-themes-ext-dark 'modus-vivendi)
    :config
    (krisb-theme-ext-enable-theme-time-of-day 8 19))

  ;;; Modus-themes
  (use-package modus-themes
    :custom
    (modus-themes-custom-auto-reload t) ; Only applies to `customize-set-variable' and related
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs nil)
    (modus-themes-mixed-fonts t)
    (modus-themes-variable-pitch-ui nil)
    (modus-themes-prompts '(semibold))
    (modus-themes-completions '((matches . (semibold))
                                (selection . (regular))))
    (modus-themes-headings '((agenda-date . (1.1))
                             (agenda-structure . (variable-pitch 1.2))
                             (t . (semibold 1.1))))
    :config
    ;; Overrides
    (setopt modus-themes-common-palette-overrides
            `(;; Completion
              (fg-completion-match-0 fg-main) ; See (info "(modus-themes) Make headings more or less colorful")
              (fg-completion-match-1 fg-main)
              (fg-completion-match-2 fg-main)
              (fg-completion-match-3 fg-main)
              (bg-completion-match-0 bg-blue-intense)
              (bg-completion-match-1 bg-yellow-intense)
              (bg-completion-match-2 bg-cyan-intense)
              (bg-completion-match-3 bg-red-intense)

              ;; "Invisible" border in mode line. See (info "(modus-themes) Make the
              ;; mode line borderless")
              (border-mode-line-active bg-mode-line-active)
              (border-mode-line-inactive bg-mode-line-inactive)

              ;; Headings
              (fg-heading-1 red-faint)
              (fg-heading-6 rainbow-0)

              ;; Make the fringe invisible
              (fringe unspecified)

              ;; More noticeable block (e.g. org) backgrounds
              (bg-prose-block-contents bg-active-value))
            modus-operandi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#cab9b2")
              (fg-mode-line-active        "#000000")
              (bg-mode-line-inactive      "#dfd9cf")
              (fg-mode-line-inactive      "#585858")


              )
            modus-vivendi-palette-overrides
            `(
              ;; I like `modus-*-tinted's mode line colors. I like to keep
              ;; `border-mode-line-active' and `border-mode-line-inactive'
              ;; "invisible" though
              (bg-mode-line-active        "#484d67")
              (fg-mode-line-active        "#ffffff")
              (bg-mode-line-inactive      "#292d48")
              (fg-mode-line-inactive      "#969696")))

    ;; TODO 2024-10-19: Use `krisb-modus-themes-setup-faces'?
    (defun krisb-modus-themes-setup-base-faces (theme)
      "Set up common faces in FRAME."
      (set-face-attribute 'mode-line-active nil
                          :background (modus-themes-with-colors bg-mode-line-active)
                          :box `( :line-width 3
                                  :color ,(modus-themes-with-colors bg-mode-line-active)))
      (let ((bg-color
             (if (eq (car custom-enabled-themes) krisb-themes-ext-dark)
                 (color-darken-name (modus-themes-with-colors bg-mode-line-inactive) 13)
               (color-lighten-name (modus-themes-with-colors bg-mode-line-inactive) 13))))
        (set-face-attribute 'mode-line-inactive nil
                            :background bg-color
                            :box `( :line-width 3
                                    :color ,bg-color)))

      (modus-themes-with-colors
        (set-face-attribute 'cursor nil :background magenta-cooler))

      (set-face-background 'fringe (face-attribute 'default :background))
      ;; Note that the vertical border is distinct from the window divider when
      ;; `window-divider-mode' is enabled.
      (set-face-attribute 'vertical-border nil
                          :foreground (face-attribute 'default :background))

      ;; Set up font-lock faces.
      ;; As described in (info "(modus-themes) DIY Measure color contrast"), I can
      ;; check for contrast by making sure the color contrast (relative luminance)
      ;; between the foreground and background color is at least 7:1.
      ;;
      ;; Like:
      ;;    (modus-themes-contrast (modus-themes-with-colors bg-main) (face-foreground 'font-lock-function-call-face))
      (cond
       ((string-match "^modus-operandi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#161BA1"))
       ((string-match "^modus-vivendi" (symbol-name theme))
        (set-face-attribute 'font-lock-function-call-face nil :foreground "#66B1F2"))))
    (add-hook 'enable-theme-functions #'krisb-modus-themes-setup-base-faces))

  ;;; Cursory
  ;; Global and local cursor presets
  (use-package cursory
    :hook ((prog-mode . (lambda () (cursory-set-preset 'code :local)))
           ((org-mode markdown-mode git-commit-setup log-edit-mode) . (lambda () (cursory-set-preset 'prose :local))))
    :custom
    (cursory-latest-state-file (no-littering-expand-var-file-name "cursory/cursory-latest-state"))
    (cursory-presets
     '((code
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1)
       (prose
        :cursor-type (bar . 2)
        :blink-cursor-mode -1
        :cursor-in-non-selected-windows (hbar . 3))
       (default)
       (t                                 ; The fallback values
        :cursor-type box
        :cursor-in-non-selected-windows hollow
        :blink-cursor-mode 1
        :blink-cursor-blinks 10
        :blink-cursor-delay 5
        :blink-cursor-interval 0.5)))
    :config
    ;; Set last preset or fall back to desired style from `cursory-presets'.
    (when (file-exists-p cursory-latest-state-file)
      (cursory-set-preset (or (cursory-restore-latest-preset) 'default)))

    ;; Persist latest preset used across Emacs sessions
    (cursory-mode 1))


  ;;; Lin
  ;; Lin is a stylistic enhancement for Emacs' built-in `hl-line-mode'. It remaps
  ;; the `hl-line' face (or equivalent) buffer-locally to a style that is optimal
  ;; for major modes where line selection is the primary mode of interaction.
  (use-package lin
    :custom
    (lin-face 'lin-cyan)
    :config
    (lin-global-mode 1)

    (add-to-list 'lin-mode-hooks 'LaTeX-mode-hook))

  ;;; Pulsar
  ;; Alternative to `pulse.el'
  (use-package pulsar
    ;; TODO 2024-10-18: Redistribute to their respective use-package declarations
    :hook ((consult-after-jump . pulsar-recenter-top)
           (consult-after-jump . pulsar-reveal-entry)
           (imenu-after-jump . pulsar-recenter-top)
           (imenu-after-jump . pulsar-reveal-entry))
    :custom
    (pulsar-pulse t)
    (pulsar-face 'pulsar-red)
    (pulsar-delay 0.05)
    (pulsar-iterations 5)
    :config
    (pulsar-global-mode 1))

  ;;; Provide
  (provide 'krisb-themes)
#+end_src

*** =krisb-fonts.el=

#+begin_src emacs-lisp :tangle "modules/krisb-fonts.el"
  ;;; Fontaine
  ;; Define then apply face presets
  (use-package fontaine
    :demand
    :custom
    (fontaine-latest-state-file (no-littering-expand-var-file-name "fontaine/fontaine-latest-state.eld"))
    (fontaine-presets
     '((iosevka-variant
        :default-family "Iosevka SS11"
        :fixed-pitch-family "Iosevka")
       (default)                          ; Use fallback values
       ;; Below are the shared fallback properties. I leave them there also as
       ;; reference for all possible properties
       (t
        ;; Alternatives:
        :default-family "Iosevka Term SS04"
        :default-weight regular
        :default-slant normal
        :default-width normal
        :default-height 165

        ;; Alternatives
        ;; "Hack Nerd Font Mono"
        :fixed-pitch-family "Iosevka"
        :fixed-pitch-weight nil
        :fixed-pitch-slant nil
        :fixed-pitch-width nil
        :fixed-pitch-height 1.0

        :fixed-pitch-serif-family nil
        :fixed-pitch-serif-weight nil
        :fixed-pitch-serif-slant nil
        :fixed-pitch-serif-width nil
        :fixed-pitch-serif-height 1.0

        ;; Alternatives:
        ;; "LiterationSerif Nerd Font"       ; Variable
        ;; "Latin Modern Mono Prop"          ; Monospace
        ;; "Sans Serif"
        ;; "Open Sans" (1.1 height)
        :variable-pitch-family "Overpass Nerd Font Propo"
        :variable-pitch-weight nil
        :variable-pitch-slant nil
        :variable-pitch-width nil
        :variable-pitch-height 1.2

        ;; Alternatives:
        ;; "JetBrainsMono Nerd Font"
        :mode-line-active-family "Iosevka Aile"
        :mode-line-active-weight nil
        :mode-line-active-slant nil
        :mode-line-active-width nil
        :mode-line-active-height 0.93

        :mode-line-inactive-family "Iosevka Aile"
        :mode-line-inactive-weight nil
        :mode-line-inactive-slant nil
        :mode-line-inactive-width nil
        :mode-line-inactive-height 0.93

        :header-line-family nil
        :header-line-weight nil
        :header-line-slant nil
        :header-line-width nil
        :header-line-height 1.0

        :line-number-family nil
        :line-number-weight nil
        :line-number-slant nil
        :line-number-width nil
        :line-number-height 1.0

        :tab-bar-family "Overpass Nerd Font"
        :tab-bar-weight nil
        :tab-bar-slant nil
        :tab-bar-width nil
        :tab-bar-height 0.93

        :tab-line-family nil
        :tab-line-weight nil
        :tab-line-slant nil
        :tab-line-width nil
        :tab-line-height 1.0


        :bold-slant nil
        :bold-weight bold
        :bold-width nil
        :bold-height 1.0

        :italic-family nil
        :italic-weight nil
        :italic-slant italic
        :italic-width nil
        :italic-height 1.0

        :line-spacing nil)))
    :config
    ;; Set the last preset or fall back to desired style from `fontaine-presets'
    (when (file-exists-p fontaine-latest-state-file)
      (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default)))

    ;; Persist the latest font preset when closing/starting Emacs and while
    ;; switching between themes.
    (fontaine-mode 1)

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))

  ;;; Mixed-pitch
  ;; Locally remap default face to variable-pitch.
  (use-package mixed-pitch
    :diminish
    :custom
    (mixed-pitch-set-height t)
    (mixed-pitch-variable-pitch-cursor nil))

  ;;; Provide
  (provide 'krisb-fonts)
#+end_src

*** =krisb-mode-line.el=

#+begin_src emacs-lisp :tangle "modules/krisb-mode-line.el"
  ;;; Diminish
  (use-package diminish
    :config
    (with-eval-after-load 'subword
      (diminish 'subword-mode))
    (with-eval-after-load 'simple
      (diminish 'visual-line-mode))
    (with-eval-after-load 'face-remap
      (diminish 'buffer-face-mode)))

  ;;; Time
  ;; Enable time in the mode-line
  (use-package time
    :ensure nil
    :custom
    (display-time-24hr-format t)
    (display-time-format "%R")
    (display-time-interval 60)
    (display-time-default-load-average nil)
    (world-clock-list
     '(("America/Los_Angeles" "Seattle")
       ("America/New_York" "New York")
       ("Europe/London" "London")
       ("Europe/Paris" "Paris")
       ("Europe/Nicosia" "Nicosia (capital of Cyprus)")
       ("Asia/Calcutta" "Bangalore")
       ("Asia/Tokyo" "Tokyo")
       ("Asia/Shanghai" "Beijing")))
    :config
    (display-time-mode 1))

  ;;; Recursion-indicator
  (use-package recursion-indicator
    :custom
    (recursion-indicator-symbols
     '((completion "C" recursion-indicator-completion)
       (prompt     "P" recursion-indicator-prompt)
       (suspend    "S" recursion-indicator-suspend)
       (t          "R" recursion-indicator-default)))
    :config
    (recursion-indicator-mode 1)
    (minibuffer-depth-indicate-mode -1))

  ;;; Provide
  (provide 'krisb-mode-line)
#+end_src

** Navigation

*** =krisb-navigation.el=

#+begin_src emacs-lisp :tangle "modules/krisb-navigation.el"
  ;;; Puni
  ;; Major-mode agnostic structural editing, faithful to built-ins
  (use-package puni
    :bind (([remap kill-word] . puni-forward-kill-word)
           ([remap backward-kill-word] . puni-backward-kill-word)
           ([remap kill-line] . puni-kill-line)
           ([remap backward-sexp] . puni-backward-sexp)
           ([remap forward-sexp] . puni-forward-sexp)
           ([remap beginning-of-defun] . puni-beginning-of-sexp)
           ([remap end-of-defun] . puni-end-of-sexp)
           ([remap backward-list] . puni-backward-sexp-or-up-list)
           ([remap forward-list] . puni-forward-sexp-or-up-list)
           ("C-M-9" . puni-syntactic-backward-punct)
           ("C-M-0" . puni-syntactic-forward-punct)
           ("C-M-r" . puni-raise)
           ("C-M-=" . puni-splice)
           ("C-M-S-o" . puni-split)
           ("C-M-[" . puni-slurp-backward)
           ("C-M-]" . puni-slurp-forward)
           ("C-M-{" . puni-barf-backward)
           ("C-M-}" . puni-barf-forward))
    :custom
    (puni-confirm-when-delete-unbalanced-active-region t))

  ;;; Consult
  ;; Counsel equivalent for default Emacs completion. It provides many useful
  ;; commands.
  (use-package consult
    :bind (("C-x B" . consult-buffer)
           ;; Remaps
           ([remap bookmark-jump] . consult-bookmark)
           ([remap yank-pop] . consult-yank-pop)
           ([remap goto-line] . consult-goto-line)
           ([remap recentf-open-files] . consult-recent-file)
           ([remap Info-search] . consult-info)
           ([remap point-to-register] . consult-register-store)
           ([remap repeat-complex-command] . consult-complex-command)
           ([remap imenu] . consult-imenu)
           ([remap flymake-show-buffer-diagnostics] . consult-flymake)
           :map consult-narrow-map
           ("?" . consult-narrow-help)          ; Show available narrow keys
           :map goto-map                  ; The `M-g' prefix
           ("f" . consult-flymake)
           ("o" . consult-outline)
           :map search-map                ; The `M-s' prefix
           ("i" . consult-info)
           ("l" . consult-line)
           :map org-mode-map
           ([remap consult-outline] . consult-org-heading)
           ("M-g a" . consult-org-agenda))
    :custom
    (consult-preview-key "C-M-;")
    (consult-bookmark-narrow
     '((?f "File" bookmark-default-handler)
       (?i "Info" Info-bookmark-jump)
       (?h "Help" help-bookmark-jump Info-bookmark-jump
           Man-bookmark-jump woman-bookmark-jump)
       (?p "PDFs" pdf-view-bookmark-jump-handler)
       (?a "Activities" activities-bookmark-handler)
       (?d "Docview" doc-view-bookmark-jump)
       (?s "Eshell" eshell-bookmark-jump)
       (?w "Web" eww-bookmark-jump xwidget-webkit-bookmark-jump-handler)
       (?v "VC Directory" vc-dir-bookmark-jump)
       (nil "Other")))
    (consult-ripgrep-args
     (concat
      "rg --null --line-buffered --color=never --max-columns=1000 --path-separator /\
     --smart-case --no-heading --with-filename --line-number --search-zip"
      ;; Additional args
      " --line-number --hidden"))
    :config
    (require 'krisb-consult-ext)

    ;; Log-edit history
    (add-to-list 'consult-mode-histories
                 '(log-edit-mode log-edit-comment-ring log-edit-comment-ring-index log-edit-beginning-of-line))

    ;; Use the faster plocate rather than locate
    (when (executable-find "plocate")
      (setopt consult-locate-args "plocate --ignore-case --existing --regexp"))

    ;; Use consult UI with xref
    (with-eval-after-load 'xref
      ;; Use Consult to select xref locations with preview
      (setopt xref-show-definitions-function #'consult-xref
              xref-show-xrefs-function #'consult-xref))

    ;; Registers
    (with-eval-after-load 'register
      ;; Fancier formatting of preview
      (setopt register-preview-function #'consult-register-format)
      ;; Fancier formatting of preview window. Adds thin lines, sorting and hides
      ;; the mode line of the register preview window. Copied from
      ;; https://github.com/minad/consult#use-package-example
      (advice-add 'register-preview :override #'consult-register-window)))

  ;;; Jump
  ;;;; Isearch
  ;; Incremental search
  (use-package isearch
    :ensure nil
    :custom
    (isearch-repeat-on-direction-change t)
    (isearch-allow-scroll t)
    (isearch-allow-motion t)
    (isearch-lazy-count t)
    (isearch-wrap-pause 'no)
    ;; Make regular Isearch interpret the empty space as a regular expression that
    ;; matches any character between the words you give it. Learned from
    ;; Protesilaos. Also be aware of `isearch-toggle-lax-whitespace'
    (isearch-lax-whitespace t)
    (search-whitespace-regexp ".*?"))

  ;;;; Imenu
  (use-package imenu
    :ensure nil
    :custom
    (org-imenu-depth 7)                   ; Show more than just 2 levels...
    (imenu-auto-rescan t)
    (use-package-enable-imenu-support t)
    (imenu-flatten 'group))

  ;;;; Avy
  ;; Quickly jump to any character
  (use-package avy
    :commands krisb-avy-goto-parens
    :bind (("C-; C-;" . avy-goto-char-timer)
           ("C-; s" . avy-goto-symbol-1)
           ("C-; l" . avy-goto-line)
           ("C-; p" . krisb-avy-goto-parens))
    :custom
    (avy-all-windows t)                   ; Scope
    (avy-case-fold-search nil)
    (avy-single-candidate-jump t)
    (avy-timeout-seconds 0.3)
    (avy-style 'at-full)
    (avy-keys '(?a ?w ?r ?u ?i ?o ?p))
    (avy-dispatch-alist ; Avy actions (first narrow so letter combinations appear)
     '((?k . avy-action-kill-stay)
       (?K . avy-action-kill-move)
       (?t . avy-action-teleport)
       (?m . avy-action-mark)
       (?y . avy-action-yank)
       (?z . avy-action-zap-to-char)
       (?. . krisb-avy-action-embark)
       (?h . krisb-avy-action-help)
       (?d . krisb-avy-action-define)
       (?e . krisb-avy-action-eval)))
    (avy-orders-alist
     '((avy-goto-char . krisb-avy-order-farthest)
       (avy-goto-char-2 . krisb-avy-order-farthest)
       (avy-goto-word-0 . krisb-avy-order-farthest)
       (avy-goto-word-1 . krisb-avy-order-farthest)
       (avy-goto-char-timer . krisb-avy-order-farthest)
       (krisb-avy-goto-parens . krisb-avy-order-farthest)))
    :config
    (krisb-modus-themes-setup-faces
     "avy"
     ;; Don't bold so text isn't shifted much
     (set-face-attribute 'avy-lead-face nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-0 nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-1 nil :inherit 'modus-themes-reset-soft)
     (set-face-attribute 'avy-lead-face-2 nil :inherit 'modus-themes-reset-soft))

    (defun krisb-avy-order-farthest (x)
      (- (abs (- (if (numberp (car x))
                     (car x)
                   (caar x))
                 (point)))))

    ;; Taken from the avy wiki
    (defun krisb-avy-goto-parens ()
      "Go to an open or close parens."
      (interactive)
      (let ((avy-command this-command))   ; for look up in avy-orders-alist
        (avy-jump (rx (+ (or (literal "(") (literal ")")))))))

    ;; Additional avy dispatch actions. Most are inspired or taken from
    ;; https://karthinks.com/software/avy-can-do-anything/
    ;; Embark
    (defun krisb-avy-action-embark (pt)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; Helpful
    (defun krisb-avy-action-help (pt)
      (save-excursion
        (goto-char pt)
        (if (featurep 'helpful)
            (helpful-at-point)
          (describe-symbol (symbol-at-point))))
      (when (featurep 'helpful)
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; Dictionary
    (defun krisb-avy-action-define (pt)
      (require 'checking-words-rcp)
      (save-excursion
        (goto-char pt)
        (krisb-dictionary-at-point))
      ;; If with `universal-arg', don't switch to help buffer
      (when current-prefix-arg
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)

    ;; Evaluation
    (defun krisb-avy-action-eval (pt)
      (save-excursion
        (goto-char pt)
        (if (fboundp 'eros-eval-last-sexp)
            (call-interactively 'eros-eval-last-sexp)
          (call-interactively 'eval-last-sexp)))
      t))

  ;;;; Grep
  (use-package grep
    :custom
    (grep-save-buffers 'ask)
    (grep-use-headings t))

  ;;;; Recentf
  ;; Enable logging of recent files
  (use-package recentf
    :ensure nil
    :bind ( :map krisb-file-keymap
            ("r" . recentf-open-files))
    :custom
    (recentf-max-saved-items 1000)
    (recentf-max-menu-items 15)
    :config
    (recentf-mode 1))

  ;;; Folding
  ;;;; Outline
  (use-package outline
    :ensure nil
    :diminish outline-minor-mode
    :custom
    (outline-minor-mode-cycle t)
    (outline-minor-mode-highlight t)
    (outline-blank-line t)
    :init
    ;; `outline-minor-mode-prefix' must be set prior to the package's loading
    (setq outline-minor-mode-prefix (kbd "C-c \\")))

  ;;;; Outshine
  ;; Outline-minor-mode but with better keybindings and more support.
  (use-package outshine
    :diminish outshine-mode
    :hook ((LaTeX-mode prog-mode conf-mode) . outshine-mode)
    :bind ( :map outshine-mode-map
            ("C-x n s". outshine-narrow-to-subtree))
    :custom
    (outshine-use-speed-commands t))

  ;;; Provide
  (provide 'krisb-navigation)
#+end_src

** Writing and reading

*** =krisb-prose.el=

**** Environment

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Environment
  ;;;; Olivetti
  (use-package olivetti
    :hook ((org-mode Info-mode emacs-news-view-mode org-msg-edit-mode) . olivetti-mode)
    :custom
    (olivetti-lighter nil)
    (olivetti-body-width 0.6)
    (olivetti-minimum-body-width 80)
    (olivetti-margin-width 8)
    (olivetti-style 'fancy)              ; Fancy makes the buffer look like a page
    ;; FIXME 2024-01-11: This is a temporary solution. Olivetti's changing of
    ;; margins and fringes messes with the calculation of
    ;; `mode--line-format-right-align', which determines where the right side of
    ;; the mode line is placed.
    (mode-line-format-right-align
     '(:eval (if (and (bound-and-true-p olivetti-mode)
                      olivetti-style)     ; 'fringes or 'fancy
                 (let ((mode-line-right-align-edge 'right-fringe))
                   (mode--line-format-right-align))
               (mode--line-format-right-align))))
    :config
    (krisb-modus-themes-setup-faces
     "olivetti"
     (set-face-attribute 'olivetti-fringe nil
                         :background bg-dim
                         :inherit 'unspecified)))

  ;;;; Astute.el
  (use-package astute
    :hook (org-mode . astute-mode)
    :custom
    (astute-lighter "")
    (astute-prefix-single-quote-exceptions
     '("bout"
       "em"
       "n'"
       "cause"
       "round"
       "twas"
       "tis")))

  ;;;; Darkroom
  (use-package darkroom
    :bind ( :map krisb-toggle-keymap
            ("d" . darkroom-mode)
            ("D" . darkroom-tentative-mode))
    :custom
    (darkroom-text-scale-increase 1.3))

  ;;;; Typewriter-roll-mode
  (use-package typewriter-roll-mode
    :bind ( :map krisb-toggle-keymap
            ("t" . typewriter-roll-mode)))

  ;;;; Timers
  ;;;;; Tmr
  (use-package tmr
    :bind ( :map krisb-open-keymap
            ("t" . krisb-tmr-dispatch))
    :custom
    ;; Useful variables
    (tmr-descriptions-list
     '("Stop working!" "Work time 😄"))
    (tmr-notification-urgency 'normal)
    (tmr-sound-file "/usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga")
    :config
    (require 'transient)
    (transient-define-prefix krisb-tmr-dispatch ()
      "Invoke a transient menu for `tmr'."
      ["Create or remove timers"
       [("t" "Create a timer" tmr)
        ("T" "Create a timer with description" tmr-with-details)
        ("C" "Clone a timer" tmr-clone)]
       [("r" "Remove finished" tmr-remove-finished)
        ("c" "Cancel timer" tmr-cancel)]]
      ["View timers"
       [("v" "Tabulated view" tmr-tabulated-view)]]))


  ;;;;; Hammy
  (use-package hammy
    :bind ( :map krisb-open-keymap
            ("h h" . krisb-hammy-dwim)
            ("h S" . hammy-start)
            ("h n" . hammy-next)
            ("h s" . hammy-stop)
            ("h r" . hammy-reset)
            ("h t" . hammy-toggle)
            ("h a" . hammy-adjust)
            ("h v" . hammy-view-log)
            ("h R" . hammy-status)
            ("h I" . hammy-start-org-clock-in))
    :custom
    ;; TODO 2024-09-25: Have this found more locally. When I do, also change
    ;; `tmr-sound' to this file
    (hammy-sound-end-work "/home/krisbalintona/.emacs.d/elpa/work-timer/simple-notification.mp3")
    (hammy-sound-end-break "/home/krisbalintona/.emacs.d/elpa/work-timer/simple-notification.mp3")

    ;; Mode line
    (hammy-mode-always-show-lighter nil)
    (hammy-mode-update-mode-line-continuously t)
    (hammy-mode-lighter-seconds-format "%.2m:%.2s")
    (hammy-mode-lighter-prefix "[H]")
    (hammy-mode-lighter-overdue "!")
    (hammy-mode-lighter-pie t)
    (hammy-mode-lighter-pie-height 0.65)
    :config
    ;; Mode line
    (hammy-mode 1)

    ;; Custom lighter
    (defun krisb-hammy-mode-lighter ()
      "Return lighter for `hammy-mode'."
      (cl-labels
          ((format-hammy (hammy)
             (let ((remaining
                    (abs
                     ;; We use the absolute value because `ts-human-format-duration'
                     ;; returns 0 for negative numbers.
                     (- (hammy-current-duration hammy)
                        (float-time (time-subtract (current-time)
                                                   (hammy-current-interval-start-time hammy)))))))
               (format "%s(%s%s:%s)"
                       (propertize (hammy-name hammy)
                                   'face 'hammy-mode-lighter-name)
                       (if (hammy-overduep hammy)
                           (propertize hammy-mode-lighter-overdue
                                       'face 'hammy-mode-lighter-overdue)
                         "")
                       (propertize (hammy-interval-name (hammy-interval hammy))
                                   'face `(hammy-mode-lighter-interval
                                           ,(hammy-interval-face (hammy-interval hammy))))
                       (concat (when hammy-mode-lighter-pie
                                 (propertize " " 'display (hammy--pie hammy)))
                               (if (hammy-overduep hammy)
                                   ;; We use the negative sign when counting down to
                                   ;; the end of an interval (i.e. "T-minus...") .
                                   "+" "-")
                               (format-seconds (if (< remaining 60)
                                                   "%2ss" hammy-mode-lighter-seconds-format)
                                               remaining))))))
        (if hammy-active
            (concat (mapconcat #'format-hammy hammy-active ",") " ")
          ;; No active hammys.
          (when hammy-mode-always-show-lighter
            (concat (propertize hammy-mode-lighter-prefix
                                'face 'hammy-mode-lighter-prefix-inactive)
                    (if hammy-mode-lighter-suffix-inactive
                        (concat ":" hammy-mode-lighter-suffix-inactive))
                    " ")))))
    (advice-add 'hammy-mode-lighter :override #'krisb-hammy-mode-lighter)

    ;; Dwim command
    (defun krisb-hammy-dwim ()
      "DWIM with hammy."
      (interactive)
      (if hammy-active
          (call-interactively 'hammy-next)
        (call-interactively 'hammy-start)))

    ;; Hammy definitions
    (defun krisb-hammy-play-sound ()
      "Play end of timer sound."
      (interactive)
      (call-process-shell-command
       (format "ffplay -nodisp -autoexit %s >/dev/null 2>&1" hammy-sound-end-work) nil 0))

    (setq hammy-hammys nil)
    (hammy-define "Fractional"
      :documentation "Breaks that are ⅓ as long as the last work interval."
      :intervals
      (list
       (interval :name "Work"
                 :duration "40 minutes"
                 :before (do (announce "Starting work time (advance to break when ready)."))
                 :after (do (krisb-hammy-play-sound))
                 :advance (do (krisb-hammy-play-sound)
                              (let* ((current-duration
                                      (ts-human-format-duration
                                       (float-time
                                        (time-subtract (current-time)
                                                       current-interval-start-time))))
                                     (message (format "You've worked for %s!" current-duration)))
                                (announce message)
                                (notify message))))
       (interval :name "Break"
                 :duration (do (cl-assert (equal "Work" (hammy-interval-name (caar history))))
                               (let ((duration (cl-loop for (interval start end) in history
                                                        while (equal "Work" (hammy-interval-name interval))
                                                        sum (float-time (time-subtract end start))
                                                        into work-seconds
                                                        finally return (* work-seconds 0.33))))
                                 (when (alist-get 'unused-break etc)
                                   (cl-incf duration (alist-get 'unused-break etc))
                                   (setf (alist-get 'unused-break etc) nil))
                                 duration))
                 :before (do (let ((message (format "Starting break for %s."
                                                    (ts-human-format-duration current-duration))))
                               (announce message)))
                 :after (do (krisb-hammy-play-sound)
                            (let* ((elapsed
                                    (float-time
                                     (time-subtract (current-time) current-interval-start-time)))
                                   (unused (- current-duration elapsed)))
                              (when (> unused 0)
                                (if (alist-get 'unused-break etc)
                                    (cl-incf (alist-get 'unused-break etc) unused)
                                  (setf (alist-get 'unused-break etc) unused)))))
                 :advance (remind "5 minutes"
                                  (do (krisb-hammy-play-sound))))))
    (hammy-define "Ramp and decline"
      :documentation "Get your momentum going!"
      :intervals (list (interval :name "Work"
                                 :face 'font-lock-builtin-face
                                 :duration (climb "5 minutes" "40 minutes"
                                                  :descend t :step "5 minutes")
                                 :before (do (announce "Work time!"))
                                 :advance (do (announce "Work time is over!")
                                              (notify "Work time is over!")
                                            (remind "5 minutes"
                                                    (do (krisb-hammy-play-sound)))))
                       (interval :name "Rest"
                                 :face 'font-lock-type-face
                                 :duration (do (let ((duration (cl-loop for (interval start end) in history
                                                                        while (equal "Work" (hammy-interval-name interval))
                                                                        sum (float-time (time-subtract end start))
                                                                        into work-seconds
                                                                        finally return (max (* 60 2) (* work-seconds 0.33)))))
                                                 (when (alist-get 'unused-break etc)
                                                   (cl-incf duration (alist-get 'unused-break etc))
                                                   (setf (alist-get 'unused-break etc) nil))
                                                 duration))
                                 :before (do (announce "Rest time!"))
                                 :after (do (let* ((elapsed
                                                    (float-time
                                                     (time-subtract (current-time) current-interval-start-time)))
                                                   (unused (- current-duration elapsed)))
                                              (when (> unused 0)
                                                (if (alist-get 'unused-break etc)
                                                    (cl-incf (alist-get 'unused-break etc) unused)
                                                  (setf (alist-get 'unused-break etc) unused)))))
                                 :advance (remind "5 minutes"
                                                  (do (announce "Rest time is over!")
                                                      (notify "Rest time is over!")
                                                    (krisb-hammy-play-sound)))))
      :complete-p (do (and (> cycles 1)
                           interval
                           (equal "Work" interval-name)
                           (>= (duration "5 minutes") current-duration)))
      :after (do (announce "Flywheel session complete!")
                 (notify "Flywheel session complete!")))

    (hammy-define (propertize "🍅" 'face '(:foreground "tomato"))
      :documentation "The classic pomodoro timer."
      :intervals
      (list
       (interval :name "Working"
                 :duration "25 minutes"
                 :before (do (announce "Starting work time.")
                             (notify "Starting work time."))
                 :advance (remind "10 minutes"
                                  (do (announce "Break time!")
                                      (notify "Break time!"))))
       (interval :name "Resting"
                 :duration (do (if (and (not (zerop cycles))
                                        (zerop (mod cycles 3)))
                                   ;; If a multiple of three cycles have
                                   ;; elapsed, the fourth work period was
                                   ;; just completed, so take a longer break.
                                   "30 minutes"
                                 "5 minutes"))
                 :before (do (announce "Starting break time.")
                             (notify "Starting break time."))
                 :advance (remind "10 minutes"
                                  (do (announce "Break time is over!")
                                      (notify "Break time is over!"))))))

    (hammy-define "1-shot"
      :documentation "Single-use timer that prompts for name and duration."
      :complete-p (do (> cycles 0))
      :before
      (lambda (hammy)
        (hammy-reset hammy)
        (setf (hammy-intervals hammy)
              (ring-convert-sequence-to-ring
               (list (interval
                      :name (read-string "Interval name (optional): " nil nil "")
                      :duration (read-string "Duration: ")
                      :advance (remind "5 minutes"
                                       (do (let ((message (format "%s is over!" interval-name)))
                                             (krisb-hammy-play-sound)
                                             (notify message)))))))))))
#+end_src

**** Spell checking

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Spell checking
  ;;;; Jinx
  ;; JIT spell checker that uses `enchant'. The executable is enchant-2. See the
  ;; manual for more information:
  ;; https://abiword.github.io/enchant/src/enchant.html
  (use-package jinx
    :ensure-system-package ((enchant-2 . enchant)
                            (pkgconf)
                            ;; Don't forget to install spell checker libraries!
                            (hunspell)
                            ("/usr/share/hunspell/en_US-large.dic" . hunspell-en_us)
                            (hspell)      ; Hebrew
                            (nuspell) ; Newest spell checker to be used by Firefox, Thunderbird, etc.
                            (voikkospell . libvoikko)) ; Finnish
    :demand t
    :diminish
    :bind ( :map jinx-mode-map
            ([remap ispell-word] . jinx-correct)
            ("C-," . jinx-correct)
            ("C-M-$" . jinx-languages))
    :config
    (global-jinx-mode 1)

    ;; Mimic `flyspell-abbrev-p'.  Taken from
    ;; https://github.com/minad/jinx/wiki#save-misspelling-and-correction-as-abbreviation
    (defun krisb-jinx--add-to-abbrev (overlay word)
      "Add abbreviation to `local-abbrev-table'.

  The misspelled word is taken from OVERLAY. WORD is the corrected
  word."
      (let ((abbrev (buffer-substring-no-properties
                     (overlay-start overlay)
                     (overlay-end overlay))))
        (message "Abbrev: %s -> %s" abbrev word)
        ;; Change this to `global-abbrev-table' if preferred
        (define-abbrev local-abbrev-table abbrev word)))
    (advice-add 'jinx--correct-replace :before #'krisb-jinx--add-to-abbrev)

    ;; Read Ispell's "LocalWords."  Taken from
    ;; https://github.com/minad/jinx/wiki#make-jinx-read-from-localwords
    (defun krisb-jinx-ispell--get-localwords ()
      "Return a string of ispell's local words.

  Those are the words following `ispell-words-keyword' (usually
  \"LocalWords\") in the current buffer."
      (require 'ispell)
      (save-excursion
        (goto-char (point-min))
        (cl-loop while (search-forward ispell-words-keyword nil t)
                 collect (string-trim (buffer-substring-no-properties (point) (line-end-position))) into result
                 finally return (mapconcat #'identity result " "))))
    (defun krisb-jinx-ispell-add-localwords ()
      "Add ispell's local words to `jinx-local-words'."
      (let ((ispell-localwords (krisb-jinx-ispell--get-localwords)))
        (setq jinx-local-words (concat jinx-local-words ispell-localwords))
        (setq jinx--session-words (append jinx--session-words (split-string ispell-localwords)))))
    (add-hook 'jinx-mode-hook #'krisb-jinx-ispell-add-localwords)

    ;; Write to buffer's LocalWords instead of populating `jinx-local-words', a
    ;; local variable. Taken from
    ;; https://github.com/minad/jinx/wiki#make-jinx-write-localwords
    (defun krisb-jinx-save-as-ispell-localword (save key word)
      "Save WORD using ispell's `ispell-words-keyword'.
  If SAVE is non-nil save, otherwise format candidate given action KEY."
      (if save
          (progn
            (require 'ispell)
            (ispell-add-per-file-word-list word)
            (add-to-list 'jinx--session-words word)
            (setq jinx-local-words
                  (string-join
                   (sort (delete-dups
                          (cons word (split-string jinx-local-words)))
                         #'string<)
                   " "))))
      (list key word "File (LocalWords)"))
    ;; NOTE 2023-07-16: Can also directly add to `jinx--save-keys' directly
    (setf (alist-get ?* jinx--save-keys) #'krisb-jinx-save-as-ispell-localword)

    ;; Use Vertico's grid display such that more suggestions fit on the screen and
    ;; enable annotations.  Taken from
    ;; https://github.com/minad/jinx#correcting-misspellings
    (with-eval-after-load 'vertico-multiform
      (add-to-list 'vertico-multiform-categories
                   '(jinx grid
                          (vertico-grid-annotate . 20)
                          (vertico-grid-max-columns . 12)
                          (vertico-grid-separator .
                                                  #("    |    " 4 5
                                                    (display (space :width (1)) face (:inherit shadow :inverse-video t))))))))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-prose.el"
  ;;; Provide
  (provide 'krisb-prose)
#+end_src

*** =krisb-org.el=

**** Base

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Built-in
  ;;;; Org
  (use-package org
    :hook ((org-mode . variable-pitch-mode)
           (org-mode . visual-line-mode)
           (org-mode . (lambda () (setq-local line-spacing 0.2 fill-column 120))))
    :bind (("C-M-s-s" . org-store-link)
           :map krisb-note-keymap
           ("c" . org-capture))
    :custom
    (org-directory krisb-org-directory)

    ;; Headline appearance
    (org-hide-leading-stars nil)
    (org-n-level-faces 8)
    (org-cycle-separator-lines 2)
    (org-cycle-level-faces t)
    (org-ellipsis " ⮷")
    (org-startup-folded 'nofold)
    (org-tags-column 0)

    ;; Markup appearance
    (org-hide-emphasis-markers t)     ; Remove org-mode markup characters
    (org-hide-macro-markers nil)
    (org-pretty-entities t)           ; Show as UTF-8 characters (useful for math)
    (org-pretty-entities-include-sub-superscripts t) ; Show superscripts and subscripts? Also see `org-export-with-sub-superscripts'
    (org-use-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-hidden-keywords nil)

    ;; Movement
    (org-special-ctrl-a/e t)
    (org-ctrl-k-protect-subtree 'error)

    ;; Plain lists
    (org-list-allow-alphabetical t)
    (org-list-use-circular-motion t)

    ;; Headline insertion
    (org-blank-before-new-entry
     '((heading . auto)
       ;; Don't let Emacs make decisions about where to insert newlines
       (plain-list-item . nil)))
    (org-insert-heading-respect-content nil) ; Let M-RET make heading in place
    (org-M-RET-may-split-line '((table . nil)
                                (default . t)))

    ;; Blocks
    (org-structure-template-alist
     '(("s" . "src")
       ("e" . "src emacs-lisp")
       ("E" . "src emacs-lisp :results value code :lexical t")
       ("t" . "src emacs-lisp :tangle FILENAME")
       ("T" . "src emacs-lisp :tangle FILENAME :mkdirp yes")
       ("x" . "example")
       ("X" . "export")
       ("v" . "verse")
       ("c" . "comment")
       ("q" . "quote")))

    ;; Other
    (org-file-apps
     '((directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . default)
       ("\\.docx\\'" . system)
       ("\\.odt\\'" . system)
       ;; Default to `auto-mode-alist'
       (auto-mode . emacs)))
    (org-fold-catch-invisible-edits 'show-and-error)
    (org-edit-timestamp-down-means-later t)
    :custom-face
    (org-quote ((t (:family ,(face-attribute 'variable-pitch :family) :extend t :inherit 'org-block))))
    (org-ellipsis ((t (:box unspecified :inherit default)))) ; Don't make line taller because of org-ellipsis
    :config
    ;; Make org-open-at-point follow file links in the same window
    (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)

    ;; Pulsar pulses
    (with-eval-after-load 'pulsar
      (dolist (hook '(org-agenda-after-show-hook org-follow-link-hook))
        (add-hook hook #'pulsar-recenter-center)
        (add-hook hook #'pulsar-reveal-entry))))

  ;;;; Org-faces
  (use-package org-faces
    :ensure nil
    :custom
    (org-fontify-todo-headline nil)
    (org-fontify-done-headline nil)
    (org-fontify-whole-block-delimiter-line nil)
    (org-fontify-quote-and-verse-blocks t))

  ;;;; Org-src
  (use-package org-src
    :ensure nil
    :custom
    (org-src-fontify-natively t)
    (org-src-window-setup 'current-window)
    (org-src-block-faces nil) ; Open src block window on current buffer were in the language's major mode
    (org-edit-src-turn-on-auto-save nil)
    (org-edit-src-auto-save-idle-delay 3))


  ;;;; Org-id
  (use-package org-id
    :ensure nil
    :custom
    (org-clone-delete-id t)
    (org-id-method 'ts)
    (org-id-link-to-org-use-id 'use-existing))

  ;;;; Org-attach
  (use-package org-attach
    :ensure nil
    :custom
    (org-attach-preferred-new-method 'id) ; Necessary to add the ATTACH tag
    (org-attach-auto-tag "ATTACH")
    (org-attach-dir-relative nil)         ; Use relative file paths?
    (org-attach-id-dir (expand-file-name "resources" org-directory))
    (org-attach-method 'cp)            ; Attach copies of files
    (org-attach-archive-delete 'query) ; If subtree is deleted or archived, ask user
    (org-attach-id-to-path-function-list
     '(org-attach-id-ts-folder-format
       org-attach-id-uuid-folder-format
       org-attach-id-fallback-folder-format)))

  ;;;; Org-footnote
  (use-package org-footnote
    :ensure nil
    :after org
    :custom
    (org-footnote-section nil)            ; Don't create footnote headline
    (org-footnote-auto-adjust t)
    (org-footnote-define-inline nil))

  ;;;; Org-babel
  (use-package ob
    :ensure nil
    :custom
    (org-babel-load-languages '((python . t)
                                (emacs-lisp . t)))
    (org-confirm-babel-evaluate nil))


  ;;;; Org-refile
  (use-package org-refile
    :ensure nil
    :custom
    (org-refile-use-cache nil)
    (org-refile-targets
     `((,krisb-org-agenda-directory-files . (:level . 0))
       (,krisb-org-agenda-directory-files . (:tag . "project"))
       (,krisb-org-agenda-main-file . (:maxlevel . 3))))
    ;; TODO 2024-10-07: Think about whether I actually want this before. What if I
    ;; want to refile to a non-todo heading in the current file?
    (org-refile-target-verify-function    ; Only let not done todos be refile targets
     (lambda () (if (org-entry-is-todo-p) (not (org-entry-is-done-p)))))
    (org-refile-allow-creating-parent-nodes 'confirm)
    :config
    ;; Workaround for orderless issue with `org-refile'. See
    ;; https://github.com/minad/vertico#org-refile
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)
    (when (bound-and-true-p vertico-mode)
      (advice-add #'org-olpath-completing-read :around
                  (lambda (&rest args)
                    (minibuffer-with-setup-hook
                        (lambda () (setq-local completion-styles '(basic)))
                      (apply args))))))

  ;;;; Org-archive
  (use-package org-archive
    :ensure nil
    :custom
    (org-archive-subtree-save-file-p t)  ; Save archive file always
    (org-archive-subtree-add-inherited-tags t)
    :config
    (define-advice org-archive--compute-location
        (:around (orig-fun &rest args) krisb-org-archive--compute-location-denote-format-string)
      "Take LOCATION in `org-archive--compute-location' and expand %D.
  %D is expanded to the denote identifier."
      ;; Modify LOCATION before normal operations
      (cl-letf (((car args)
                 (if (fboundp 'denote-retrieve-filename-identifier)
                     (replace-regexp-in-string "%D"
                                               (denote-retrieve-filename-identifier (buffer-file-name (buffer-base-buffer)))
                                               (car args))
                   (car args))))
        (apply orig-fun args))))

  ;;;; Org-num
  (use-package org-num
    :ensure nil
    :diminish
    :bind ( :map krisb-toggle-keymap
            ("n" . org-num-mode))
    :custom
    (org-num-face 'fixed-pitch)
    (org-num-skip-commented t)
    (org-num-skip-footnotes t)
    (org-num-skip-unnumbered t))
#+end_src

**** Additional

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Org-contrib
  (use-package org-contrib
    :after org
    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))) ; The ignore tag will export contents but ignore heading

  ;;; Org-modern
  (use-package org-modern
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda))
    :custom
    (org-modern-keyword nil)

    (org-modern-hide-stars "· ") ; Is affected by the value of `org-hide-leading-stars'
    (org-modern-star 'fold)
    (org-modern-fold-stars
     '(("▶" . "▼")
       ("▷" . "▽")
       ("⯈" . "⯆")
       ("▹" . "▿")
       ("▸" . "▾")))

    (org-modern-todo t) ; NOTE 2024-10-10: I set `org-modern-todo-faces' in my org-agenda section
    (org-modern-priority t)
    ;; See my value for `org-priority-faces'
    (org-modern-priority-faces
     '((?A :inverse-video t :inherit (bold org-priority))
       (?B :inverse-video t :inherit (bold org-priority))
       (?C :inverse-video t :inherit org-priority)
       (?D :inverse-video t :inherit org-priority)
       (?E :inverse-video t :inherit (shadow org-priority))
       (?F :inverse-video t :inherit (shadow org-priority))))
    ;; See my value for `org-todo-keyword-faces'
    (org-modern-todo-faces
     '(("NEXT" :inherit (bold success org-modern-todo))
       ("TODO" :inherit (org-todo org-modern-todo))
       ("HOLD" :inherit (shadow error org-modern-todo))
       ("MAYBE" :inherit (shadow org-todo org-modern-todo))
       ("DONE" :inherit (bold org-done org-modern-todo))
       ("CANCELED" :inherit (error org-modern-todo))))

    (org-modern-label-border 3)
    (org-modern-tag t)

    (org-modern-block-fringe nil) ; Doesn't work well with `olivetti-style' set to 'fancy
    (org-modern-block-name '("⌜" . "⌞"))

    (org-modern-footnote '(nil (raise 0.15) (height 0.9)))
    (org-modern-list '((?+ . "◦")
                       (?- . "–")
                       (?* . "•")))
    (org-modern-timestamp t)

    (org-modern-table t)
    (org-modern-table-vertical 3)
    (org-modern-table-horizontal 0.1)
    :custom-face
    (org-modern-label
     ((t :height 0.9 :width condensed :weight regular :underline nil)))
    (org-modern-todo ((t :weight semibold :inverse-video t :inherit org-modern-label)))
    :config
    (krisb-modus-themes-setup-faces
     "org-modern"
     (setopt org-modern-tag-faces
             `(("project"
                :foreground ,(face-background 'default nil t)
                :background ,(face-foreground 'modus-themes-fg-magenta-cooler nil t))))))

  ;;; Org-appear
  ;; Show hidden characters (e.g. emphasis markers, link brackets) when point is
  ;; over enclosed content
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-delay 0.0)
    (org-appear-trigger 'always)
    (org-appear-autoemphasis t)
    (org-appear-autolinks 'just-brackets)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    (org-appear-inside-latex t))

  ;;; Org-web-tools
  ;; Paste https links with automatic descriptions
  (use-package org-web-tools
    :bind ( :map krisb-yank-keymap
            ("b" . org-web-tools-insert-link-for-url))
    :config
    (with-eval-after-load 'org-attach
      (add-to-list 'org-attach-commands
                   '((?w) org-web-tools-archive-attach
                     "Download then attach an archive of a webpage using `org-web-tools'\n")))

    (advice-add 'org-web-tools-read-url-as-org :after #'view-mode))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-org.el"
  ;;; Provide
  (provide 'krisb-org)
#+end_src

*** =krisb-org-export.el=

#+begin_src emacs-lisp :tangle "modules/krisb-org-export.el"
  ;;; Ox (org-export)
  (use-package ox
    :ensure nil
    :custom
    (org-export-coding-system 'utf-8)
    (org-export-with-tags t)
    (org-export-with-smart-quotes t)
    (org-export-with-sub-superscripts '{}) ; Requires brackets to recognize superscripts and subscripts
    (org-export-with-section-numbers nil)
    (org-time-stamp-formats               ; Format of time stamps in the file
     '("%Y-%m-%d %a" . "%Y-%m-%d %a %H:%M"))
    (org-display-custom-times t)          ; Export with custom time stamps?
    (org-time-stamp-custom-formats        ; Format of exported time stamps
     '("%a, %b %-d" . "%a, %b %-d (%-H:%M%p)"))

    (org-image-actual-width 700)          ; Image widths on export

    ;; Asynchronous
    (org-export-in-background nil)        ; Default?
    (org-export-async-debug t)
    (org-export-async-init-file (locate-library "quickstart")) ; TODO 2024-10-19: Make a "quickstart" init.el
    :config
    ;; Taken from
    ;; https://endlessparentheses.com/better-time-stamps-in-org-export.html
    (defun krisb-org-export-filter-timestamp-reformat (timestamp backend info)
      "Remove <> or [] surrounding time-stamps when exporting HTML and LaTeX."
      (cond
       ((org-export-derived-backend-p backend 'latex)
        (replace-regexp-in-string "[<>]\\|[][]" "" timestamp))
       ((org-export-derived-backend-p backend 'html)
        (replace-regexp-in-string "&[lg]t;\\|[][]" "" timestamp))))
    (add-to-list 'org-export-filter-timestamp-functions #'krisb-org-export-filter-timestamp-reformat))


  ;;; Ox-odt
  (use-package ox-odt
    :ensure nil
    :custom
    (org-odt-preferred-output-format "docx")) ; Convert to .docx at the end of conversion

  ;;; Provide
  (provide 'krisb-org-export)
#+end_src

*** =krisb-flymake.el=

#+begin_src emacs-lisp :tangle "modules/krisb-flymake.el"
  ;;; Flymake
  (use-package flymake
    :diminish
    :hook ((prog-mode org-mode) . flymake-mode)
    :custom
    (elisp-flymake-byte-compile-load-path ; Recognize files Emacs knows about
     (append elisp-flymake-byte-compile-load-path load-path))
    (flymake-wrap-around nil)
    (flymake-fringe-indicator-position nil)       ; Disable fringe indicators
    (flymake-show-diagnostics-at-end-of-line nil)
    (flymake-suppress-zero-counters t)
    (flymake-mode-line-format
     '(flymake-mode-line-exception flymake-mode-line-counters))
    (flymake-mode-line-counter-format     ; Remove surrounding brackets
     '(:eval
       ;; NOTE 2024-02-12: Need to have first and last elements be strings!
       ;; Otherwise a counter might be hidden
       (let ((counters '(""
                         flymake-mode-line-error-counter
                         flymake-mode-line-warning-counter
                         flymake-mode-line-note-counter
                         "")))
         (if (mode-line-window-selected-p)
             counters
           (propertize (format-mode-line counters)
                       'face '(:inherit (bold mode-line-inactive))))))))

  ;;; Flymake-collection
  (use-package flymake-collection
    :after flymake
    :custom
    (flymake-collection-hook-inherit-config t)
    (flymake-collection-hook-ignore-modes nil)
    :config
    ;; NOTE 2024-10-05: Set `flymake-collection-config' immediately when the
    ;; package loads, so the first invocation of `flymake-collection-hook-setup'
    ;; uses my configured value.
    ;; NOTE 2024-10-05: I configure vale to use proselint to my liking, so I
    ;; disable the proselint checker. One reason that motivates this decision is
    ;; vale's performance compared to proselint (see
    ;; https://github.com/errata-ai/vale?tab=readme-ov-file#benchmarks).
    (setf (alist-get 'org-mode flymake-collection-config)
          '((flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :depth -1
             :disabled t))
          (alist-get 'markdown-mode flymake-collection-config)
          '((flymake-collection-markdownlint
             :depth -50)
            (flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :disabled t
             :depth -1))
          (alist-get 'notmuch-message-mode flymake-collection-config)
          '((flymake-collection-vale
             :depth -20)
            (flymake-collection-proselint
             :depth -1
             :disabled t)))

    (flymake-collection-hook-setup))

  ;;; Provide
  (provide 'krisb-flymake)
#+end_src

*** Note-taking

**** =krisb-denote.el=

#+begin_src emacs-lisp :tangle "modules/krisb-denote.el"
  ;;; Denote
  (use-package denote
    :pin gnu-elpa-devel
    :autoload (denote-directory-files krisb-denote-auto-rename-file krisb-denote-sluggify-keyword)
    :commands (denote denote-open-or-create)
    :hook ((dired-mode . denote-dired-mode)
           (denote-dired-mode . toggle-truncate-lines))
    :bind ( :map krisb-note-keymap
            ("f" . denote-open-or-create)
            ("i" . denote-link-or-create)
            ("e" . denote-org-extras-extract-org-subtree)
            ("k" . denote-rename-file-keywords)
            ("l" . denote-find-backlink)
            ("L" . denote-backlinks))
    :custom
    (denote-directory krisb-notes-directory)
    (denote-prompts '(subdirectory title keywords signature template))
    (denote-file-name-slug-functions '((title . denote-sluggify-title)
                                       (signature . denote-sluggify-signature)
                                       (keyword . krisb-denote-sluggify-keyword)))
    (denote-known-keywords nil)

    (denote-rename-confirmations '(add-front-matter))
    (denote-org-front-matter "#+title: %s
  ,#+date: %s
  ,#+filetags: %s
  ,#+identifier: %s
  ")
    (denote-templates
     '((plain . "\n")
       (mla . "#+latex_class: mla
  ,#+cite_export: biblatex mla-new
  ,#+professor:
  ,#+course:
  ,#+export_file_name:

  ,* Potential titles

  ,* 1 Draft                                                     :export:ignore:

  ,* Works Cited                                                 :ignore:export:

  ,#+begin_export LaTeX
  \\newpage
  \\center
  ,#+end_export

  ,#+print_bibliography:")
       (buoy . "* Responses

  ,* Biographical information

  + Buoy nominations :: tk
  + Instagram handle :: tk

  ,* Potential titles

  1.

  ,* 1 Draft                                                     :ignore:export:
  ")))

    ;; Buffer name
    (denote-rename-buffer-format "%s %t%b")
    (denote-rename-buffer-backlinks-indicator " ⟷")

    ;; Backlinks
    (denote-backlinks-show-context t)
    (denote-backlinks-display-buffer-action
     '((display-buffer-reuse-window display-buffer-below-selected)
       (window-height . fit-window-to-buffer)
       (post-command-select-window . t)
       (dedicated . t)
       (window-parameters . ((mode-line-format . none)))))

    ;; Miscellaneous
    (denote-date-prompt-use-org-read-date t)
    (denote-org-store-link-to-heading)
    :config
    (denote-rename-buffer-mode 1)
    (denote-menu-bar-mode 1)

    (krisb-modus-themes-setup-faces
     "denote"
     (set-face-attribute 'denote-faces-link nil :weight 'normal :foreground fg-active-argument :inherit 'unspecified)
     (set-face-attribute 'denote-faces-signature nil :weight 'bold)
     (set-face-attribute 'denote-faces-title nil :weight 'semibold :foreground cyan-cooler)
     (set-face-attribute 'denote-faces-keywords nil :foreground keyword :slant 'italic)
     (set-face-attribute 'denote-faces-date nil :foreground 'unspecified :inherit 'shadow))

    ;; Camel cased keywords
    (defun krisb-denote-sluggify-keyword (str)
      "Sluggify STR while joining separate words.
    My version camelCases keywords."
      (require 's)
      (s-lower-camel-case (denote-slug-hyphenate str)))


    ;; Add inbox to `org-refile-targets'
    (with-eval-after-load 'org-refile
      (add-to-list 'org-refile-targets
                   `(,(car (denote-directory-files "20221011T101254")) . (:maxlevel . 2)))))

  ;;; Denote-journal-extras
  (use-package denote-journal-extras
    :ensure nil
    :custom
    (denote-journal-extras-directory
     (expand-file-name "commonplace_book/journal" denote-directory))
    (denote-journal-extras-keyword "journal")
    (denote-journal-extras-title-format 'day-date-month-year-24h))

  ;;; Krisb-denote-ext
  (use-package krisb-denote-ext
    :ensure nil
    :after denote
    :hook (after-save . krisb-denote-ext-auto-rename-file))

  ;;; Denote-explore
  ;; Useful Denote utilities
  (use-package denote-explore
    :after denote
    ;; Don't forget to install the required dependencies required for my chosen
    ;; `denote-explore-network-format'
    :ensure-system-package ((dot . graphviz)
                            (R . r))
    :custom
    (denote-explore-network-directory     ; Have to end path in slash
     (no-littering-expand-var-file-name "denote-explore/"))
    (denote-explore-network-format 'd3.js)
    (denote-explore-network-graphviz-filetype "pdf")
    (denote-explore-network-keywords-ignore '("archive")))

  ;;; Citar-denote
  (use-package citar-denote
    :diminish
    :bind (("C-c b c" . citar-create-note)
           :map krisb-note-keymap
           ("b b" . citar-denote-link-reference)
           ("b o" . citar-denote-dwim)
           ("b c" . citar-create-note)
           ("b n" . citar-denote-open-note)
           ("b k a" . citar-denote-add-citekey)
           ("b k r" . citar-denote-remove-citekey))
    :custom
    (citar-denote-subdir "/bib/")
    (citar-denote-signature nil)
    (citar-denote-title-format nil)       ; Use citekey as title
    (citar-denote-title-format-authors 2)
    (citar-denote-title-format-andstr "and")
    (citar-denote-keyword "bib")
    (citar-denote-use-bib-keywords nil)
    (citar-denote-template 'default)
    (citar-denote-file-types
     `((org
        :reference-format "#+reference: %s\n" ; Keep single space
        :reference-regex "^#\\+reference\\s-*:")
       (markdown-yaml
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")
       (markdown-toml
        :reference-format "reference  = %s\n"
        :reference-regex "^reference\\s-*=")
       (text
        :reference-format "reference:  %s\n"
        :reference-regex "^reference\\s-*:")))
    :config
    (citar-denote-mode 1)

    ;; Keep the reference keyword after Denote's identifier keyword
    (defun krisb-citar-denote--add-reference (citekey file-type)
      "Like `citar-denote--add-reference' but adds reference to specific line.
  Namely, adds the #+reference after the #+identifier line."
      (save-excursion
        (goto-char (point-min))
        (re-search-forward (rx bol (literal "#+identifier:")) nil t)
        (if (eq (or file-type 'org) 'org)
            (forward-line 1)
          (forward-line -2))
        (insert
         (format (citar-denote--reference-format file-type) citekey))))
    (advice-add 'citar-denote--add-reference :override #'krisb-citar-denote--add-reference))

  ;;; Denote-interface
  (use-package denote-interface
    :vc (:url "git@github.com:krisbalintona/denote-interface.git"
              :rev :newest)
    :autoload denote-interface--signature-lessp
    :bind ( :map krisb-note-keymap
            ("m" . denote-interface-list)
            ("r" . denote-interface-set-signature-list)
            ("R" . denote-interface-set-signature-minibuffer))
    :custom
    (denote-interface-signature-column-width
     (+ 6 (cl-loop for file in (denote-directory-files)
                   maximize (length (denote-retrieve-filename-signature file)))))
    (denote-interface-title-column-width 120)
    (denote-interface-starting-filter-presets
     '("zettels/[^z-a]*" "bib/[^z-a]*"))
    (denote-interface-starting-filter "zettels/[^z-a]*")
    :init
    (with-eval-after-load 'denote
      (setopt denote-sort-signature-comparison-function #'denote-interface--signature-lessp)))

  ;;; Provide
  (provide 'krisb-denote)
#+end_src

**** =krisb-web-annotations.el=
#+begin_src emacs-lisp :tangle "modules/krisb-web-annotations.el"
  ;;; Org-remark
  (use-package org-remark
    :diminish (org-remark-mode org-remark-global-tracking-mode)
    :hook (on-first-file . org-remark-global-tracking-mode)
    :bind ( :map org-remark-mode-map
            ("C-c r r" . (lambda () (interactive) (org-remark-highlights-load)))
            ("C-c r l" . org-remark-mark-line)
            ("C-c r d" . org-remark-delete)
            ("C-c r c" . org-remark-change)
            ("C-c r t" . org-remark-toggle)
            ("C-c r o" . org-remark-open)
            ("C-c r v" . org-remark-view)
            ("C-c r n" . org-remark-next)
            ("C-c r p" . org-remark-prev)
            :repeat-map krisb-org-remark-mode-repeat-map
            ("d" . org-remark-delete)
            ("c" . org-remark-change)
            ("t" . org-remark-toggle)
            ("o" . org-remark-open)
            ("v" . org-remark-view)
            ("n" . org-remark-next)
            ("p" . org-remark-prev))
    :custom
    (org-remark-source-file-name 'abbreviate-file-name)
    (org-remark-notes-file-name
     (no-littering-expand-var-file-name "org-remark/marginalia.org"))
    (org-remark-notes-display-buffer-action `((display-buffer-in-side-window)
                                              (side . right)
                                              (slot . 1)))
    (org-remark-create-default-pen-set nil) ; Make my own pens
    (org-remark-notes-auto-delete nil)
    :init
    (with-eval-after-load 'eww
      (org-remark-eww-mode 1))
    (with-eval-after-load 'nov
      (org-remark-nov-mode 1))
    (with-eval-after-load 'info
      (org-remark-info-mode 1))
    :config
    (use-package all-the-icons
      :config
      (setopt org-remark-icon-notes (all-the-icons-material "details")
              org-remark-icon-position-adjusted (all-the-icons-material "error")
              org-remark-line-icon (all-the-icons-faicon "sticky-note"))))

  ;;; Kris-org-remark-ext
  (use-package krisb-org-remark-ext
    :ensure nil
    :after org-remark
    :bind ( :map org-remark-mode-map
            ("C-c r m" . krisb-org-remark-mark-transient))
    :config
    (krisb-modus-themes-setup-faces
     "org-remark-ext"
     (set-face-attribute 'krisb-org-remark-resonant-face nil
                         :background bg-red-intense)
     (set-face-attribute 'krisb-org-remark-resonant-minor-face nil
                         :underline `(:color ,bg-red-intense :style wave))

     (set-face-attribute 'krisb-org-remark-thesis-face nil
                         :background bg-yellow-subtle)
     (set-face-attribute 'krisb-org-remark-thesis-minor-face nil
                         :underline `(:color ,bg-yellow-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-detail-face nil
                         :background bg-blue-subtle)
     (set-face-attribute 'krisb-org-remark-detail-minor-face nil
                         :underline `(:color ,bg-blue-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-outline-face nil
                         :background bg-green-subtle)
     (set-face-attribute 'krisb-org-remark-outline-minor-face nil
                         :underline `(:color ,bg-green-subtle :style wave))

     (set-face-attribute 'krisb-org-remark-external-face nil
                         :background bg-magenta-intense)
     (set-face-attribute 'krisb-org-remark-external-minor-face nil
                         :underline `(:color ,bg-magenta-intense :style wave))))

  ;;; Provide
  (provide 'krisb-web-annotations)
#+end_src
**** =krisb-citations.el=

#+begin_src emacs-lisp :tangle "modules/krisb-citations.el"
  ;;; Oc (org-cite)
  ;; Built-in citations in org-mode
  (use-package oc
    :ensure nil
    :after org
    :custom
    (org-cite-global-bibliography krisb-bibliography-files)
    (org-cite-csl-locales-dir nil)
    (org-cite-csl-styles-dir (expand-file-name "styles/" krisb-zotero-directory))
    (org-cite-export-processors
     '((md . (csl "chicago-fullnote-bibliography.csl"))   ; Footnote reliant
       (latex biblatex)                                   ; For humanities
       (odt . (csl "chicago-fullnote-bibliography.csl"))  ; Footnote reliant
       (docx . (csl "chicago-fullnote-bibliography.csl")) ; Footnote reliant
       (t . (csl "modern-language-association.csl"))))    ; Fallback
    :custom-face
    ;; Have citation link faces look closer to as they were for `org-ref'
    (org-cite ((t (:foreground "DarkSeaGreen4"))))
    (org-cite-key ((t (:foreground "forest green" :slant italic)))))

  ;;; Citar
  (use-package citar
    :hook (org-mode . citar-capf-setup)
    :bind (("C-c b b" . citar-insert-citation)
           ("C-c b o" . citar-open)
           ("C-c b f" . citar-open-files)
           ("C-c b n" . citar-open-notes)
           :map org-mode-map
           ([remap org-cite-insert] . citar-insert-citation))
    :custom
    (citar-bibliography krisb-bibliography-files)
    (citar-notes-paths (list krisb-notes-directory))
    (citar-open-entry-function #'citar-open-entry-in-file)
    (citar-default-action #'citar-open-files)
    :config
    (with-eval-after-load 'all-the-icons
      ;; Taken from https://github.com/emacs-citar/citar/wiki/Indicators
      (defvar citar-indicator-files-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "file-o"
                  :face 'all-the-icons-green
                  :v-adjust -0.1)
         :function #'citar-has-files
         :padding "  " ; Need this because the default padding is too low for these icons
         :tag "has:files"))
      (defvar citar-indicator-links-icons
        (citar-indicator-create
         :symbol (all-the-icons-octicon
                  "link"
                  :face 'all-the-icons-orange
                  :v-adjust 0.01)
         :function #'citar-has-links
         :padding "  "
         :tag "has:links"))
      (defvar citar-indicator-notes-icons
        (citar-indicator-create
         :symbol (all-the-icons-material
                  "speaker_notes"
                  :face 'all-the-icons-blue
                  :v-adjust -0.3)
         :function #'citar-has-notes
         :padding "  "
         :tag "has:notes"))
      (defvar citar-indicator-cited-icons
        (citar-indicator-create
         :symbol (all-the-icons-faicon
                  "circle-o"
                  :face 'all-the-icon-green)
         :function #'citar-is-cited
         :padding "  "
         :tag "is:cited"))
      (setq citar-indicators
            (list citar-indicator-files-icons
                  citar-indicator-links-icons
                  citar-indicator-notes-icons
                  citar-indicator-cited-icons))))

  ;;; Citar-org
  ;; Use `citar' with `org-cite'
  (use-package citar-org
    :after oc
    :ensure nil
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-org-styles-format 'short)
    :config
    ;; Faster citation rendered (i.e. activation). Replaces the *VERY SLOW*
    ;; `'org-cite-basic-activate' (which `citar' relies on in
    ;; `citar-org-activate') with a faster version. Practically necessary if I
    ;; want to edit a line with a citation in Org without having to wait several
    ;; seconds for it to render. See for more information on the matter:
    ;; 1. https://www.reddit.com/r/orgmode/comments/td76wz/comment/i0lpg7k/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
    ;; 2. https://list.orgmode.org/87ils5sz8x.fsf@localhost/t/#u
    (defun krisb-citar-basic-activate (citation)
      "Like `org-cite-basic-activate' but faster.
  Leverages citar's caching."
      (pcase-let ((`(,beg . ,end) (org-cite-boundaries citation))
                  ;; NOTE 2024-09-05: Use `citar' (and its cache) to get all keys
                  (keys (let (keys)
                          (maphash (lambda (key value) (push key keys))
                                   (citar-get-entries))
                          keys)))
        (put-text-property beg end 'font-lock-multiline t)
        (add-face-text-property beg end 'org-cite)
        (dolist (reference (org-cite-get-references citation))
          (pcase-let* ((`(,beg . ,end) (org-cite-key-boundaries reference))
                       (key (org-element-property :key reference)))
            ;; Highlight key on mouse over.
            (put-text-property beg end
                               'mouse-face
                               org-cite-basic-mouse-over-key-face)
            (if (member key keys)
                ;; Activate a correct key. Face is `org-cite-key' and `help-echo'
                ;; displays bibliography entry, for reference. <mouse-1> calls
                ;; `org-open-at-point'.
                ;; NOTE 2024-09-05: Use `citar' (and its cache) to create the
                ;; bibliographic entry text used in the help echo
                (let* ((entry (string-trim (citar-format-reference (list key))))
                       (bibliography-entry
                        (org-element-interpret-data entry)))
                  (add-face-text-property beg end 'org-cite-key)
                  (put-text-property beg end 'help-echo bibliography-entry)
                  (org-cite-basic--set-keymap beg end nil))
              ;; Activate a wrong key. Face is `error', `help-echo' displays
              ;; possible suggestions.
              (add-face-text-property beg end 'error)
              (let ((close-keys (org-cite-basic--close-keys key keys)))
                (when close-keys
                  (put-text-property beg end 'help-echo
                                     (concat "Suggestions (mouse-1 to substitute): "
                                             (mapconcat #'identity close-keys " "))))
                ;; When the are close know keys, <mouse-1> provides completion to
                ;; fix the current one. Otherwise, call `org-cite-insert'.
                (org-cite-basic--set-keymap beg end (or close-keys 'all))))))))
    (setopt citar-org-activation-functions '(krisb-citar-basic-activate citar-org-activate-keymap)))

  ;;; Provide
  (provide 'krisb-citations)
#+end_src

**** =krisb-pdfs.el=

#+begin_src emacs-lisp :tangle "modules/krisb-pdfs.el"
  ;;; Doc-view
  (use-package doc-view
    :custom
    (doc-view-resolution 192))

  ;;; Pdf-tools
  ;;;; Itself
  ;; View pdfs and interact with them. Has many dependencies
  ;; https://github.com/politza/pdf-tools#compiling-on-fedora
  (use-package pdf-tools
    ;; FIXME 2024-01-13: This is a pull request fork that implements continuous
    ;; scrolling (`pdf-view-roll-minor-mode'). See
    ;; https://github.com/vedang/pdf-tools/pull/224
    ;; Must call `pdf-tools-install' or `pdf-loader-install' (which defers
    ;; loading; see its docstring and
    ;; https://github.com/vedang/pdf-tools?tab=readme-ov-file#installing-pdf-tools-elisp-code)
    ;; to have PDF files use pdf-view-mode and have everything required loaded
    :hook (on-first-buffer . pdf-loader-install)
    :bind ( :map pdf-view-mode-map
            ("C-c C-r a" . pdf-view-auto-slice-minor-mode)
            ;; Additionally useful since it lets you scroll via
            ;; `scroll-other-window'
            ([remap scroll-up-command] . pdf-view-scroll-up-or-next-page)
            ([remap scroll-down-command] . pdf-view-scroll-down-or-previous-page))
    :config
    ;; Make PDF registers persistent
    (with-eval-after-load 'desktop
      (add-to-list 'desktop-locals-to-save 'pdf-view-register-alist)))

  ;;;; Pdf-view
  (use-package pdf-view
    :ensure nil
    :autoload krisb-pdf-view-cleanup-windows-h
    :hook (pdf-view-mode . (lambda () (add-hook 'kill-buffer-hook #'krisb-pdf-view-cleanup-windows-h nil t)))
    :custom
    (pdf-view-resize-factor 1.1)
    (pdf-view-display-size 'fit-page)
    (pdf-view-continuous nil) ; REVIEW 2024-01-16: Change this when I get to use image-roll?
    ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
    (pdf-view-use-scaling t)
    (pdf-view-use-imagemagick t)
    :config
    ;; Taken from Doom
    (defun krisb-pdf-view-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      ;; We add a guard here because sometimes things go wrong and this function
      ;; is called before `pdf-annot' is loaded, causing an error
      (when (featurep 'pdf-annot)
        (when (buffer-live-p pdf-annot-list-document-buffer)
          (pdf-info-close pdf-annot-list-document-buffer))
        (when (buffer-live-p pdf-annot-list-buffer)
          (kill-buffer pdf-annot-list-buffer))
        (let ((contents-buffer (get-buffer "*Contents*")))
          (when (and contents-buffer (buffer-live-p contents-buffer))
            (kill-buffer contents-buffer))))))

  ;;;; Krisb-pdfs-ext
  ;; Emacs wrapper and convenience functions for changing package metadata using
  ;; `pdftk'. See https://unix.stackexchange.com/a/72457 for more information on
  ;; the CLI commands involved.
  (use-package krisb-pdfs-ext
    :ensure nil
    :after pdf-view
    :ensure-system-package pdftk
    :bind ( :map pdf-view-mode-map
            ("C-c m" . 'krisb-pdf-tools--metadata-modify)
            ("C-;" . krisb-avy-pdf-highlight)
            :map pdf-annot-list-mode-map
            ([remap tablist-push-regexp-filter] . krisb-pdf-annot-list-filter-regexp)))

  ;;;; Pdf-outline
  (use-package pdf-outline
    :ensure nil
    :custom
    (pdf-outline-enable-imenu t)
    (pdf-outline-display-labels t)
    (pdf-outline-imenu-use-flat-menus nil))

  ;;;; Pdf-annot
  (use-package pdf-annot
    :ensure nil
    :hook (pdf-annot-list-mode-hook krisb-pdf-annot--setup-context-window-display-action)
    :custom
    (pdf-annot-color-history ; "Default" color list. Appears at the top of annotation color change commands
     '("yellow" "SteelBlue1" "SeaGreen3" "LightSalmon1" "MediumPurple1"))
    (pdf-annot-list-format '((page . 3)
                             (color . 8)
                             (text . 68)
                             (type . 10)))
    (pdf-annot-list-highlight-type nil)
    :config
    ;; Fit the "contents" window to buffer height
    (defun krisb-pdf-annot-list-context-function (id buffer)
      "Show the contents of an Annotation.

  For an annotation identified by ID, belonging to PDF in BUFFER,
  get the contents and display them on demand."
      (with-current-buffer (get-buffer-create "*Contents*")
        (set-window-buffer nil (current-buffer))
        (let ((inhibit-read-only t))
          (erase-buffer)
          (when id
            (save-excursion
              (insert
               (pdf-annot-print-annotation
                (pdf-annot-getannot id buffer)))))
          (read-only-mode 1))
        (fit-window-to-buffer)
        (visual-line-mode)))
    (advice-add 'pdf-annot-list-context-function :override #'krisb-pdf-annot-list-context-function)

    (defun krisb-pdf-annot--setup-context-window-display-action ()
      "Set the display action for the \"context buffer\".
  The context buffer is the buffer that shows annotation contents in
  `pdf-annot-mode'"
      (setq-local tablist-context-window-display-action
                  '((display-buffer-reuse-window tablist-display-buffer-split-below-and-attach)
                    (window-height . 0.25)
                    (inhibit-same-window . t)
                    (window-parameters (no-other-window . t)
                                       (mode-line-format . none))))))

  ;;; Saveplace-pdf-view
  ;; Save place in pdf-view buffers
  (use-package saveplace-pdf-view
    :after saveplace)

  ;;; Provide
  (provide 'krisb-pdfs)
  ;;; krisb-pdfs.el ends here
#+end_src

**** =krisb-videos.el=
#+begin_src emacs-lisp :tangle "modules/krisb-videos.el"
  ;;; MPV
  ;; Dependency for packages that interact with mpv
  (use-package mpv
    ;; NOTE 2024-03-31: See
    ;; https://github.com/kljohann/mpv.el/issues/31#issuecomment-1856491594 for
    ;; why I use the latest GitHub version
    :pin melpa
    :bind-keymap ("C-M-s-m" . krisb-mpv-map)
    :custom
    (mpv-default-options (list "--save-position-on-quit"))
    :config
    (require 'krisb-mpv))

  ;;; Ytdl
  (use-package ytdl
    :ensure-system-package (yt-dlp)
    :custom
    (ytdl-command "yt-dlp")
    (ytdl-always-query-default-filename 'yes-confirm)
    (ytdl-music-folder (expand-file-name "~/Music/"))
    (ytdl-video-folder (expand-file-name "~/Videos/"))
    (ytdl-download-types
     `(("Downloads" "d" ytdl-download-folder ytdl-download-extra-args)
       ("Music"  "m" ytdl-music-folder ytdl-music-extra-args)
       ("Videos" "v"  ytdl-video-folder ytdl-video-extra-args)
       ("Temp" "t" ,(expand-file-name "/tmp/") ("-S" "res:720,fps"))))
    :config
    ;; Custom `org-attach' integration
    (defun krisb-ytdl-org-attach (url)
      "Download and video from URL and attach it to `org-attach-dir'.
  A modified version of `ytdl-download'."
      (interactive "MProvide URL: ")
      (when (ytdl--youtube-dl-missing-p)
        (error "youtube-dl is not installed."))
      (let* ((dir (or (org-attach-dir) (org-attach-dir-get-create)))
             (destination (expand-file-name (ytdl--get-filename dir url) dir))
             (extra-ytdl-args '("--write-auto-sub" "--write-sub" "--sub-lang" "en" "--convert-subs" "srt" ; Create .srt file
                                ;; Set maximum resolution and file type
                                "-S" "res:720,fps,ext:mp4:m4a"
                                "--recode" "mp4"))
             (dl-type-name "Org-attach"))
        (ytdl--download-async url
                              destination
                              extra-ytdl-args
                              nil
                              dl-type-name)))
    (with-eval-after-load 'org-attach
      (add-to-list 'org-attach-commands
                   '((?Y ?\C-Y) krisb-ytdl-org-attach
                     "Provide a URL and have \"ytdl\" download the corresponding video and attach that file.")
                   t)))

  ;;; Provide
  (require 'krisb-videos)
#+end_src

*** Todos

**** =krisb-org-agenda.el=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Calendar
  (use-package calendar
    :ensure nil
    :bind ( :map krisb-open-keymap
            ("c" . calendar))
    :custom
    (calendar-time-display-form
     '( 24-hours ":" minutes (when time-zone (format "(%s)" time-zone))))
    (calendar-week-start-day 1)           ; Monday
    (calendar-time-zone-style 'symbolic)

    ;; Diary
    (calendar-mark-diary-entries-flag t)

    ;; Holidays
    (calendar-mark-holidays-flag t)
    :init
    (defun krisb-get-lat-lon ()
      "Fetch latitude and longitude via IP-based geolocation service."
      (let (lat lon (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (_status)
                        (goto-char (point-min))
                        (re-search-forward "^$")
                        (let* ((json-object-type 'hash-table)
                               (json (json-read)))
                          (setq lat (gethash "lat" json)
                                lon (gethash "lon" json)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not lat) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-lat-lon] Maximum timeout reached"))
        (if (and lat lon)
            (cons lat lon)
          (message "[krisb-get-lat-lon] Failed to fetch geolocation data")
          nil)))

    (defun krisb-get-location-name ()
      "Get the current location."
      (let (city region (timeout 0))
        (url-retrieve "http://ip-api.com/json"
                      (lambda (status)
                        (goto-char (point-min))
                        (re-search-forward "\n\n")  ;; Skip the headers
                        (let* ((json-object-type 'hash-table)
                               (json-key-type 'string)
                               (json-array-type 'list)
                               (data (json-read)))
                          (setq city (gethash "city" data)
                                region (gethash "region" data)))))
        ;; Wait until the data is retrieved or timeout.
        (while (and (not city) (not region) (< timeout 50))
          (setq timeout (1+ timeout))
          (sit-for 0.1))
        (when (= timeout 50)
          (message "[krisb-get-location-name] Maximum timeout reached"))
        (if (and city region)
            (format "%s, %s" city region)
          (message "[krisb-get-location-name] Failed to fetch geolocation data")
          nil)))
    :config
    ;; Solar
    (require 'solar)
    (krisb-evaluate-when-internet
      20
      (let ((coords (krisb-get-lat-lon)))
        (setopt calendar-latitude (car coords)
                calendar-longitude (cdr coords)))
      (setopt calendar-location-name (krisb-get-location-name))))
#+end_src

**** =Org-agenda= and =org-super-agenda=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-agenda
  (use-package org-agenda
    :ensure nil
    :hook (org-agenda-mode . hl-line-mode)
    :bind ( :map krisb-open-keymap
            ("a" . org-agenda)
            :map org-agenda-mode-map
            ("`" . krisb-org-agenda-process))
    :custom
    ;; Effort
    (org-agenda-sort-noeffort-is-high t)
    (org-effort-durations
     '(("m" . 1)
       ("h" . 60)
       ("d" . 1440)
       ("w" . 10080)
       ("mon" . 43200)
       ("y" . 525960.0)))

    ;; Tags
    (org-use-tag-inheritance t)
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tags-exclude-from-inheritance '("project" "inbox"))
    (org-use-property-inheritance '("CATEGORY" "ARCHIVE"))
    (org-agenda-show-inherited-tags t)
    (org-use-fast-todo-selection 'expert)
    (org-tag-faces
     '(("project" . outline-1)))

    ;; Dependencies
    (org-enforce-todo-dependencies t)
    (org-enforce-todo-checkbox-dependencies nil)
    (org-agenda-dim-blocked-tasks t)

    ;; Org agenda
    (org-agenda-file-regexp "\\`[^.].*\\.org\\'")
    (org-agenda-sticky t) ; Set to nil if frequently modifying `org-agenda-custom-commands'
    (org-agenda-window-setup 'only-window)
    (org-agenda-restore-windows-after-quit t)
    (org-agenda-tags-column 0)
    (org-agenda-start-on-weekday 1)
    (org-agenda-format-date #'krisb-org-agenda-format-date-aligned)
    (org-agenda-tags-todo-honor-ignore-options t)
    (org-agenda-todo-ignore-scheduled nil)
    (org-agenda-remove-times-when-in-prefix t)
    (org-agenda-remove-tags 'prefix)
    (org-agenda-prefix-format
     '((agenda  . " %i %-8:c%?-12t% s%-5e%(krisb-org-agenda-breadcrumb 20)")
       (todo  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (tags  . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")
       (search . " %i %-8:c%-5e%(krisb-org-agenda-breadcrumb 20)")))
    ;; See `krisb-org-sort-agenda-by-created-time' for my user-defined sorter
    (org-agenda-sorting-strategy
     '((agenda habit-down urgency-down priority-down user-defined-up deadline-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (todo urgency-down priority-down user-defined-up todo-state-up category-up)
       (search todo-state-up priority-down category-keep)))
    ;; See
    ;; https://emacs.stackexchange.com/questions/17302/is-there-a-way-to-make-org-mode-count-repetitive-tasks-done-certain-hours-past-m?rq=1
    (org-extend-today-until 3)
    (org-use-effective-time t)
    (org-agenda-block-separator ?─)
    (org-deadline-warning-days 3)
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")
    (org-agenda-breadcrumbs-separator " ⇛ ")
    (org-agenda-skip-scheduled-delay-if-deadline nil)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-auto-exclude-function #'krisb-org-agenda-auto-exclude-function)
    (org-agenda-compact-blocks nil)

    ;; Capture templates
    ;; See also `org-capture-templates-contexts'
    (org-capture-templates
     `(("t" "Todo" entry
        (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
        "* TODO %? :inbox:%^g\n"
        :empty-lines 1)
       ("T" "Todo (without processing)" entry
        (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
        "* TODO %? %^g\n"
        :empty-lines 1)
       ("i" "Idea" entry
        (file+olp+datetree ,(car (denote-directory-files "20221011T101254")))
        "* %?\n"
        :tree-type month
        :empty-lines 1
        :clock-in t
        :clock-resume t
        :kill-buffer t)
       ("I" "Idea with context" entry
        (file+olp+datetree ,(car (denote-directory-files "20221011T101254")))
        "* %?\n\n+ %^{Context string}: %a"
        :tree-type month
        :empty-lines 1
        :clock-in t
        :clock-resume t
        :kill-buffer t)
       ("j" "Journal" entry
        (file+olp+datetree ,(car (denote-directory-files "20241006T214811")))
        "* %<%c>\n\n%?"
        :tree-type month
        :jump-to-captured t
        :immediate-finish t
        :empty-lines 1
        :clock-in t
        :clock-resume t)))
    (org-capture-use-agenda-date t)       ; Use the time-at-point if any

    ;; Todos
    (org-fast-tag-selection-single-key 'expert)
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h@/!)" "MAYBE(m)" "|" "DONE(d!/@)" "CANCELED(c@/!)")))
    (org-todo-keyword-faces
     '(("NEXT" . (bold success))
       ("TODO" . org-todo)
       ("HOLD" . (shadow error))
       ("MAYBE" . (shadow org-todo))
       ("DONE" . (bold org-done))
       ("CANCELED" . error)))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-highest-priority ?A)
    (org-default-priority ?E)
    (org-lowest-priority ?F)
    (org-priority-faces
     '((?A . (bold org-priority))
       (?B . (bold org-priority))
       (?C . org-priority)
       (?D . org-priority)
       (?E . (shadow org-priority))
       (?F . (shadow org-priority))))
    ;; FIXME 2024-10-02: Haven't found a way to get this to mesh well with my
    ;; workflow
    (org-stuck-projects
     `("+project/-DONE-CANCELED"
       ("NEXT" "TODO")
       nil
       nil
       ,(rx (regexp org-not-done-heading-regexp))))

    ;; Input
    (org-read-date-prefer-future 'time)
    :custom-face
    (org-drawer ((t (:height 0.9))))
    (org-mode-line-clock ((t (:inherit org-agenda-date))))
    :init
    (defun krisb-org-agenda-breadcrumb (len)
      "Formatted breadcrumb for current `org-agenda' item."
      (org-with-point-at (org-get-at-bol 'org-marker)
        (let ((s (if (derived-mode-p 'org-mode)
                     (org-format-outline-path (org-get-outline-path)
                                              (1- (frame-width))
                                              nil org-agenda-breadcrumbs-separator)
                   ;; Not in Org buffer. This can happen, for example, in
                   ;; `org-agenda-add-time-grid-maybe' where time grid does not
                   ;; correspond to a particular heading.
                   "")))
          (if (equal "" s) ""
            (concat (truncate-string-to-width s len 0 nil (truncate-string-ellipsis)) org-agenda-breadcrumbs-separator)))))
    :config
    ;; Populate `org-agenda-files'
    (dolist (f (directory-files-recursively krisb-org-agenda-directory
                                            (rx (or (literal ".org") (literal ".org_archive")) eol)))
      (add-to-list 'org-agenda-files f))

    ;; Taken from
    ;; https://github.com/psamim/dotfiles/blob/master/doom/config.el#L213
    (defun krisb-org-agenda-format-date-aligned (date)
      "Format a DATE string for display in the agenda or timeline.
  This function makes sure that dates are aligned for easy reading."
      (require 'cal-iso)
      (let* ((dayname (calendar-day-name date 1 nil))
             (day (cadr date))
             (day-of-week (calendar-day-of-week date))
             (month (car date))
             (monthname (calendar-month-name month 1))
             (year (nth 2 date))
             (iso-week (org-days-to-iso-week
                        (calendar-absolute-from-gregorian date)))
             (weekyear (cond ((and (= month 1) (>= iso-week 52))
                              (1- year))
                             ((and (= month 12) (<= iso-week 1))
                              (1+ year))
                             (t year)))
             (weekstring (if (= day-of-week 1)
                             (format " W%02d" iso-week)
                           "")))
        (format " %-2s. %2d %s"
                dayname day monthname)))

    (defun krisb-org-agenda-auto-exclude-function (tag)
      "Set tags based on time of day.
  See ((org) Filtering/limiting agenda items)."
      (when (cond ((member tag '("@home" "@hobbies"))
                   (let ((hr (nth 2 (decode-time))))
                     ;; After 10 or before 21
                     (or (> hr 10) (< hr 21)))))
        (concat "-" tag)))

    (defun krisb-org-agenda-process ()
      "(Bespoke) process org-agenda entry at point."
      (interactive)
      (org-agenda-priority)
      (org-agenda-set-tags)
      (org-agenda-next-item 1)))

  ;;; Org-super-agenda
  (use-package org-super-agenda
    ;; NOTE 2024-10-06: I can currently check out and install a version of
    ;; org-super-agenda that applies the patch from PR#242
    :load-path "/home/krisbalintona/emacs-repos/packages/org-super-agenda/"
    :custom
    (org-super-agenda-hide-empty-groups t)
    ;; FIXME 2024-10-06: When trying to set `org-super-agenda-keep-order' to
    ;; non-nil, it causes an error when using :auto-* selectors. This doesn't seem
    ;; to occur in an emacs -Q instances, but I have no clue what is causing the
    ;; error in my config... Although the following PR might fix the issue:
    ;; https://github.com/alphapapa/org-super-agenda/pull/242. Also see the NOTE
    ;; above, near the :vc keword
    (org-super-agenda-keep-order t)
    (org-agenda-cmp-user-defined #'krisb-org-sort-agenda-by-created-time)
    :config
    (org-super-agenda-mode 1)

    (defun krisb-org-get-created-time (entry)
      "Return the CREATED time of ENTRY, or an empty string if it doesn't exist."
      (let ((marker (get-text-property 0 'marker entry)))
        (if marker
            (org-entry-get marker "CREATED")
          "")))

    (defun krisb-org-sort-agenda-by-created-time (a b)
      "Compare two agenda items, A and B, by their CREATED property."
      (let* ((time-a (krisb-org-get-created-time a))
             (time-b (krisb-org-get-created-time b)))
        (cond
         ((string= time-a "") +1)         ; A has no CREATED property, put it last
         ((string= time-b "") -1)         ; B has no CREATED property, put it last
         (t
          (if (time-less-p (date-to-time time-a) (date-to-time time-b))
              -1 +1)))))

    ;; Relevant variables to set locally in `org-agenda-custom-commands'
    ;; - `org-agenda-overriding-header'
    ;; - `org-agenda-show-inherited-tags'
    ;; - `org-agenda-sorting-strategy'
    ;; - `org-agenda-start-day'
    ;; - `org-agenda-span'
    ;; - `org-agenda-prefix-format'
    ;; - `org-agenda-scheduled-leaders'
    ;; - `org-agenda-deadline-leaders'
    ;; - `org-agenda-skip-deadline-prewarning-if-scheduled'
    ;; - `org-agenda-skip-scheduled-if-deadline-is-shown'
    ;; - `org-habit-show-all-today'
    ;; - `org-habit-show-habits-only-for-today'
    ;; - `org-agenda-dim-blocked-tasks'
    ;; - `org-agenda-include-diary'
    ;; - `org-agenda-insert-diary-extract-time'
    ;; - `org-agenda-skip-function'
    ;; - `org-agenda-entry-types'
    ;; - `org-deadline-warning-days'
    ;; - `org-scheduled-delay-days'
    (setopt org-agenda-custom-commands
            '(("f" "FYP"
               ((agenda ""
                        ((org-agenda-overriding-header "Time-bound tasks")
                         (org-agenda-show-inherited-tags t)
                         (org-agenda-start-day "+0d")
                         (org-agenda-span 'day)
                         (org-habit-show-habits-only-for-today t)
                         (org-agenda-dim-blocked-tasks t)
                         (org-agenda-include-diary t)
                         (org-agenda-insert-diary-extract-time t)
                         (org-super-agenda-groups
                          '((:discard (:and (:tag "inbox" :not (:deadline t)))) ; We want to see deadlines even if they have the inbox tag
                            (:auto-category t)))))
                (tags-todo "+TODO=\"NEXT\"-project-inbox"
                           ((org-agenda-overriding-header "Next")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks 'invisible)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                (tags-todo "+TODO=\"TODO\"-project-inbox"
                           ((org-agenda-overriding-header "Standard")
                            (org-agenda-use-tag-inheritance '(todo))
                            (org-agenda-show-inherited-tags t)
                            (org-agenda-dim-blocked-tasks 'invisible)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))))
              ("i" "Inbox: process entries"
               ((agenda ""
                        ((org-agenda-overriding-header "Time-bound inbox")
                         (org-agenda-start-day "+0d")
                         (org-agenda-span 5)
                         (org-habit-show-habits nil)
                         (org-agenda-entry-types
                          '(:deadline :scheduled))
                         (org-super-agenda-groups
                          '((:tag "inbox")
                            (:todo "MAYBE")
                            (:discard (:anything t))))))
                (tags-todo "+inbox"
                           ((org-agenda-overriding-header "Regular inbox")
                            (org-agenda-dim-blocked-tasks t)
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'scheduled 'deadline))))
                (todo "MAYBE"
                      ((org-agenda-overriding-header "Regular maybes")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'scheduled 'deadline))))))
              ("p" "Projects"
               ((tags-todo "project"
                           ((org-agenda-overriding-header "")
                            ;; This lets project sub-tasks be discoverable by a tags
                            ;; search. One might think :auto-parent makes this
                            ;; redundant, but this handles cases where I have a
                            ;; sub-task but its parent is not a project -- I do this
                            ;; sometimes for simple dependencies between todos
                            ;; FIXME 2024-10-07: This shows the project tag for all the
                            ;; sub-tasks, which can be visually noisy. I'm not sure if
                            ;; there is a workaround
                            (org-tags-exclude-from-inheritance
                             (remove "project" org-tags-exclude-from-inheritance))
                            (org-agenda-prefix-format
                             ;; FIXME 2024-10-07: Not sure if this is a tags- or
                             ;; todo-type view
                             '((tags  . " %i %-8:c%-5e%?-12t% s")))
                            (org-super-agenda-groups
                             '(( :auto-parent t
                                 :order 2)
                               ( :name "All projects"
                                 :anything t
                                 :order 1))))))))))
#+end_src

**** Friends of =org-agenda=

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Org-clock
  (use-package org-clock
    :ensure nil
    :custom
    (org-clock-persist t)
    (org-clock-out-when-done t)
    (org-clock-history-length 10)
    (org-clock-in-resume t)
    (org-clock-persist-query-resume t)
    (org-clock-into-drawer t)
    (org-clock-out-remove-zero-time-clocks t)
    (org-clock-report-include-clocking-task t)
    (org-show-notification-handler #'(lambda (str)
                                       (notifications-notify
                                        :title "Org-agenda task overrun!"
                                        :body str
                                        :app-name "GNU Emacs"
                                        :urgency 'normal)))
    ;; Mode line
    (org-clock-string-limit 0)
    (org-clock-heading-function 'krisb-org-clock-get-heading-string)
    :config
    (org-clock-persistence-insinuate)

    ;; Mode line string
    (defun krisb-org-clock-get-heading-string ()
      "Get truncated org heading string.

  Same as default but truncates with `truncate-string-ellipsis'."
      (let ((heading (org-link-display-format
                      (org-no-properties (org-get-heading t t t t)))))
        (truncate-string-to-width heading 40 nil nil (truncate-string-ellipsis)))))

  ;;; Org-habit
  (use-package org-habit
    :after org-agenda
    :ensure nil
    :custom
    (org-habit-show-habits t)
    (org-habit-following-days 1)
    (org-habit-preceding-days 14)
    (org-habit-show-done-always-green t)
    (org-habit-show-habits-only-for-today t)
    (org-habit-graph-column 110)
    (org-habit-today-glyph ?◌)
    (org-habit-completed-glyph ?●)
    (org-habit-missed-glyph ?○))

  ;;;; Org-expiry
  (use-package org-expiry
    :requires org-contrib
    :ensure nil
    :hook (org-capture-before-finalize . org-expiry-insert-created)
    :custom
    (org-expiry-inactive-timestamps t))

  ;;;; Org-depend
  ;; Add blocking and triggering actions when an org-todo state is changed.
  (use-package org-depend
    :requires org-contrib
    :ensure nil
    :after org-agenda)
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-org-agenda.el"
  ;;; Provide
  (provide 'krisb-org-agenda)
#+end_src

*** Blogging

**** =krisb-mermaid.el=

#+begin_src emacs-lisp :tangle "modules/krisb-mermaid.el"
  ;;; Mermaid-mode
  (use-package mermaid-mode)

  ;;; Ob-mermaid
  ;; Mermaid diagrams
  (use-package ob-mermaid
    :ensure-system-package (mmdc . mermaid-cli)
    :custom
    (ob-mermaid-cli-path (executable-find "mmdc"))
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append '((mermaid . t)) org-babel-load-languages)))

  ;;; Provide
  (provide 'krisb-mermaid)
#+end_src

** Email

*** Composition

#+begin_src emacs-lisp :tangle "modules/krisb-email-composition.el"
  ;;; Composition
  ;;;; Message
  (use-package message
    :ensure nil
    :commands compose-mail
    :hook ((message-setup . message-sort-headers)
           ;; I like to use prose linters. See my flymake and flymake-collection
           ;; configurations that leverage vale
           (message-mode . flymake-mode)
           (message-mode . olivetti-mode)
           (message-send . krisb-message-check-subject)
           (message-send . krisb-message-check-from))
    :custom
    (message-directory krisb-email-directory)
    (message-mail-user-agent t)           ; Use `mail-user-agent'
    (compose-mail-user-agent-warnings t)
    (message-kill-buffer-on-exit t)
    (message-elide-ellipsis "> [... %l lines elided]\n")
    (message-confirm-send nil)

    ;; Headers
    (message-hidden-headers nil)
    (message-ignored-cited-headers ".") ; Don't include any headers when citing emails
    ;; Generates all headers in the variables `message-required-news-headers' or
    ;; `message-required-mail-headers'. Otherwise, unless another package manually
    ;; adds headers (e.g. mu4e), those headers won't be inserted into a message
    ;; draft buffer. I enable this to make sure that the date header is inserted
    ;; in a draft. (No date header means the date is set to time 0, which is
    ;; annoying for querying emails via e.g. notmuch.)
    (message-generate-headers-first t)

    ;; Signatures
    (message-signature-insert-empty-line t)
    (message-signature "Kind regards,\nKristoffer\n")
    (message-signature-separator "^-- *$")

    ;; Citations. See e.g. `message-cite-style-gmail' for the options relevant to
    ;; citations. Importantly, I can set these options buffer locally.
    (message-cite-function 'message-cite-original-without-signature)
    (message-citation-line-function 'message-insert-formatted-citation-line)
    (message-citation-line-format "On %a, %b %d %Y, %N wrote:\n")
    (message-cite-reply-position 'below)

    ;; Replying
    (message-wide-reply-confirm-recipients t)

    ;; Forwarding
    (message-forward-as-mime t)           ; NOTE 2024-09-27: Experimental
    (message-forward-before-signature nil)

    ;; Attachments
    (mml-attach-file-at-the-end t)
    (mml-dnd-attach-options t)
    :config
    (krisb-modus-themes-setup-faces
     "message"
     (set-face-attribute 'message-mml nil :weight 'bold :background bg-sage))

    (with-eval-after-load 'mu4e
      (setq mu4e-attachment-dir (expand-file-name ".attachments/" message-directory)))

    ;; Taken from Doom. Detect empty subjects, and give users an opportunity to
    ;; fill something in
    (defun krisb-message-check-subject ()
      "Check that a subject is present, and prompt for a subject if not."
      (save-excursion
        (goto-char (point-min))
        (search-forward "--text follows this line--")
        (re-search-backward "^Subject:")
        (let ((subject (string-trim (substring (thing-at-point 'line) 8))))
          (when (string-empty-p subject)
            (end-of-line)
            (insert (read-string "Subject (optional): "))))))

    (defun krisb-message-check-from ()
      "Prompt user to confirm sending from this email."
      (save-excursion
        (goto-char (point-min))
        (search-forward "--text follows this line--")
        (re-search-backward "^From:")
        (let ((from (string-trim (substring (thing-at-point 'line) 5))))
          (when (and (not (string-match-p (rx (literal user-mail-address)) from))
                     (not (yes-or-no-p (concat
                                        "Are you sure you want to send from "
                                        (propertize from 'face 'highlight)
                                        "?"))))
            (cl--set-buffer-substring (pos-bol) (pos-eol)
                                      (concat
                                       "From: "
                                       (read-string "Set FROM to: " user-mail-address))))))))

  ;;;; Krisb-email-composition-ext
  (use-package krisb-email-composition-ext
    :ensure nil
    :after message
    :custom
    (message-signature-separator (format "^%s *$" (read krisb-signature-separator)))
    (message-signature #'krisb-signature-select)
    :config
    (with-eval-after-load 'mu4e
      (setq mu4e-contexts
            `(,(make-mu4e-context
                :name "Uni"
                :enter-func (lambda () (mu4e-message "Entering Uni context"))
                :leave-func (lambda () (mu4e-message "Leaving Uni context"))
                :vars `((user-mail-address . "kristoffer_balintona@alumni.brown.edu")
                        ;; Directories
                        (mu4e-drafts-folder . "/drafts/uni/")
                        (mu4e-sent-folder . "/uni/[Gmail].Sent Mail")
                        (mu4e-refile-folder . "/uni/[Gmail].All Mail")
                        (mu4e-trash-folder . "/uni/[Gmail].Trash")
                        (mu4e-maildir-initial-input . "/uni/ ")
                        ;; Maildirs
                        (mu4e-maildir-shortcuts . ((:maildir "/uni/Inbox" :key ?i)
                                                   (:maildir "/uni/[Gmail].Sent Mail" :key ?s)
                                                   (:maildir "/drafts/uni/" :key ?d)
                                                   (:maildir "/uni/[Gmail].Drafts" :key ?D)
                                                   (:maildir "/uni/[Gmail].Trash" :key ?t)
                                                   (:maildir "/uni/[Gmail].All Mail" :key ?a)))
                        (krisb-signature-alist .
                                               (("Take care" . "Take care,\nKristoffer")
                                                ("In gratitude" . "In gratitude,\nKristoffer")
                                                ("Best" . "Best,\nKristoffer")
                                                ("With appreciation" . "With appreciation,\nKristoffer")
                                                ("Brown banner" . "\nWith appreciation,\nKristoffer\n\n#+begin_export html
  <br />
  <table
    style='color: rgb(136, 136, 136); border: none; border-collapse: collapse; font-family: garamond'
  >
    <tbody>
      <tr style='height: 81.25pt'>
        <td
          style='
            border-right: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 11pt 5pt 5pt;
          '
          title=''
        >
          <img
            src='https://clipground.com/images/brown-university-logo-png-1.png'
            alt='Brown logo'
            style='border: none'
            height='100'
          />
        </td>
        <td
          style='
            border-left: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 5pt 5pt 11pt;
          '
        >
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 6pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 11pt;
                font-weight: 700;
                white-space: pre-wrap;
              '
              >Kristoffer Balintona</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >B.A. Philosophy</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >Class of 2024</span
            >
          </p>
          <p
            dir='ltr'
            style='line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt'
          >
            <span
              style='
                font-size: 10pt;
                white-space: pre-wrap;
              '
              >Tel: (773) 677-9699</span
            >
            <br />
          </p>
          <p
            dir='ltr'
            style='
              font-size: 10pt;
              line-height: 1.2;
              margin-top: 0pt;
              margin-bottom: 0pt;
            '
          >
            <span
              style='
                font-size: 10pt;
                vertical-align: baseline;
                white-space: pre-wrap;
              '
              >Box: 6327</span
            >
          </p>
          <br />
        </td>
      </tr>
    </tbody>
  </table>
  ,#+end_export")
                                                ("BUI banner" . "\n\nWarmly,\nBrown University Interviews Executive Committee\n\n#+begin_export html
  <br />
  <table
    style='
      color: rgb(136, 136, 136);
      border: none;
      border-collapse: collapse;
      font-family: garamond;
    '
  >
    <tbody>
      <tr style='height: 81.25pt'>
        <td
          style='
            border-right: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 11pt 5pt 5pt;
          '
          title=''
        >
          <img
            src='https://browninterviews.org/wp-content/uploads/2020/06/bu-small-logo.png'
            alt='Brown logo'
            style='border: none'
            height='70'
          />
        </td>
        <td
          style='
            border-left: 0.75pt dotted rgb(135, 127, 116);
            vertical-align: top;
            padding: 5pt 5pt 5pt 11pt;
          '
        >
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Kristoffer Balintona ('24)</span>
            <span> | Editor in Chief</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Charles Alaimo ('25)</span>
            <span> | Senior Interviews Coordinator</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Dana Toneva ('24)</span>
            <span> | Senior Editor</span>
            <br />
          </p>
          <p
            dir='ltr'
            style='margin-top: 6pt; margin-bottom: 0pt; font-size: 11pt'
          >
            <span style='font-weight: 700'>Riley Stevenson ('27)</span>
            <span> | Senior Editor</span>
            <br />
          </p>
          <br />
        </td>
      </tr>
    </tbody>
  </table>
  ,#+end_export")))
                        ;; Smtpmail
                        (smtpmail-smtp-user "kristoffer_balintona@alumni.brown.edu") ; Send from this address
                        (smtpmail-mail-address "kristoffer_balintona@alumni.brown.edu")))
              ,(make-mu4e-context

                :enter-func (lambda () (mu4e-message "Entering Personal context"))
                :leave-func (lambda () (mu4e-message "Leaving Personal context"))
                :vars `((user-mail-address . "krisbalintona@gmail.com")
                        ;; Directories
                        (mu4e-drafts-folder . "/drafts/personal")
                        (mu4e-sent-folder . "/personal/[Gmail].Sent Mail")
                        (mu4e-refile-folder . "/personal/[Gmail].All Mail")
                        (mu4e-trash-folder . "/personal/[Gmail].Trash")
                        (mu4e-maildir-initial-input . "/personal/ ")
                        ;; Maildirs
                        (mu4e-maildir-shortcuts . ((:maildir "/personal/Inbox" :key ?i)
                                                   (:maildir "/personal/[Gmail].Sent Mail" :key ?s)
                                                   (:maildir "/drafts/personal/" :key ?d)
                                                   (:maildir "/personal[Gmail].Drafts/[Gmail].Drafts" :key ?D)
                                                   (:maildir "/personal/[Gmail].Trash" :key ?t)
                                                   (:maildir "/personal/[Gmail].All Mail" :key ?a)))
                        (krisb-signature-alist .
                                               (("Take care" . "Take care,\nKristoffer")
                                                ("In gratitude" . "In gratitude,\nKristoffer")
                                                ("Best" . "Best,\nKristoffer")
                                                ("With appreciation" . "With appreciation,\nKristoffer")))
                        ;; Smtpmail
                        (smtpmail-smtp-user "krisbalintona@gmail.com") ; Send from this address
                        (smtpmail-mail-address "krisbalintona@gmail.com")))))))

  ;;;; Footnote
  ;; Footnotes for `message-mode'
  (use-package footnote
    :ensure nil
    :hook (message-mode . footnote-mode)
    :custom
    (footnote-mode-line-string "")
    (footnote-section-tag "Footnotes:")
    (footnote-spaced-footnotes nil)
    (footnote-prompt-before-deletion nil))

  ;;;; Org-mime
  (use-package org-mime
    :pin melpa
    :after message
    :hook ((message-send . org-mime-confirm-when-no-multipart)
           (org-mime-html . (lambda ()
                              "Nicely offset block quotes in email bodies.
  Taken from
  https://github.com/org-mime/org-mime?tab=readme-ov-file#css-style-customization."
                              (org-mime-change-element-style
                               "blockquote" "border-left: 2px solid gray; padding-left: 4px;"))))
    :bind ( :map message-mode-map
            ("C-c M-o" . org-mime-htmlize)
            ("C-c '" . org-mime-edit-mail-in-org-mode))
    :custom
    (org-mime-library 'mml)               ; For gnus
    (org-mime-export-ascii 'ascii)
    (org-mime-preserve-breaks nil)
    ;; Keep GPG signatures outside of multipart. Modified version of
    ;; https://github.com/org-mime/org-mime?tab=readme-ov-file#keep-gpg-signatures-outside-of-multipart
    (org-mime-find-html-start
     (lambda (start)
       (save-excursion
         (goto-char start)
         (if (search-forward "<#secure method=pgpmime mode=sign>" nil t)
             (1+ (point))
           start))))
    (org-mime-debug nil)
    :config
    (defun krisb-org-mime--remove-spacer ()
      "Remove the \"spacer\" above the line at point.
  A spacer is two newlines inserted after portions inserted by
  `org-mime-htmlize'."
      (save-excursion
        (previous-logical-line)
        (delete-blank-lines)))
    (advice-add 'org-mime-htmlize :after #'krisb-org-mime--remove-spacer)
    :config
    ;; FIXME 2024-10-07: For some reason, setting these in :custom doesn't work...
    (setq org-mime-src--hint "# org-mime hint: Press C-c C-c to commit change.\n" ; Start with a single # to font-lock as comment
          org-mime-export-options '( :with-latex t
                                     :section-numbers nil
                                     :with-author nil
                                     :with-toc nil))

    ;; Pop buffer according to `display-buffer-alist'
    (defun krisb-org-mime-edit-mail-in-org-mode ()
      "Call a special editor to edit the mail body in `org-mode'."
      (interactive)
      ;; see `org-src--edit-element'
      (cond
       ((eq major-mode 'org-mode)
        (message "This command is not for `org-mode'."))
       (t
        (setq org-mime--saved-temp-window-config (current-window-configuration))
        (let* ((beg (copy-marker (org-mime-mail-body-begin)))
               (end (copy-marker (or (org-mime-mail-signature-begin) (point-max))))
               (bufname "OrgMimeMailBody")
               (buffer (generate-new-buffer bufname))
               (overlay (org-mime-src--make-source-overlay beg end))
               (text (buffer-substring-no-properties beg end)))

          (setq org-mime-src--beg-marker beg)
          (setq org-mime-src--end-marker end)
          ;; don't use local-variable because only user can't edit multiple emails
          ;; or multiple embedded org code in one mail
          (setq org-mime-src--overlay overlay)

          (with-current-buffer buffer
            (erase-buffer)
            (insert org-mime-src--hint)
            (insert text)
            (goto-char (point-min))
            (org-mode)
            (org-mime-src-mode)
            (while (org-at-comment-p)
              (forward-line 1)))
          (display-buffer buffer)))))
    (advice-add 'org-mime-edit-mail-in-org-mode :override #'krisb-org-mime-edit-mail-in-org-mode))

  ;;; Mail Transfer Agent (email sending)

  ;;;; Sendmail
  ;; Use `sendmail' program to send emails? If yes, send the value of
  ;; `send-mail-function' to `sendmail-send-it'
  (use-package sendmail
    :ensure nil
    :after message
    :custom
    (mail-default-directory (expand-file-name "drafts/" message-directory))
    ;; These two messages make sure that emails are sent from the email address
    ;; specified in the "from" header field! Taken from
    ;; https://jonathanchu.is/posts/emacs-notmuch-isync-msmtp-setup/
    (mail-specify-envelope-from t)
    (message-sendmail-envelope-from 'header)
    (mail-envelope-from 'header))

  ;;;; Smtpmail
  ;; Use `msmtp' program to send emails? If yes, set the value of
  ;; `send-mail-function' to `smtpmail-send-it'
  (use-package smtpmail
    :ensure nil
    :ensure-system-package msmtp
    :after message
    :custom
    (smtpmail-queue-mail nil)
    ;; Below are settings for Gmail. See
    ;; https://support.google.com/mail/answer/7126229?hl=en#zippy=%2Cstep-change-smtp-other-settings-in-your-email-client
    (smtpmail-default-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
    (smtpmail-stream-type 'starttls)
    ;; Make sure email details that are used are not the current (when flushing)
    ;; variables, but the variables used when writing the email
    (smtpmail-store-queue-variables t)
    (smtpmail-queue-dir (expand-file-name "drafts/.smtp-queue" message-directory))
    (smtpmail-servers-requiring-authorization "gmail")) ; NOTE 2024-08-25: Fixes Gmail's 530 error on sending

  ;;; Provide
  (provide 'krisb-email-composition)
#+end_src

*** Notmuch

**** Notmuch

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;;; Notmuch
  (use-package notmuch
    :ensure-system-package (notmuch
                            (gmi . "lieer-git"))
    :hook ((notmuch-mua-send . notmuch-mua-attachment-check) ; Also see `notmuch-mua-attachment-regexp'
           (notmuch-show . olivetti-mode)
           (message-send . krisb-notmuch-set-sendmail-args))
    :bind (([remap compose-mail] . notmuch-mua-new-mail)
           :map krisb-open-keymap
           ("n" . notmuch)
           :map notmuch-search-mode-map
           ("a" . nil) ; The default is too easy to hit accidentally
           ("/" . notmuch-search-filter)
           ("r" . notmuch-search-reply-to-thread)
           ("R" . notmuch-search-reply-to-thread-sender)
           :map notmuch-show-mode-map
           ("a" . nil)
           ("r" . notmuch-show-reply)
           ("R" . notmuch-show-reply-sender)
           ("T" . krisb-notmuch-show-trash-thread-then-next)
           ([remap notmuch-show-advance-and-archive] . krisb-notmuch-show-advance-and-tag))
    :custom
    (mail-user-agent 'notmuch-user-agent)
    (notmuch-identities nil)              ; Defer to notmuch-config's file data

    ;; Hello UI
    (notmuch-hello-sections (list #'notmuch-hello-insert-saved-searches
                                  #'notmuch-hello-insert-alltags
                                  #'notmuch-hello-insert-recent-searches))
    (notmuch-hello-thousands-separator ",")
    (notmuch-show-all-tags-list t)

    ;; Searches
    ;; See `man' for mbsync and notmuch to see valid search terms. See
    ;; https://www.emacswiki.org/emacs/NotMuch#h5o-2 on how to expunge local files
    ;; via cli
    (notmuch-search-hide-excluded t)
    (notmuch-saved-searches
     '((:name "inbox"                 :query "tag:inbox and not tag:list" :sort-order oldest-first :key "i")
       (:name "to-read mailing lists" :query "tag:list and tag:inbox "    :sort-order oldest-first :key "l")
       (:name "all mailing lists"     :query "tag:list"                                            :key "L" )
       (:name "sent"                  :query "tag:sent"                                            :key "s")
       (:name "drafts"                :query "tag:draft or path:drafts/"  :search-type unthreaded  :key "d")
       (:name "archived"              :query "not tag:trash"                                       :key "a")
       (:name "all"                   :query "path:**"                                             :key "A")
       (:name "trash"                 :query "tag:trash"                                           :key "t")))
    (notmuch-show-empty-saved-searches t)
    (notmuch-search-oldest-first nil)
    (notmuch-search-result-format '(("date" . "%14s ")
                                    ("count" . "%-7s ")
                                    ("authors" . "%-30s ")
                                    ("subject" . "%-75.75s ")
                                    ("tags" . "(%s)")))

    ;; Tags
    (notmuch-archive-tags '("-inbox"))
    (notmuch-message-replied-tags '("+replied"))
    (notmuch-message-forwarded-tags '("+forwarded"))
    (notmuch-show-mark-read-tags '("-unread"))
    (notmuch-draft-tags '("+draft"))
    (notmuch-draft-folder "drafts")
    (notmuch-draft-save-plaintext 'ask)
    (notmuch-tagging-keys
     `(("a" notmuch-archive-tags "Archive")
       ("r" notmuch-show-mark-read-tags "Mark read")
       ("f" ("+flagged") "Flag")
       ("s" ("+spam" "-inbox") "Mark as spam")
       ("t" ("+trash" "-inbox") "Trash")))
    (notmuch-tag-formats
     '(("unread" (propertize tag 'face 'notmuch-tag-unread))
       ("flagged" (propertize tag 'face 'notmuch-tag-flagged))))
    (notmuch-tag-deleted-formats
     '(("unread" (notmuch-apply-face bare-tag `notmuch-tag-deleted))
       (".*" (notmuch-apply-face tag `notmuch-tag-deleted))))

    ;; Notmuch-show-mode (i.e. reading emails)
    (notmuch-show-relative-dates t)
    (notmuch-show-all-multipart/alternative-parts nil)
    (notmuch-show-indent-multipart nil)
    (notmuch-show-indent-messages-width 3)
    (notmuch-show-part-button-default-action 'notmuch-show-interactively-view-part)
    (notmuch-show-text/html-blocked-images ".") ; Block everything
    (notmuch-wash-wrap-lines-length nil)
    (notmuch-unthreaded-show-out t)
    (notmuch-message-headers-visible nil)
    (notmuch-message-headers '("To" "Cc" "Date" "Subject"))
    (notmuch-multipart/alternative-discouraged
     '("text/html" "multipart/related" "text/x-patch"))

    ;; Notmuch-tree-mode
    (notmuch-tree-show-out nil)
    (notmuch-tree-result-format '(("date" . "%12s  ")
                                  ("authors" . "%-20s  ")
                                  ((("tree" . "%s")
                                    ("subject" . "%s"))
                                   . " %-85.85s  ")
                                  ("tags" . "(%s)")))
    (notmuch-tree-outline-enabled nil)

    ;; Email composition
    (notmuch-mua-compose-in 'current-window)
    (notmuch-mua-hidden-headers nil)
    (notmuch-address-command 'internal)
    (notmuch-address-internal-completion '(sent nil))
    (notmuch-always-prompt-for-sender t)
    (notmuch-mua-cite-function 'message-cite-original-without-signature)
    (notmuch-mua-reply-insert-header-p-function 'notmuch-show-reply-insert-header-p-never)
    (notmuch-mua-user-agent-function nil)
    (notmuch-maildir-use-notmuch-insert t)
    (notmuch-wash-citation-lines-prefix 0)
    (notmuch-wash-citation-lines-suffix 0)
    (notmuch-crypto-process-mime t)
    (notmuch-crypto-get-keys-asynchronously t)
    ;; See `notmuch-mua-send-hook'
    (notmuch-mua-attachment-regexp (concat "\\b\\("
                                           "attache\?ment\\|attached\\|attach\\|"
                                           "pi[èe]ce\s+jointe?"
                                           "\\)\\b"))

    ;; Sending emails.
    ;; Use Lieer to send emails. Also see `krisb-notmuch-set-sendmail-args'. Read
    ;; https://github.com/gauteh/lieer/wiki/Emacs-and-Lieer.
    (sendmail-program (executable-find "gmi"))
    (send-mail-function 'sendmail-send-it)
    (notmuch-fcc-dirs nil) ; Gmail already copies sent emails, so don't move them elsewhere locally
    :config
    (krisb-modus-themes-setup-faces
     "notmuch"
     ;; More noticeable demarcation of emails in thread in notmuch-show-mode
     (set-face-attribute 'notmuch-message-summary-face nil
                         :foreground fg-alt
                         ;; NOTE 2024-09-26: We do it this way since changing
                         ;; faces will refresh the font to be 1.1 times the 1.1
                         ;; times height, and so on
                         :height (truncate (* (face-attribute 'default :height nil) 1.1))
                         :overline t
                         :extend nil
                         :inherit 'unspecified)
     (set-face-attribute 'notmuch-tag-added nil
                         :underline `(:color ,cyan-cooler :style double-line :position t))
     (add-to-list 'notmuch-tag-formats
                  `("correspondence" (propertize tag 'face '(:foreground ,green-faint))))
     (add-to-list 'notmuch-tag-formats
                  `("commitment" (propertize tag 'face '(:foreground ,yellow-faint)))))

    ;; Don't buttonize citations
    ;; FIXME 2024-10-07: For some reason putting this in :custom and setting it to
    ;; a high value doesn't work, so I put it here
    (setq notmuch-wash-citation-lines-prefix most-positive-fixnum
          notmuch-wash-citation-lines-suffix most-positive-fixnum)

    ;; Set sendmail args appropriate to using lieer as `sendmail-program'
    (defun krisb-notmuch-set-sendmail-args ()
      "Set `message-sendmail-extra-arguments' arguments.
  Set `message-sendmail-extra-arguments' accordingly (changing the
  maildir) such that lieer can properly send the email. (This assumes
  `sendmail-program' is set to the gmi executable.) Instruction from
  https://github.com/gauteh/lieer/wiki/Emacs-and-Lieer."
      (when (string-match-p "gmi" sendmail-program)
        (let* ((from (downcase (message-fetch-field "from")))
               (root-maildir (expand-file-name "~/Documents/emails/"))
               (personal-maildir (expand-file-name "personal" root-maildir))
               (uni-maildir (expand-file-name "uni" root-maildir)))
          (cond
           ((string-match-p (rx (literal "krisbalintona@gmail.com")) from)
            (setq-local message-sendmail-extra-arguments `("send" "--quiet" "-t" "-C" ,personal-maildir)))
           ((string-match-p (rx (literal "kristoffer_balintona@alumni.brown.edu")) from)
            (setq-local message-sendmail-extra-arguments `("send" "--quiet" "-t" "-C" ,uni-maildir)))))))

    ;; REVIEW 2024-09-26: Prot's lin package apparently makes disabling this
    ;; better?
    (with-eval-after-load 'lin
      (remove-hook 'notmuch-search-hook #'notmuch-hl-line-mode))

    ;; Prefer not to have emails recentered as I readjust them
    (advice-add 'notmuch-show-message-adjust :override #'ignore))

  ;;;; Krisb-notmuch-ext
  (use-package krisb-notmuch-ext
    :ensure nil
    :after notmuch
    :hook (notmuch-show  . krisb-notmuch-show-expand-only-unread-h)
    :config
    (with-eval-after-load 'pulsar
      (dolist (func '(notmuch-show-rewind
                      notmuch-show-advance-and-archive
                      krisb-notmuch-show-advance-and-tag))
        (add-to-list 'pulsar-pulse-functions func))))
#+end_src

**** Accessories

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;;; Notmuch-transient
  (use-package notmuch-transient
    :after notmuch
    :custom
    (notmuch-transient-add-bindings t)
    (notmuch-transient-prefix "C-d"))

  ;;;; Notmuch-addr
  ;; Better address completion for notmuch; replaces the built-in
  ;; `notmuch-address' completion system. Read
  ;; https://nmbug.notmuchmail.org/nmweb/show/20201108231150.5419-1-jonas%40bernoul.li
  ;; for more information
  (use-package notmuch-addr
    :after notmuch-address
    :config
    (notmuch-addr-setup))

  ;;;; Ol-notmuch
  ;; Org-links for search queries (i.e. notmuch-search-mode, notmuch-tree-mode)
  ;; and messages (i.e. notmuch-show-mode).
  (use-package ol-notmuch
    :autoload krisb-org-notmuch-store-link
    :config
    ;; Integration with `org-agenda'
    (with-eval-after-load 'ol
      (defun krisb-org-notmuch-store-link ()
        "Store a link to one or more notmuch messages.
  My version allows for linking to the first message in an email thread
  from a `notmuch-search-mode' buffer."
        (cond
         ((memq major-mode '(notmuch-show-mode notmuch-tree-mode))
          ;; The value is passed around using variable `org-store-link-plist'.
          (org-link-store-props
           :type       "notmuch"
           :message-id (notmuch-show-get-message-id t)
           :subject    (notmuch-show-get-subject)
           :from       (notmuch-show-get-from)
           :to         (notmuch-show-get-to)
           :date       (org-trim (notmuch-show-get-date)))
          (org-link-add-props :link (org-link-email-description "notmuch:id:%m"))
          (org-link-add-props :description (org-link-email-description))
          org-store-link-plist)
         ((equal major-mode 'notmuch-search-mode)
          (save-window-excursion
            (let ((buf (notmuch-show (notmuch-search-find-thread-id))))
              (with-current-buffer buf
                (org-link-store-props
                 :type       "notmuch"
                 :message-id (notmuch-show-get-message-id t)
                 :subject    (notmuch-show-get-subject)
                 :from       (notmuch-show-get-from)
                 :to         (notmuch-show-get-to)
                 :date       (org-trim (notmuch-show-get-date)))
                (org-link-add-props :link (org-link-email-description "notmuch:id:%m"))
                (org-link-add-props :description (org-link-email-description)))
              (kill-buffer buf)
              org-store-link-plist)))))
      (advice-add 'org-notmuch-store-link :override #'krisb-org-notmuch-store-link))

    (with-eval-after-load 'org-capture
      (add-to-list 'org-capture-templates
                   `("e" "Email" entry
                     (file ,(expand-file-name "todo.org" krisb-org-agenda-directory))
                     "* TODO %? [[%L][\"%:subject\"]] :email:\n\nFrom %:from\nTo: %:to\n"
                     :empty-lines 1)
                   'append)

      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-tree-mode"))))
      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-search-mode"))))
      (add-to-list 'org-capture-templates-contexts '("e" ((in-mode . "notmuch-show-mode"))))))

  ;;;; Mode line indicator
  ;; Try using display-time's built-in email indicator --- less informative but
  ;; more visually subtle than `notmuch-indicator'.  Obviously the below applies
  ;; only when `display-time-mode' is non-nil.
  (with-eval-after-load 'time
    (with-eval-after-load 'notmuch
      (setopt display-time-mail-face 'notmuch-search-flagged-face))

    (defvar krisb-display-time-mail-icon
      (cond
       ((featurep 'nerd-icons)
        (propertize (nerd-icons-mdicon "nf-md-email")
                    'face `(:family ,(nerd-icons-mdicon-family) :height 1.1)))
       ((featurep 'all-the-icons)
        (propertize (all-the-icons-material "mail_outline")
                    'face `(:family ,(all-the-icons-material-family) :height 1.1)
                    'display '(raise -0.1))))
      "Icon I use for displaying mail in `display-time-string-forms'.")

    (setopt display-time-use-mail-icon t
            display-time-mail-function
            (lambda ()
              (let* ((command (format "notmuch search tag:inbox and tag:unread and not tag:list and not tag:sub | wc -l"))
                     (count (string-to-number (shell-command-to-string command))))
                (< 0 count)))
            display-time-string-forms
            '((if (and (not display-time-format) display-time-day-and-date)
                  (format-time-string "%a %b %e " now)
                "")
              (propertize
               (format-time-string (or display-time-format
                                       (if display-time-24hr-format "%H:%M" "%-I:%M%p"))
                                   now)
               'face 'display-time-date-and-time
               'help-echo (format-time-string "%a %b %e, %Y" now))
              load
              (if mail
                  (concat
                   " "
                   (propertize
                    (if (and display-time-use-mail-icon (display-graphic-p))
                        krisb-display-time-mail-icon
                      display-time-mail-string)
                    'face display-time-mail-face
                    'help-echo "You have new mail; mouse-2: Read mail"
                    'mouse-face 'mode-line-highlight
                    'local-map (make-mode-line-mouse-map 'mouse-2
                                                         read-mail-command)))
                "")
              " "))
    ;; Update right after closing the notmuch hello buffer so the mail icon
    ;; reflects the state of my maildirs accurate
    (advice-add 'notmuch-bury-or-kill-this-buffer :after #'display-time-update))
#+end_src

**** Provide

#+begin_src emacs-lisp :tangle "modules/krisb-notmuch.el"
  ;;; Provide
  (provide 'krisb-notmuch)
#+end_src

** Programming

*** =krisb-programming.el=

#+begin_src emacs-lisp :tangle "modules/krisb-programming.el"
  ;;; Newcomment
  (use-package newcomment
    :ensure nil
    :custom
    (comment-empty-lines t)
    (comment-fill-column nil)
    (comment-multi-line t)
    (comment-style 'indent))

  ;;; Electric
  (use-package electric
    :ensure nil
    :custom
    (electric-pair-inhibit-predicate 'electric-pair-default-inhibit)

    (electric-quote-comment nil)
    (electric-quote-string nil)
    (electric-quote-context-sensitive t)
    (electric-quote-replace-double t)
    (electric-quote-inhibit-functions nil)
    :config
    (electric-pair-mode 1))

  ;;; Eldoc
  (use-package eldoc
    :diminish
    :bind ( :map help-map
            ("\." . eldoc-doc-buffer))
    :custom
    (eldoc-print-after-edit nil)
    (eldoc-idle-delay 0.2)
    (eldoc-documentation-strategy
     'eldoc-documentation-compose-eagerly) ; Mash multiple sources together and display eagerly
    (eldoc-echo-area-use-multiline-p 'truncate-sym-name-if-fit) ; Also respects `max-mini-window-height'
    (eldoc-echo-area-display-truncation-message t)
    (eldoc-echo-area-prefer-doc-buffer t))

  ;;; Treesit
  (use-package treesit
    :ensure nil
    :custom
    ;; HACK 2024-10-20: The car of
    ;; `treesit--install-language-grammar-out-dir-history' is used as the default
    ;; output directory for installing grammars via
    ;; `treesit-install-language-grammar'. See the definition of
    ;; `treesit-install-language-grammar'.
    (treesit--install-language-grammar-out-dir-history
     (list (no-littering-expand-var-file-name "treesit")))
    (treesit-font-lock-level 3))

  ;;; Treesit-auto
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    (treesit-extra-load-path treesit--install-language-grammar-out-dir-history)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode 1))

  ;;; Form-feed
  ;; Display  (page breaks) fancily. Visit the readme for alternatives and their
  ;; differences
  (use-package form-feed
    :diminish
    :custom
    (form-feed-include-modes
     '(prog-mode conf-mode text-mode help-mode emacs-news-view-mode))
    (form-feed-exclude-modes nil)
    :config
    ;; Also see the command `treesit-auto-install-all'
    (global-form-feed-mode 1))

  ;;; Which-func
  (use-package which-func
    :hook (on-first-file . which-function-mode)
    :custom
    (which-func-modes '(prog-mode)))

  ;;; Breadcrumb
  ;; Which-function stuff but more performant and prettier formatting. Read
  ;; package commentary for a description on how.
  (use-package breadcrumb
    :demand t
    :hook (eglot-managed-mode . (lambda () (when (derived-mode-p 'prog-mode) (breadcrumb-local-mode))))
    :init
    (with-eval-after-load 'which-func
      (setopt which-func-functions '(breadcrumb-imenu-crumbs))))

  ;;; Provide
  (provide 'krisb-programming)
#+end_src

*** =krisb-vc.el=

#+begin_src emacs-lisp :tangle "modules/krisb-vc.el"
  ;;; Built-in
  ;;;; VC
  (use-package vc
    :ensure nil
    :hook (vc-git-log-edit-mode . auto-fill-mode)
    :bind ( :map vc-git-log-edit-mode-map
            ("<tab>" . completion-at-point))
    :custom
    (vc-follow-symlinks t)
    ;; Improves performance by not having to check for other backends. Expand this
    ;; list when necessary
    (vc-handled-backends '(Git))

    (vc-git-diff-switches              ; Have diff headers look similar to Magit's
     '("--patch-with-stat" "--histogram"))
    (vc-git-root-log-format
     `("%h %ad (%ar) %aN%d%n  %s"
       ;; The first shy group matches the characters drawn by --graph. We use
       ;; numbered groups because `log-view-message-re' wants the revision number
       ;; to be group 1.
       ,(concat "^\\(?:[*/\\|]+\\)\\(?:[*/\\| ]+\\)?"
                "\\(?1:[0-9a-z]+\\)"      ; %h
                " "
                "\\(?4:[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} (.*? ago)\\)?" ; %ad (%ar)
                " "
                "\\(?3:\\(?:[[:alpha:]]+\\.?[\n ]\\)+\\)" ; %aN
                "\\(?2:([^)]+)\\)?")                      ; %d
       ((1 'log-view-message)
        (2 'change-log-list nil lax)
        (3 'change-log-name)
        (4 'change-log-date))))
    (vc-revert-show-diff t)

    (vc-annotate-display-mode 'fullscale)

    (vc-find-revision-no-save t)

    (vc-git-log-edit-summary-target-len (+ 50 (length "Summary")))
    (vc-git-log-edit-summary-max-len (+ 70 (length "Summary"))))

  ;;;; Vc-dir
  (use-package vc-dir ; NOTE 2024-10-19: Is not required by vc, so have its own use-package
    :ensure nil
    :bind ( :map vc-dir-mode-map
            ("G" . vc-revert)))

  ;;;; Log-edit
  (use-package log-edit
    :ensure nil
    :custom
    (log-edit-headers-alist
     '(("Summary" . log-edit-summary)
       ("Fixes")
       ("Author")))
    (log-edit-setup-add-author nil)
    :custom-face
    (log-edit-summary ((t (:family ,(face-attribute 'variable-pitch :family)))))
    :config
    ;; I can see the files from the Diff with C-c C-d when I want
    (remove-hook 'log-edit-hook #'log-edit-show-files))

  ;;;; Diff-mode
  (use-package diff-mode
    :ensure nil
    :hook (diff-mode . diff-delete-empty-files)

    :bind ( :map diff-mode-map
            ("S-<iso-lefttab>" . outshine-cycle-buffer)
            ("<tab>" . outshine-cycle)
            ("C-x n s" . outshine-narrow-to-subtree)
            ("L" . vc-print-root-log)
            ("v" . vc-next-action))
    :custom
    (diff-font-lock-prettify t)
    (diff-refine 'font-lock)
    (diff-font-lock-syntax 'hunk-also) ; Fontify diffs with syntax highlighting of the language
    :config
    (krisb-modus-themes-setup-faces
     "diff-mode"
     (set-face-attribute 'diff-header nil
                         :height 1.2
                         :overline t
                         :width 'expanded
                         :foreground (modus-themes-with-colors fg-alt)
                         :extend t)
     (set-face-attribute 'diff-hunk-header nil
                         :height 1.1
                         :slant 'italic
                         :foreground 'unspecified
                         :background (modus-themes-with-colors bg-dim))))

  ;;;; Agitate
  ;; QoL stuff for built-in VC workflow
  (use-package agitate
    :after vc
    :demand t
    :hook (diff-mode . agitate-diff-enable-outline-minor-mode)
    :bind ( :map vc-prefix-map
            ("=" . agitate-diff-buffer-or-file)
            ("f" . agitate-vc-git-find-revision)
            ("s" . agitate-vc-git-show)
            ("w" . agitate-vc-git-kill-commit-message)
            ("p p" . agitate-vc-git-format-patch-single)
            ("p n" . agitate-vc-git-format-patch-n-from-head)
            :map diff-mode-map
            ([remap diff-refine-hunk] . agitate-diff-refine-cycle)
            ([remap diff-restrict-view] . agitate-diff-narrow-dwim)
            :map log-view-mode-map
            ("w" . agitate-log-view-kill-revision)
            ("W" . agitate-log-view-kill-revision-expanded)
            :map vc-git-log-view-mode-map
            ("c" . agitate-vc-git-format-patch-single)
            :map log-edit-mode-map
            ("C-c C-i C-n" . agitate-log-edit-insert-file-name)
            ;; See user options `agitate-log-edit-emoji-collection' and
            ;; `agitate-log-edit-conventional-commits-collection'.
            ("C-c C-i C-e" . agitate-log-edit-emoji-commit)
            ("C-c C-i C-c" . agitate-log-edit-conventional-commit))
    :custom
    (diff-refine nil)                     ; We use `agitate-diff-refine-cycle' now
    (agitate-log-edit-informative-show-root-log nil)
    (agitate-log-edit-informative-show-files t)
    :config
    (agitate-log-edit-informative-mode 1)

    (with-eval-after-load 'vc-git
      (advice-add #'vc-git-push :override #'agitate-vc-git-push-prompt-for-remote)))

  ;;; Magit
  ;;;; Magit
  (use-package magit
    :hook ((magit-diff-mode magit-process-mode) . visual-line-mode)
    :bind (("C-x g" . magit)
           :map magit-mode-map
           ("C-<tab>". magit-section-toggle-children)
           :map git-commit-mode-map
           ("<tab>" . completion-at-point))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-bury-buffer-function #'magit-restore-window-configuration)

    (magit-refs-show-commit-count 'all)   ; Show branches and tags

    ;; Refinement (diffs) in hunks
    (magit-diff-highlight-hunk-body t)
    (magit-diff-refine-hunk t)
    (magit-diff-highlight-hunk-region-functions
     '(magit-diff-highlight-hunk-region-dim-outside
       magit-diff-highlight-hunk-region-using-overlays
       magit-diff-highlight-hunk-region-using-face
       ))

    ;; Sections
    (magit-module-sections-nested t)
    (magit-section-show-child-count t)
    (magit-section-initial-visibility-alist '((stashes . show)
                                              (modules . hide)
                                              (unpushed . show)
                                              (unpulled . hide)))
    :custom-face
    (git-commit-summary ((t (:family ,(face-attribute 'variable-pitch :family)))))
    :config
    (magit-auto-revert-mode 1))

  ;;;; Magit-file-icons
  (use-package magit-file-icons
    :after magit
    :custom
    (magit-file-icons-enable-diff-file-section-icons t)
    (magit-file-icons-enable-untracked-icons t)
    (magit-file-icons-enable-diffstat-icons t)
    :config
    (magit-file-icons-mode 1))

  ;;; Keychain-environment
  ;; Ensure SSH_AGENT_PID and SSH_AUTH_SOCK are updated before committing since
  ;; their values may change. Sources them to ~/.keychain/
  (use-package keychain-environment
    :ensure-system-package keychain
    :hook ((after-init vc-before-checkin git-commit-setup) . keychain-refresh-environment))

  ;;; Epg-config
  ;; Epg-config is responsible for querying passphrases
  (use-package epg-config
    :ensure nil
    :custom
    (epg-pinentry-mode 'loopback)) ; Ask through the minibuffer instead of external Pinentry program

  ;;; Provide
  (provide 'krisb-vc)
#+end_src

*** =krisb-projects.el=

#+begin_src emacs-lisp :tangle "modules/krisb-projects.el"
  ;;; Project
  (use-package project
    :custom
    (project-vc-extra-root-markers '("Makefile"))
    (project-vc-merge-submodules nil)

    (project-file-history-behavior 'relativize)

    (project-mode-line t)
    (project-mode-line-face nil))

  ;;; Xref
  (use-package xref
    :bind ("C-M-?". xref-find-references-and-replace) ; Emacs 29.1
    :custom
    (xref-show-definitions-function #'xref-show-definitions-completing-read)
    (xref-show-xrefs-function #'xref-show-definitions-buffer)
    (xref-file-name-display 'project-relative)
    (xref-search-program 'ripgrep)
    (xref-history-storage 'xref-window-local-history) ; Per-window history of `xref-go-*'
    :config
    ;; We remove the fallback backend, `etags--xref-backend', which prompts the
    ;; user for an etags table -- this is undesirable for me.
    (setq-default xref-backend-functions nil)
    ;; Then add `elisp--xref-backend' as the global value of
    ;; `xref-backend-functions', which means it is run when the local value ends
    ;; with `t'. See (info "(elisp) Running Hooks") for an explanation.
    (add-hook 'xref-backend-functions #'elisp--xref-backend))

  ;;; Provide
  (provide 'krisb-projects)
#+end_src

*** =krisb-info.el=

#+begin_src emacs-lisp :tangle "modules/krisb-info.el"
  ;;;; Info
  (use-package info
    :hook (Info-selection . mixed-pitch-mode)
    :custom
    (Info-isearch-search nil))            ; Restore default isearch behavior

  ;;;; Info-colors
  ;; Fontify useful parts of info buffers
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))

  ;;; Provide
  (provide 'krisb-info)
#+end_src

*** =krisb-elisp.el=

#+begin_src emacs-lisp :tangle "modules/krisb-elisp.el"
  ;;; Font locking
  ;;;; Highlight-function-calls
  (use-package highlight-function-calls
    :hook ((emacs-lisp-mode lisp-interaction-mode) . highlight-function-calls-mode)
    :custom
    (highlight-function-calls-not nil)
    (highlight-function-calls-macro-calls nil)
    (highlight-function-calls-special-forms nil)
    :custom-face
    (highlight-function-calls-face ((t (:underline nil :inherit font-lock-function-call-face)))))

  ;;;; Paren-faces
  (use-package paren-face
    :custom
    (paren-face-mode-lighter "")
    :config
    (global-paren-face-mode 1))

  ;;; Documentation
  ;;;; Help
  (use-package help
    :ensure nil
    :bind ("C-h C-k" . describe-keymap)
    :custom
    (help-window-select t)
    (help-window-keep-selected t)

    (help-enable-variable-value-editing t)
    (help-clean-buttons t)
    (help-enable-symbol-autoload t)

    (describe-bindings-outline t)
    (describe-bindings-show-prefix-commands t)
    :config
    (require 'shortdoc)
    (add-hook 'help-fns-describe-function-functions #'shortdoc-help-fns-examples-function))

  ;;;; Apropos
  (use-package apropos
    :ensure nil
    :bind ("C-h u" . apropos-user-option))

  ;;;; Elisp-demos
  ;; Add example code snippets to some of the help windows
  (use-package elisp-demos
    :config
    (add-hook 'help-fns-describe-function-functions #'elisp-demos-advice-describe-function-1)

    (with-eval-after-load 'helpful
      (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)))

  ;;; Debugging
  ;;;; Eros-mode
  ;; Overlay lisp evaluations into the current buffer (near cursor)
  (use-package eros
    :hook (emacs-lisp-mode . eros-mode)
    :custom
    (eros-eval-result-prefix "⟹  "))

  ;;;; Inspector
  ;; Introspect list expressions. Also integrates with the debugging backtrace and
  ;; edebug (see
  ;; https://github.com/mmontone/emacs-inspector?tab=readme-ov-file#from-the-emacs-debugger).
  (use-package inspector)

  ;;;; IELM
  (use-package ielm
    :ensure nil
    :custom
    (ielm-noisy nil)
    (ielm-dynamic-return nil))

  ;;;; Edebug
  (use-package edebug
    :ensure nil
    :custom
    (edebug-initial-mode 'step)
    :config
    ;; Better indication for evaluated sexps in during edebugging. Taken from
    ;; https://xenodium.com/inline-previous-result-and-why-you-should-edebug/.

    (with-eval-after-load 'eros
      (defun krisb-edebug-previous-result--around (_ &rest r)
        "Adviced `edebug-previous-result'."
        (require 'eros)
        (eros--make-result-overlay edebug-previous-result
          :where (point)
          :duration eros-eval-result-duration))
      (advice-add #'edebug-previous-result :around #'krisb-edebug-previous-result--around))

    (defun krisb-edebug-compute-previous-result (previous-value)
      (if edebug-unwrap-results
          (setq previous-value
                (edebug-unwrap* previous-value)))
      (setq edebug-previous-result
            (concat "Result: "
                    (edebug-safe-prin1-to-string previous-value)
                    (eval-expression-print-format previous-value))))

    (defun edebug-previous-result ()
      "Print the previous result."
      (interactive)
      (message "%s" edebug-previous-result))

    (defun adviced:edebug-compute-previous-result (_ &rest r)
      "Adviced `krisb-edebug-compute-previous-result'."
      (let ((previous-value (nth 0 r)))
        (if edebug-unwrap-results
            (setq previous-value
                  (edebug-unwrap* previous-value)))
        (setq edebug-previous-result
              (edebug-safe-prin1-to-string previous-value))))
    (advice-add #'krisb-edebug-compute-previous-result :around #'adviced:edebug-compute-previous-result))

  ;;; Packages
  ;;;; Package-lint-flymake
  (use-package package-lint-flymake
    :hook (emacs-lisp-mode . package-lint-flymake-setup))

  ;;;; Try
  ;; Install a package only for the current Emacs session.
  (use-package try)

  ;;;; Scratch.el
  ;; Easily create scratch buffers for different modes
  (use-package scratch
    :hook (scratch-create-buffer . krisb-scratch-buffer-setup)
    :bind ( :map krisb-open-keymap
            ("s". scratch))
    :config
    (defun krisb-scratch-buffer-setup ()
      "Add contents to `scratch' buffer and name it accordingly.
   Taken from
   https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/"
      (let* ((mode (format "%s" major-mode))
             (string (concat "Scratch buffer for: " mode "\n\n")))
        (when scratch-buffer
          (save-excursion
            (insert string)
            (goto-char (point-min))
            (comment-region (point-at-bol) (point-at-eol)))
          (forward-line 2))
        (rename-buffer (concat "*Scratch for " mode "*") t))))

  ;;; Provide
  (provide 'krisb-elisp)
#+end_src

** Other

*** =krisb-web.el=
#+begin_src emacs-lisp :tangle "modules/krisb-web.el"
  ;;; Engine-mode
  ;; Send arbitrary search engine queries to your browser from within Emacs
  (use-package engine-mode
    :custom
    (engine/browser-function 'browse-url-generic)
    :config
    (engine-mode 1)

    ;; My searches
    (defengine amazon
               "https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

    (defengine duckduckgo
               "https://duckduckgo.com/?q=%s"
               :keybinding "d")

    (defengine github
               "https://github.com/search?ref=simplesearch&q=%s"
               :keybinding "g")

    (defengine google
               "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
               :keybinding "G")

    (defengine wikipedia
               "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
               :keybinding "w")

    (defengine youtube
               "https://www.youtube.com/results?aq=f&oq=&search_query=%s"
               :keybinding "y"))

  ;;; Wombag
  (use-package wombag
    :vc (:url "https://github.com/karthink/wombag.git"
              :rev :newest)
    :hook ((wombag-show-mode . org-remark-mode)
           (wombag-show-mode . krisb-wombag-entry-setup))
    :bind ( :map krisb-open-keymap
            ("w" . wombag))
    :custom
    (wombag-dir (no-littering-expand-var-file-name "wombag"))
    (wombag-db-file (no-littering-expand-var-file-name "wombag/wombag.sqlite"))
    (wombag-host "https://app.wallabag.it")
    (wombag-username "krisbalintona")
    (wombag-password (auth-source-pick-first-password :host "app.wallabag.it"))
    (wombag-client-id "23882_1jzdzdd09ikgw4k8o0cog4wggk48cgc0gwk8oos0gsc44gcsco")
    (wombag-client-secret (auth-source-pick-first-password :host "emacs-wombag.el"))
    (wombag-search-filter "")
    :config
    (defun krisb-wombag-entry-setup ()
      "Set up the visual for wombag-entry buffers."
      (setq-local line-spacing 0.08)
      (face-remap-add-relative 'default :height 1.1)
      (when (require 'olivetti nil t)
        (olivetti-mode 1)
        (olivetti-set-width 120))
      (when (require 'mixed-pitch nil t)
        (mixed-pitch-mode 1))
      (visual-line-mode 1))

    ;; Custom wombag org-link
    (defun krisb-wombag-org-store-link ()
      "Stores link to the current wombag entry."
      (when (eq major-mode 'wombag-show-mode)
        (let* ((title (alist-get 'title wombag-show-entry))
               (id (alist-get 'id wombag-show-entry))
               (pt (save-restriction (widen) (point)))
               (url (concat "wombag:" (number-to-string id) "::" (number-to-string pt)))
               (desc (format "%s (at point %s)" title pt)))
          (org-link-store-props
           :type "wombag"
           :link url
           :description desc))))

    (defun krisb-wombag-org-follow-link (path)
      "Open wombag entry.
  The PATH is formatted in the following way:
  - \"wombag:\"
  - a wombag entry ID
  - \"::\"
  - an optional number that represents the point in the buffer."
      (let* ((option (and (string-match "::\\(.*\\)\\'" path)
                          (match-string 1 path)))
             (id (string-to-number
                  (if (not option)
                      path
                    (substring path 0 (match-beginning 0)))))
             (pt (when option
                   (string-to-number (substring path (+ 2 (match-beginning 0))))))
             (entry (car
                     (wombag-db-get-entries
                      `[:select ,(vconcat wombag-search-columns) :from items :where (= id ,id)]
                      wombag-search-columns))))
        (with-current-buffer (wombag-show-entry entry)
          (when pt (goto-char pt)))))

    (org-link-set-parameters
     "wombag"
     :follow #'krisb-wombag-org-follow-link
     :store #'krisb-wombag-org-store-link)

    ;; Glue with `org-remark'. Code based on org-remark-eww.el
    (require 'org-remark)
    (defun krisb-org-remark-wombag-find-file-name ()
      "Return the ID of the entry.
  It assumes the buffer is a `wombag-show-mode' buffer and has a
  `wombag-show-entry' value.

  This function is meant to be set to hook
  `org-remark-source-find-file-name-functions'."
      (when (eq major-mode 'wombag-show-mode)
        (concat "wombag:" (number-to-string (alist-get 'id wombag-show-entry)))))

    (defun krisb-org-remark-wombag-highlight-link-to-source (filename point)
      "Return org-link pointing to the source wombag entry (i.e. FILENAME).
  It assumes the major mode is `wombag-show-mode'.

   This function is meant to be set to hook
  `org-remark-highlight-link-to-source-functions'."
      (when (eq major-mode 'wombag-show-mode)
        (let* ((file-title filename)
               (id (string-to-number (cadr (string-split filename ":"))))
               (title (or (caar (wombag-db-query `[:select title :from items :where (= id ,id)]))
                          "UNTITLED")) ; NOTE 2024-09-24: This is what `wombag' currently titles its untitled notes
               (pt (number-to-string point))
               (desc (format "%s (at point %s)" title point)))
          (concat "[[" file-title "::" pt "][" title " (at point " pt ")" "]]"))))

    (define-minor-mode krisb-org-remark-wombag-mode
      "Enable Org-remark to work with Wombag."
      :global t
      :group 'org-remark-wombag
      (if krisb-org-remark-wombag-mode
          ;; Enable
          (progn
            (add-hook 'wombag-show-mode-hook #'org-remark-auto-on)
            (add-hook 'org-remark-source-find-file-name-functions
                      #'krisb-org-remark-wombag-find-file-name)
            (add-hook 'org-remark-highlight-link-to-source-functions
                      #'krisb-org-remark-wombag-highlight-link-to-source))
        ;; Disable
        (remove-hook 'wombag-show-mode-hook #'org-remark-auto-on)
        (remove-hook 'org-remark-source-find-file-name-functions
                     #'krisb-org-remark-wombag-find-file-name)
        (remove-hook 'org-remark-highlight-link-to-source-functions
                     #'krisb-org-remark-wombag-highlight-link-to-source)))
    (krisb-org-remark-wombag-mode 1))

  ;;; Provide
  (provide 'krisb-web)
#+end_src
*** =krisb-directories.el=
#+begin_src emacs-lisp :tangle "modules/krisb-directories.el"
  ;;; Dired
  ;; Emacs' file manager
  (use-package dired
    :ensure nil
    :hook ((dired-mode . dired-hide-details-mode)
           (dired-mode . turn-on-gnus-dired-mode)) ; Email attachment integration with dired
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)                 ; Guess default target directory?
    (dired-hide-details-hide-symlink-targets nil) ; Don't hide symlink targets
    (dired-kill-when-opening-new-dired-buffer t)  ; Basically `dired-single'
    (dired-listing-switches "--group-directories-first --time-style=long-iso -alhgv") ; Flags `dired' passes to `ls'
    ;; Always copy/delete recursively?
    (dired-recursive-copies  'always)
    (dired-recursive-deletes 'top)
    ;; Ask whether destination dirs should get created when copying/removing files.
    (dired-create-destination-dirs 'ask)
    (dired-vc-rename-file t)
    :config
    ;; Mark files and do a sexp in their buffers. Based off
    ;; https://superuser.com/a/176629
    (defun krisb-dired-eval-form (sexp &optional prefix)
      "Run SEXP in marked dired files. If called with
  PREFIX (`universal-argument' if interactively), run a particular
  command."
      (interactive (list (if current-prefix-arg
                             (read-extended-command) ; Command
                           (read--expression "Run expression on marked files: ")) ; Sexp
                         current-prefix-arg))
      (save-window-excursion
        (mapc #'(lambda (filename)
                  (with-current-buffer (find-file-noselect filename)
                    (if prefix
                        (call-interactively (intern sexp))             ; Command
                      (funcall-interactively 'eval-expression sexp)))) ; Sexp
              (dired-get-marked-files)))))

  ;;; Dired-x
  (use-package dired-x
    :ensure nil
    :hook (dired-mode . dired-omit-mode)
    :custom
    (dired-omit-verbose nil))

  ;;; Nerd-icons-dired
  (use-package nerd-icons-dired
    :hook (dired-mode . nerd-icons-dired-mode))

  ;;; Dired-hist
  ;; History for dired buffers
  (use-package dired-hist
    :hook (dired-mode . dired-hist-mode)
    :bind ( :map dired-mode-map
            ("l" . dired-hist-go-back)
            ("r" . dired-hist-go-forward)))

  ;;; Provide
  (provide 'krisb-directories)
#+end_src
* Lisp (libraries)
:PROPERTIES:
:VISIBILITY: children
:END:

** =krisb-common.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-common.el"
  ;;; krisb-common.el --- Common variables and functions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Variables and functions I use throughout my Emacs config.

  ;;; Code:

  ;;; Variables

  ;;;; Me
  (setq user-full-name "Kristoffer Balintona"
        user-mail-address "krisbalintona@gmail.com")

  ;;;; System
  (defconst krisb-system-win-p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst krisb-system-mac-p
    (eq system-type 'darwin)
    "Are we running on a Mac system?")

  (defconst krisb-system-linux-p
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst krisb-linux-distribution
    (when krisb-system-linux-p (shell-command-to-string "printf %s \"$(lsb_release -sd)\""))
    "An escaped string that has the name of my Linux distribution.")

  (defconst krisb-linux-ubuntu-p
    (integerp (string-match "Ubuntu" krisb-linux-distribution))
    "Is this Ubuntu?")

  (defconst krisb-linux-fedora-p
    (integerp (string-match "Fedora" krisb-linux-distribution))
    "Is this Fedora?")

  (defconst krisb-linux-arch-p
    (integerp (string-match "Arch" krisb-linux-distribution))
    "Is this Arch Linux?")

  ;;;; Org
  (defvar krisb-org-directory (expand-file-name "org-database" "~/Documents")
    "The directory holding my org files.
  Meant to be used as the value of `org-directory'.")

  (defvar krisb-notes-directory (expand-file-name "notes" krisb-org-directory)
    "My notes directory.")

  (defvar krisb-blog-directory (expand-file-name "blog" krisb-notes-directory)
    "The directory for my pre-export blog files.")

  (defvar krisb-org-agenda-directory (expand-file-name "agenda" krisb-org-directory)
    "The directory holding my main org-agenda files.")

  (defvar krisb-org-agenda-main-file (expand-file-name "todo.org" krisb-org-agenda-directory)
    "My main org-agenda file.")

  (defvar krisb-org-agenda-directory-files (cl-remove-if
                                            (lambda (f)
                                              (string-match-p (rx "archive.org") f))
                                            (directory-files-recursively krisb-org-agenda-directory ".org$"))
    "A list of all org and org_archive files in `krisb-org-directory'.")

  (defvar krisb-bibliography-files (list (expand-file-name "master-lib.bib" krisb-org-directory))
    "A list of my bibliography (.bib) files.")

  ;;;; Other
  (defvar krisb-zotero-directory (expand-file-name "Zotero" "~")
    "The directory for everything Zotero.
  Useful for some citation-related configurations.")

  (defvar krisb-email-directory (expand-file-name "~/Documents/emails/")
    "Directory that houses my local email files.")

  ;;; Macros
  (defmacro krisb-evaluate-when-internet (interval &rest body)
    "Asynchronously evaluate BODY once internet connection is available.
  Retries every INTERVAL seconds."
    (declare (indent 0))
    `(let ((url "https://google.com"))
       (cl-labels ((check-connection (status)
                     (if (plist-get status :error)
                         (progn
                           (message "No internet. Retrying in %s seconds..." interval)
                           (run-at-time interval nil
                                        (lambda () (url-retrieve url #'check-connection))))
                       (progn ,@body))))  ; Execute BODY on success.
         (url-retrieve url #'check-connection))))

  (defmacro krisb-modus-themes-setup-faces (label &rest body)
    "Set up faces using modus-themes.
  Does several things:
  - Defines a function whose name begins with \"krisb-modus-themes-\",
    followed by LABEL and \"-setup-faces\".
  - This function evaluates BODY within a `modus-themes-with-colors' block
    if the enabled theme's name begins with \"modus-\".
  - Adds that function to `enable-theme-functions'.
  - Calls the function immediately to apply the changes."
    (let ((name (intern (concat "krisb-modus-themes-" label "-setup-faces"))))
      `(progn
         ;; Define the function
         (defun ,name (theme)
           ,(concat "Set up faces for " label ".
  This function was generated by the macro
  `krisb-modus-themes-setup-faces'.")
           (when (string-match "^modus-" (symbol-name theme))
             (modus-themes-with-colors
               ,@body)))
         (,name (car custom-enabled-themes))
         (add-hook 'enable-theme-functions #',name))))

  ;; A useful macro for executing stuff in other windows. Taken from
  ;; https://karthinks.com/software/emacs-window-management-almanac/#with-other-window-an-elisp-helper
  (defmacro krisb-with-other-window (&rest body)
    "Execute forms in BODY in the other window."
    `(unless (one-window-p)
       (with-selected-window (other-window-for-scrolling)
         ,@body)))

  ;;; Keymaps
  (defvar-keymap krisb-note-keymap
    :doc "Prefix for my note-taking needs.")
  (bind-key "C-c n" krisb-note-keymap 'global-map)

  (defvar-keymap krisb-lsp-keymap
    :doc "Prefix for lsp-related commands.")
  (with-eval-after-load 'lsp-mode
    (bind-key "C-c l" krisb-lsp-keymap 'lsp-mode-map))

  (defvar-keymap krisb-file-keymap
    :doc "Prefix for file-related commands.")
  (bind-key "C-c f" krisb-file-keymap 'global-map)

  (defvar-keymap krisb-yank-keymap
    :doc "Prefix for yanking stuff.")
  (bind-key "C-c i" krisb-yank-keymap 'global-map)

  (defvar-keymap krisb-open-keymap
    :doc "Prefix for opening various hings.")
  (bind-key "C-c o" krisb-open-keymap 'global-map)

  (defvar-keymap krisb-toggle-keymap
    :doc "Prefix for toggling stuff.")
  (bind-key "C-M-s-t" krisb-toggle-keymap 'global-map)


  ;;; Provide
  (provide 'krisb-common)
  ;;; krisb-common.el ends here
#+end_src

** =krisb-themes-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-themes-ext.el"
  ;;; krisb-themes-ext.el --- Manage switching/toggling of themes  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code for switching between two themes on-demand according to
  ;; time-of-day.

  ;;; Code:
  (require 'color)

  ;;; Theme switcher
  ;;;; Variables
  (defgroup krisb-themes-ext ()
    "Extensions for using themes."
    :group 'faces
    :prefix "krisb-themes-ext-")


  (defcustom krisb-themes-ext-dark nil
    "The chosen dark theme."
    :type 'symbol)

  (defcustom krisb-themes-ext-light nil
    "The chosen light theme."
    :type 'symbol)

  ;;;; Function definitions
  (defun krisb-themes-ext-ensure-themes-loaded ()
    "Ensure that the themes in `krisb-themes-ext-list' are loaded."
    (unless (or (custom-theme-p krisb-themes-ext-dark)
                (custom-theme-p krisb-themes-ext-light))
      (load-theme krisb-themes-ext-dark t t)
      (load-theme krisb-themes-ext-light t t)))

  (defun krisb-themes-ext-proper-load-theme-light ()
    "Properly load `krisb-theme-light' theme.
  Also disables its light counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-dark)
    (load-theme krisb-themes-ext-light t))

  (defun krisb-themes-ext-proper-load-theme-dark ()
    "Properly load `krisb-theme-dark' theme.
  Also disables its dark counterpart."
    (interactive)
    (disable-theme krisb-themes-ext-light)
    (load-theme krisb-themes-ext-dark t))

  (defun krisb-theme-ext-enable-theme-time-of-day (day-start night-start)
    "Enables the theme based on time of day.
  If daytime, call `krisb-themes-ext-proper-load-theme-light'. If
  nighttime, call `krisb-themes-ext-proper-load-theme-dark'.

  Nighttime begins at NIGHT-START hour and daytime begins at DAY-START
  hour."
    (interactive)
    (let ((hour (string-to-number (format-time-string "%H"))))
      ;; Dark theme between 7 PM or 8 AM
      (if (or (<= night-start hour) (<= hour day-start))
          (krisb-themes-ext-proper-load-theme-dark)
        (krisb-themes-ext-proper-load-theme-light))))

  ;;;; Command
  (defun krisb-themes-ext-theme-switcher ()
    "Switch between the light and dark themes."
    (interactive)
    (krisb-themes-ext-ensure-themes-loaded)
    (let* ((current (car custom-enabled-themes)))
      (cond ((equal krisb-themes-ext-light current)
             (krisb-themes-ext-proper-load-theme-dark))
            ((equal krisb-themes-ext-dark current)
             (krisb-themes-ext-proper-load-theme-light)))))

  ;;; Window transparency toggle
  (add-to-list 'default-frame-alist '(alpha-background . 100))
  (defun krisb-themes-ext-toggle-window-transparency (&optional arg)
    "Toggle the value of `alpha-background'.

  Toggles between 100 and 72 by default. Can choose which value to
  change to if called with ARG."
    (interactive "P")
    (let ((transparency (pcase arg
                          ((pred numberp) arg)
                          ((pred car) (read-number "Change the transparency to which value (0-100)? "))
                          (_
                           (pcase (frame-parameter nil 'alpha-background)
                             (72 100)
                             (100 72)
                             (t 100))))))
      (set-frame-parameter nil 'alpha-background transparency)))

  ;;; Provide
  (provide 'krisb-themes-ext)
  ;;; krisb-themes-ext.el ends here
#+end_src

** =krisb-indentation.el=
#+begin_src emacs-lisp :tangle "lisp/krisb-indentation.el"
  ;;; krisb-indentation.el --- Bespoke utilities for consistent indentation  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: convenience, tools, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Functions and commands used for easily maintaining consistent indentation and
  ;; whitespace in buffers.

  ;;; Code:

  ;;; Apheleia
  ;; Quality code formatting for (arbitrarily) many languages
  (use-package apheleia
    :ensure-system-package ((black . python-black)
                            (prettier)
                            (clang-format . clang-format-all-git)
                            (latexindent . texlive-binextra)
                            (stylua)
                            (google-java-format)
                            (shfmt)
                            (rustfmt))
    :config
    ;; Configure `apheleia-formatters' and `apheleia-mode-alist' here. I use setf
    ;; instead of defining the variables directly so that it is agnostic to any
    ;; package changes. Take a look at the `format-all' package for how to install
    ;; particular formatters as well as their proper CLI commands. Namely, inspect
    ;; `format-all-formatters'.
    (setf
     ;; Major modes
     (alist-get 'lua-mode apheleia-mode-alist) '(stylua)
     (alist-get 'ruby-mode apheleia-mode-alist) '(rufo)
     (alist-get 'haskell-mode apheleia-mode-alist) '(fourmolu)
     ;; Formatters
     (alist-get 'black apheleia-formatters) '("black" "-l 80" "-")
     (alist-get 'google-java-format apheleia-formatters)
     '("google-java-format" "--aosp" "--skip-removing-unused-imports" "-")
     (alist-get 'stylua apheleia-formatters)
     `("stylua" "--indent-type" "Spaces" "--line-endings" "Unix"  "--column-width" ,(number-to-string fill-column) "--quote-style" "ForceDouble" "-")
     (alist-get 'latexindent apheleia-formatters)
     '("latexindent" "--cruft=/tmp/" "--logfile" "indent.log")
     (alist-get 'rufo apheleia-formatters) '("rufo" "--simple-exit" "--filename" filepath)
     (alist-get 'fourmolu apheleia-formatters) '("fourmolu")))

  ;;; Provide
  (provide 'krisb-indentation)
  ;;; krisb-indentation.el ends here
#+end_src
** =krisb-vertico.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-vertico.el"
  ;;; krisb-vertico.el --- Vertico extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extension to Vertico.

  ;;; Code:
  (require 'vertico)

  ;;; Tab for tramp paths
  ;; Exception for TAB behavior when completing TRAMP paths. See
  ;; https://github.com/minad/vertico/wiki#restore-old-tab-behavior-when-completing-tramp-paths
  (defun krisb-vertico-insert-unless-tramp ()
    "Insert current candidate in minibuffer, except for tramp."
    (interactive)
    (if (vertico--remote-p (vertico--candidate))
        (minibuffer-complete)
      (vertico-insert)))
  (bind-key [remap vertico-insert] #'krisb-vertico-insert-unless-tramp 'vertico-map)

  ;;; Exceptions for org commands
  ;; Special for `org-agenda-filter' and `org-tags-view'. See
  ;; https://github.com/minad/vertico?tab=readme-ov-file#org-agenda-filter-and-org-tags-view
  (defun krisb-vertico-org-enforce-basic-completion (&rest args)
    (minibuffer-with-setup-hook
        (:append
         (lambda ()
           (let ((map (make-sparse-keymap)))
             (define-key map [tab] #'minibuffer-complete)
             (use-local-map (make-composed-keymap (list map) (current-local-map))))
           (setq-local completion-styles (cons 'basic completion-styles)
                       vertico-preselect 'prompt)))
      (apply args)))
  (with-eval-after-load 'org
    (declare-function org-make-tags-matcher "org")
    (advice-add #'org-make-tags-matcher :around #'krisb-vertico-org-enforce-basic-completion))
  (with-eval-after-load 'org-agenda
    (declare-function org-agenda-filter "org-agenda")
    (advice-add #'org-agenda-filter :around #'krisb-vertico-org-enforce-basic-completion))

  ;;; Truncate long filenames
  ;; Left-truncate filename candidates. Taken from
  ;; https://github.com/minad/vertico/wiki#left-truncate-recentf-filename-candidates-eg-for-consult-buffer
  (defun krisb-vertico-truncate-filename-candidates (args)
    (if-let ((arg (car args))
             (type (get-text-property 0 'multi-category arg))
             ((eq (car-safe type) 'file))
             (w (max 30 (- (window-width) 38)))
             (l (length arg))
             ((> l w)))
        (setcar args (concat "…" (truncate-string-to-width arg l (- l w)))))
    args)
  (advice-add #'vertico--format-candidate :filter-args #'krisb-vertico-truncate-filename-candidates)

  ;;; Provide
  (provide 'krisb-vertico)
  ;;; krisb-vertico.el ends here
#+end_src

** =krisb-consult-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-consult-ext.el"
  ;;; krisb-consult-ext.el --- Extensions for Consult  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: help, tools

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke extensions or Consult.

  ;;; Code:

  ;;; `consult-buffer' sources
  (defvar krisb-consult-buffer--dired-source
    (list :name     "Dired"
          :category 'buffer
          :narrow   ?d
          :face     'consult-buffer
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'dired-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--dired-source 'append)

  (defvar krisb-consult-buffer--info-source
    (list :name     "Info"
          :category 'buffer
          :narrow   ?i
          :face     'info-title-1
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'Info-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--info-source 'append)

  (defvar krisb-consult-buffer--customize-source
    (list :name     "Customize"
          :category 'buffer
          :narrow   ?c
          :face     'custom-group-tag
          :history  'buffer-name-history
          :state    'consult--buffer-state
          :action   'consult--buffer-action
          :items (lambda ()
                   (mapcar #'buffer-name
                           (seq-filter
                            (lambda (x)
                              (eq (buffer-local-value 'major-mode x) 'Custom-mode))
                            (buffer-list))))))
  (add-to-list 'consult-buffer-sources #'krisb-consult-buffer--customize-source 'append)

  ;;; Provide
  (provide 'krisb-consult-ext)
  ;;; krisb-consult-ext.el ends here
#+end_src

** =krisb-denote-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-denote-ext.el"
  ;;; krisb-denote-ext.el --- Denote extensions        -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke code to extend Denote.

  ;;; Code:
  (require 'denote)
  (require 'org-element)
  (require 'denote-org-extras)

  ;;; Auto-rename denote file based on front-matter
  (defun krisb-denote-ext-auto-rename-file ()
    "Rename denote file based on front-matter.
  Intended to be added to `after-save-hook'."
    (when-let ((f (buffer-file-name)))
      (when (and (file-in-directory-p f denote-directory)
                 (denote-filename-is-note-p f))
        (with-demoted-errors "Error: %S"
          (denote-rename-file-using-front-matter f)))))

  ;;; Standardizing note front-matter
  (defun krisb-org-set-keyword (keyword value)
    "Set org KEYWORD in current buffer to VALUE."
    ;; Got lazy and copied `org-roam-set-keyword'
    (org-with-point-at 1
      (let ((case-fold-search t))
        (if (re-search-forward (concat "^#\\+" keyword ":\\(.*\\)") (point-max) t)
            (if (string-blank-p value)
                (kill-whole-line)
              (replace-match (concat " " value) 'fixedcase nil nil 1))
          ;; Don't think this is necessary, and it'd be too much code
          ;; to copy if it were
          ;; (org-roam-end-of-meta-data 'drawers)
          (if (save-excursion (end-of-line) (eobp))
              (progn
                (end-of-line)
                (insert "\n"))
            (forward-line)
            (beginning-of-line))
          (insert "#+" keyword ": " value "\n")))))

  (defun krisb-note-buffer-prop-get (name)
    "Get a buffer property called NAME as a string."
    (org-with-point-at 1
      (when (re-search-forward (concat "^#\\+" name ":\\(.*\\)")
                               (point-max) t)
        (denote-trim-whitespace
         (buffer-substring-no-properties
          (match-beginning 1)
          (match-end 1))))))

  (defun krisb-denote-insert-identifier-maybe ()
    (when (and (buffer-file-name) (denote-file-is-note-p (buffer-file-name)))
      (cond
       ;; ID doesn't exist
       ((not (krisb-note-buffer-prop-get "identifier"))
        (save-excursion
          (goto-char (point-min))
          ;; Move cursor until after the first of following
          ;; properties exists: filetags, date, or title
          (while (and (not (eobp))
                      (cond
                       ((krisb-note-buffer-prop-get "filetags")
                        (re-search-forward (rx bol "#+"
                                               (or "F" "f")
                                               (or "I" "i")
                                               (or "L" "l")
                                               (or "E" "e")
                                               (or "T" "t")
                                               (or "A" "a")
                                               (or "G" "g")
                                               (or "S" "s")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "date")
                        (re-search-forward (rx bol "#+"
                                               (or "D" "d")
                                               (or "A" "a")
                                               (or "T" "t")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))
                       ((krisb-note-buffer-prop-get "title")
                        (re-search-forward (rx bol "#+"
                                               (or "T" "t")
                                               (or "I" "i")
                                               (or "T" "t")
                                               (or "L" "l")
                                               (or "E" "e")
                                               ":")
                                           (point-max) t))))
            (cond
             ((save-excursion (end-of-line) (eobp))
              (end-of-line)
              (insert "\n"))
             (t
              (forward-line)
              (beginning-of-line))))
          (insert "#+identifier: " (denote-retrieve-filename-identifier (buffer-file-name)) "\n")))
       ;; When file name ID and identifier property value differ
       ((not (string= (denote-retrieve-filename-identifier (buffer-file-name))
                      (krisb-note-buffer-prop-get "identifier")))
        (krisb-org-set-keyword "identifier" (denote-retrieve-filename-identifier (buffer-file-name)))))))
  (defun krisb-denote-rearrange-keywords-maybe ()
    (let* ((f (buffer-file-name))
           (file-type (denote-filetype-heuristics f))
           (cur-keywords (seq-uniq (denote-retrieve-keywords-value f file-type)))
           (sorted-keywords (denote-keywords-sort (cl-copy-list cur-keywords))))
      (denote-rewrite-keywords f sorted-keywords file-type)
      ;; Add empty filetags property if one isn't already present
      (unless (krisb-note-buffer-prop-get "filetags")
        (goto-char (point-min))
        (while (and (not (eobp))
                    (cond
                     ((krisb-note-buffer-prop-get "date")
                      (re-search-forward (rx bol "#+"
                                             (or "D" "d")
                                             (or "A" "a")
                                             (or "T" "t")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))
                     ((krisb-note-buffer-prop-get "title")
                      (re-search-forward (rx bol "#+"
                                             (or "T" "t")
                                             (or "I" "i")
                                             (or "T" "t")
                                             (or "L" "l")
                                             (or "E" "e")
                                             ":")
                                         (point-max) t))))
          (cond
           ((save-excursion (end-of-line) (eobp))
            (end-of-line)
            (insert "\n"))
           (t
            (forward-line)
            (beginning-of-line))))
        (insert "#+filetags:\n"))))
  (defun krisb-denote-ensure-title-space ()
    (save-excursion
      (goto-char (point-min))
      (if-let ((end-of-title-keyword
                (re-search-forward (rx bol "#+"
                                       (or "T" "t")
                                       (or "I" "i")
                                       (or "T" "t")
                                       (or "L" "l")
                                       (or "E" "e")
                                       ":")
                                   (point-max) t)))
          (progn
            (goto-char end-of-title-keyword)
            (just-one-space))
        (error "No title in %s!" (buffer-file-name)))))

  ;;;###autoload
  (defun krisb-denote-standardize-front-matter ()
    (interactive)
    (let ((existing-buffers (buffer-list)))
      (save-mark-and-excursion
        (dolist (file (denote-directory-files (rx (literal ".org") eol)))
          ;; Export all the files
          (with-current-buffer (find-file-noselect file)
            (read-only-mode -1)
            (save-restriction
              (widen)
              (krisb-denote-insert-identifier-maybe)
              (krisb-denote-rearrange-keywords-maybe)
              (krisb-denote-ensure-title-space)
              (delete-trailing-whitespace))
            (with-demoted-errors "Error: %S"
              (denote-rename-file-using-front-matter file))
            ;; Kill buffer unless it already exists
            (unless (member (get-buffer (buffer-name)) existing-buffers)
              (kill-buffer)))))))

  ;;; Update link descriptions
  (defun krisb-denote-update-link-descriptions (confirmp)
    "Recreate denote link descriptions in the current buffer.
  If called with CONFIMP, then prompt user to confirm a replacement. When
  interactively called, CONFIRMP is non-nil by default, flipping the value
  with `prefix-arg'."
    (interactive (list (not current-prefix-arg)))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward (denote-org-extras--get-link-type-regexp 'denote) nil :no-error)
        (condition-case err
            (save-match-data
              (let* ((link-beg (match-beginning 0))
                     (link-end (match-end 0))
                     (s (match-string-no-properties 0))
                     (link (with-temp-buffer
                             (let ((org-inhibit-startup nil))
                               (insert s)
                               (org-mode)
                               (goto-char (point-min))
                               (org-element-link-parser))))
                     (type (org-element-property :type link))
                     (path (org-element-property :path link))
                     (file (denote-get-path-by-id (car (string-split path "::"))))
                     (heading-custom-id (cadr (string-split path "::")))
                     (new-link-text
                      ;; TODO 2024-03-04: This is a brittle way to create the
                      ;; link. Changes to Denote might break this. Avoid that.
                      (if (and denote-org-store-link-to-heading heading-custom-id)
                          (format "[[denote:%s::#%s][%s]]"
                                  (denote-retrieve-filename-identifier file)
                                  (string-remove-prefix "#" heading-custom-id)
                                  (concat (denote--link-get-description file)
                                          "::"
                                          (save-excursion
                                            (with-current-buffer (find-file-noselect file)
                                              (org-link-search heading-custom-id)
                                              (org-link-display-format
                                               (denote-link-ol-get-heading))))))
                        (format "[[denote:%s][%s]]"
                                (denote-retrieve-filename-identifier file)
                                (denote--link-get-description file))))
                     (current-link-text (buffer-substring link-beg link-end)))
                (when (and (not (string= (substring-no-properties current-link-text) new-link-text))
                           (or (not confirmp)
                               (yes-or-no-p (concat "Replace this link? " current-link-text))))
                  (goto-char link-beg)
                  (delete-region link-beg link-end)
                  (insert new-link-text))))
          (error (message "[krisb-denote-update-link-descriptions] Error encountered:  %s"
                          (error-message-string err))))))
    (message "Corrected links in %s"
             (propertize (denote-retrieve-front-matter-title-value
                          (buffer-file-name)
                          (denote-filetype-heuristics (buffer-file-name)))
                         'face 'denote-faces-title)))

  (defun krisb-denote-update-link-descriptions-globally (dir confirmp)
    "Update the link description of all notes in DIR.
  If CONFIRMP is non-nil, then prompt the user to confirm each
  replacement."
    (interactive (list (denote-subdirectory-prompt) current-prefix-arg))
    (save-window-excursion
      (dolist (f (denote-directory-files (concat (file-name-nondirectory dir) "/") nil t))
        (save-excursion
          (let* ((live-buffer (get-file-buffer f)))
            (with-current-buffer (find-file-noselect f)
              (krisb-denote-update-link-descriptions confirmp))
            (unless live-buffer (kill-buffer live-buffer))))))
    (message "Updated all links in %s!" dir))

  ;;; Provide
  (provide 'krisb-denote-ext)
  ;;; krisb-denote-ext.el ends here
#+end_src

** =krisb-org-remark-ext.el=
#+begin_src emacs-lisp :tangle "lisp/krisb-org-remark-ext.el"
  ;;; krisb-org-remark-ext.el --- Extensions for org-remark  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, convenience

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for org-remark.

  ;;; Code:
  (require 'org-remark)
  (require 'transient)

  ;;; My `org-remark' pens
  (defgroup org-remark-ext nil
    "Extension for org-remark."
    :group 'org-remark)

  ;; Sets up `org-remark' faces according to the following schema:
  ;; - Resonant (red)
  ;; - Thesis (yellow)
  ;; - Detail (blue)
  ;; - Outline (green)
  ;; - External (purple/magenta)
  (defface krisb-org-remark-resonant-face
    `((t :background "red"))
    "Face for resonant annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-resonant-minor-face
    `((t :underline (:color "red" :style wave)))
    "Face for less resonant (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-thesis-face
    `((t :background "yellow"))
    "Face for thesis annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-thesis-minor-face
    `((t :underline (:color "yellow" :style wave)))
    "Face for less thesis (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-detail-face
    `((t :background "deep sky blue"))
    "Face for detail annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-detail-minor-face
    `((t :underline (:color "deep sky blue" :style wave)))
    "Face for less detail (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-outline-face
    `((t :background "lawn green"))
    "Face for outline annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-outline-minor-face
    `((t :underline (:color "lawn green" :style wave)))
    "Face for less outline (underlined) annotations."
    :group 'org-remark-ext)

  (defface krisb-org-remark-external-face
    `((t :background "magenta"))
    "Face for \"external\" annotations."
    :group 'org-remark-ext)
  (defface krisb-org-remark-external-minor-face
    `((t :underline (:color "magenta" :style wave)))
    "Face for less \"external\" (underlined) annotations."
    :group 'org-remark-ext)

  (org-remark-create "resonant"
                     'krisb-org-remark-resonant-face
                     `(CATEGORY "resonant" help-echo "Annotation that resonates with me."))
  (org-remark-create "resonant-underline"
                     'krisb-org-remark-resonant-minor-face
                     `(CATEGORY "resonant" help-echo "Annotation that resonates with me but I don't want to be as noticeable."))

  (org-remark-create "thesis"
                     'krisb-org-remark-thesis-face
                     `(CATEGORY "thesis" help-echo "Annotation that denotes something relevant to a thesis."))
  (org-remark-create "thesis-underline"
                     'krisb-org-remark-thesis-minor-face
                     `(CATEGORY "thesis" help-echo "Annotation that denotes something relevant to a thesis but I don't want to be as noticeable."))

  (org-remark-create "detail"
                     'krisb-org-remark-detail-face
                     `(CATEGORY "detail" help-echo "Annotation that denotes a notable detail."))
  (org-remark-create "detail-underline"
                     'krisb-org-remark-detail-minor-face
                     `(CATEGORY "detail" help-echo "Annotation that denotes a notable detail but I don't want to be as noticeable."))

  (org-remark-create "outline"
                     'krisb-org-remark-outline-face
                     `(CATEGORY "outline" help-echo "Annotation that foreshadows structure or main idea(s)."))
  (org-remark-create "outline-underline"
                     'krisb-org-remark-outline-minor-face
                     `(CATEGORY "outline" help-echo "Annotation that foreshadows structure or main idea(s) but I don't want to be as noticeable."))

  (org-remark-create "external"
                     'krisb-org-remark-external-face
                     `(CATEGORY "external" help-echo "Annotation that resonates with me but is external to the text."))
  (org-remark-create "external-underline"
                     'krisb-org-remark-external-minor-face
                     `(CATEGORY "external" help-echo "Annotation that resonates with me but is external to the text but I don't want to be as noticeable."))

  ;;;###autoload
  (transient-define-prefix krisb-org-remark-mark-transient ()
    "Transient menu for my pre-defined `org-remark' pens."
    [["Resonant"
      ("r" "Highlight" org-remark-mark-resonant)
      ("R" "Underline" org-remark-mark-resonant-underline)]
     ["Thesis"
      ("t" "Highlight" org-remark-mark-thesis)
      ("T" "Underline" org-remark-mark-thesis-underline)]]
    [["Detail"
      ("d" "Highlight" org-remark-mark-detail)
      ("D" "Underline" org-remark-mark-detail-underline)]
     ["Outline"
      ("o" "Highlight" org-remark-mark-outline)
      ("O" "Underline" org-remark-mark-outline-underline)]
     ["External"
      ("e" "Highlight" org-remark-mark-external)
      ("E" "Underline" org-remark-mark-external-underline)]])

  (provide 'krisb-org-remark-ext)
  ;;; krisb-org-remark-ext.el ends here
#+end_src

** =krisb-pdfs-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-pdfs-ext.el"
  ;;; krisb-pdfs-ext.el --- pdf-view-mode extensions   -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia, lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions for pdf-view-mode and other PDF-related workflows.

  ;;; Code:
  (require 'cl-macs)
  (require 'pdf-annot)
  (require 'avy)

  ;;; Custom entry formatter
  (declare-function org-noter-pdf--edges-to-region "org-noter")
  (defun krisb-pdf-annot--make-entry-formatter (a)
    "Return a formatter function for annotation A.

  A formatter function takes a format cons-cell and returns
  pretty-printed output."
    (lambda (fmt)
      (let ((entry-type (car fmt))
            (entry-width (cdr fmt))
            ;; Taken from css-mode.el
            (contrasty-color
             (lambda (name)
               (if (> (color-distance name "black") 292485)
                   "black" "white")))
            (prune-newlines
             (lambda (str)
               (replace-regexp-in-string "\n" " " str t t))))
        (cl-ecase entry-type
          (date (propertize (pdf-annot-print-property a 'modified)
                            'date
                            (pdf-annot-get a 'modified)))
          (page (pdf-annot-print-property a 'page))
          (label (funcall prune-newlines
                          (pdf-annot-print-property a 'label)))
          (contents
           (truncate-string-to-width
            (funcall prune-newlines
                     (pdf-annot-print-property a 'contents))
            entry-width))
          (type
           (let ((color (pdf-annot-get a 'color))
                 (type (pdf-annot-print-property a 'type)))
             (if (and pdf-annot-list-highlight-type color)
                 (propertize type 'face
                             `(:background ,color
                                           :foreground ,(funcall contrasty-color color)))
               type)))
          (color
           (let* ((color (pdf-annot-get a 'color)))
             (propertize color 'face
                         `(:background ,color
                                       :foreground ,(funcall contrasty-color color)))))
          (text
           (let* ((page (pdf-annot-get a 'page))
                  (edges (or (when (featurep 'org-noter)
                               (org-noter-pdf--edges-to-region (alist-get 'markup-edges a)))
                             (pdf-annot-get a 'edges)))
                  (raw-text
                   (pdf-info-gettext page
                                     edges
                                     pdf-view-selection-style
                                     pdf-annot-list-document-buffer))
                  (processed-text
                   (replace-regexp-in-string "\n" " "
                                             (replace-regexp-in-string "-\n" "" raw-text)))
                  (text-length (length processed-text)))
             (when (< entry-width text-length)
               (add-text-properties entry-width text-length '(display "…") processed-text))
             processed-text))))))
  (advice-add 'pdf-annot--make-entry-formatter :override 'krisb-pdf-annot--make-entry-formatter)

  ;;; Avy keys to highlight region in PDF
  ;; Use an avy-like interface to highlight region in pdf-view-mode. Heavily based
  ;; off of
  ;; https://github.com/dalanicolai/dala-emacs-lisp/blob/master/pdf-avy-highlight.el
  ;; with modifications
  (defcustom krisb-avy-pdf-links-convert-pointsize-scale 0.02
    "The scale factor for the -pointsize convert command.

  This determines the relative size of the font, when interactively
  reading links."
    :group 'pdf-links
    :type '(restricted-sexp :match-alternatives
                            ((lambda (x) (and (numberp x)
                                              (<= x 1)
                                              (>= x 0))))))

  (defun krisb-avy-pdf-links-read-char-action (query prompt)
    "Using PROMPT, interactively read a link-action.
  BORROWED FROM `pdf-links-read-link-action'.
  See `pdf-links-action-perform' for the interface."
    (pdf-util-assert-pdf-window)
    (let* ((links (pdf-info-search-string
                   query
                   (pdf-view-current-page)
                   (current-buffer)))
           (keys (pdf-links-read-link-action--create-keys
                  (length links)))
           (key-strings (mapcar (apply-partially 'apply 'string)
                                keys))
           (alist (cl-mapcar 'cons keys links))
           (size (pdf-view-image-size))
           (colors (pdf-util-face-colors 'pdf-links-read-link pdf-view-dark-minor-mode))
           (args (list
                  :foreground (car colors)
                  :background (cdr colors)
                  :formats
                  `((?c . ,(lambda (_edges) (pop key-strings)))
                    (?P . ,(number-to-string
                            (max 1 (* (cdr size)
                                      krisb-avy-pdf-links-convert-pointsize-scale)))))
                  :commands pdf-links-read-link-convert-commands
                  :apply (pdf-util-scale-relative-to-pixel
                          (mapcar (lambda (l) (car (cdr (assq 'edges l))))
                                  links)))))
      (unless links
        (error "No links on this page"))
      (unwind-protect
          (let ((image-data nil))
            (unless image-data
              (setq image-data (apply 'pdf-util-convert-page args ))
              (pdf-cache-put-image
               (pdf-view-current-page)
               (car size) image-data 'pdf-links-read-link-action))
            (pdf-view-display-image
             (create-image image-data (pdf-view-image-type) t))
            (pdf-links-read-link-action--read-chars prompt alist))
        (pdf-view-redisplay))))

  (defun krisb-avy-pdf-timed-input ()
    "BORROWED FORM `avy--read-candidates'"
    (let ((str "")
          char break)
      (while (and (not break)
                  (setq char
                        (read-char (format "char%s: "
                                           (if (string= str "")
                                               str
                                             (format " (%s)" str)))
                                   t
                                   (and (not (string= str ""))
                                        avy-timeout-seconds))))
        ;; Unhighlight
        (cond
         ;; Handle RET
         ((= char 13)
          (if avy-enter-times-out
              (setq break t)
            (setq str (concat str (list ?\n)))))
         ;; Handle C-h, DEL
         ((memq char avy-del-last-char-by)
          (let ((l (length str)))
            (when (>= l 1)
              (setq str (substring str 0 (1- l))))))
         ;; Handle ESC
         ((= char 27)
          (keyboard-quit))
         (t
          (setq str (concat str (list char))))))
      str))

  (defun krisb-avy-pdf-get-coordinates (end)
    "Prompt for PDF coordinates using avy-like interface."
    (let* ((query (krisb-avy-pdf-timed-input))
           (coords
            (list (or (krisb-avy-pdf-links-read-char-action query
                                                            (format "Please specify %s (SPC scrolls): "
                                                                    (if end "region end" "region beginning")))
                      (error "No char selected")))))
      (car (alist-get 'edges (car coords)))))

  ;;;###autoload
  (defun krisb-avy-pdf-highlight (&optional activate)
    "Use an avy-like interface to highlight region in PDF.

  If called with ACTIVATE, then also activate the created
  annotation immediately after creation."
    (interactive "P")
    (let* ((start (krisb-avy-pdf-get-coordinates nil))
           (end (krisb-avy-pdf-get-coordinates :end))
           (edges (append (cl-subseq start 0 2) (cl-subseq end 2 4)))
           (pdf-annot-activate-created-annotations activate))
      (pdf-annot-add-markup-annotation edges
                                       (let ((type (completing-read "Markup type (default highlight): "
                                                                    '("squiggly" "highlight" "underline" "strike-out")
                                                                    nil t)))
                                         (if (equal type "") 'highlight (intern type)))
                                       (pdf-annot-read-color "Annotation color: "))))

  ;;; Pdf-annot-list custom (tablist) color filter
  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-color-regexp ()
    "Get a prompt to filter for the color column's colors.
  The offered colors are those already present in the document's
  highlights."
    (interactive)
    (unless (derived-mode-p 'tabulated-list-mode)
      (error "Buffer is not in Tabulated List Mode"))
    (let ((unique-colors
           ;; Get unique colors directly from PDF
           (seq-filter
            #'identity
            (cl-remove-duplicates
             (mapcar
              (lambda (a) (pdf-annot-get a 'color))
              (pdf-annot-getannots nil nil pdf-annot-list-document-buffer))
             :test #'string=)))
          (nearby-color)
          (color-alist))
      ;; Scrape unique colors and closest neighboring defined color name
      (let ((lowest-dist most-positive-fixnum)
            (dist))
        (dolist (uc unique-colors)
          (dolist (c (defined-colors))
            (setq dist (color-distance c uc))
            (when (< dist lowest-dist)
              (setq nearby-color c
                    lowest-dist dist)))
          (push (list (propertize (format "%s (%s)" nearby-color uc)
                                  ;; Taken from pdf-annot.el
                                  'face `(:foreground ,(if (> (color-distance uc "black")
                                                              292485)
                                                           "black" "white")
                                                      :background ,uc))
                      uc)
                color-alist)
          (setq lowest-dist most-positive-fixnum)))

      (let* ((selections (completing-read-multiple "Select color: "
                                                   (mapcar 'car color-alist)
                                                   nil t))
             (color-filter (when selections
                             (concat "("
                                     (string-join
                                      (cl-loop for s in selections
                                               collect (concat "Color =~ " (cadr (assoc-string s color-alist))))
                                      " || ")
                                     ")"))))
        (tablist-push-filter (tablist-filter-parse color-filter)
                             (called-interactively-p 'any)))))

  ;;;###autoload
  (defun krisb-pdf-annot-list-filter-regexp ()
    "Drop-in replacement for `tablist-push-regexp-filter'.
  Calls `krisb-pdf-annot-list-filter-color-regexp' when point is in
  the color column."
    (interactive)
    (if (string= "Color" (tablist-read-column-name nil))
        (krisb-pdf-annot-list-filter-color-regexp)
      (call-interactively 'tablist-push-regexp-filter)))

  ;;; Custom org-link type for PDF annotations
  ;; Code copied from the code shared on Thu, 08 Feb 2024 22:13:50 +0000 by Juan
  ;; Manuel Macías <maciaschain@posteo.net> in the Emacs-devel mailing list. The
  ;; original uses the modification date, whereas this verion uses the annotation
  ;; ID, which should be unique even upon deletions and additions of annotations.
  ;; This is because the annotation IDs are robust (don't change upon modifying
  ;; content of annotation). Additionally, the original version relies on an
  ;; in-buffer `re-search-forward', meaning it only worked if you had the current
  ;; modified date as a column in `pdf-annot-list-format'; this is avoided if we
  ;; use ID's like `pdf-annot-list-display-annotation-from-id' likes.
  (defun krisb-pdf-annot-org-store-link ()
    "Stores link to annotation via its annotate.
  Uses the current annotation at point's ID."
    (when (eq major-mode 'pdf-annot-list-mode)
      (let* ((annot-buf pdf-annot-list-document-buffer)
             (pdf-file (buffer-file-name annot-buf))
             (annot (pdf-annot-getannot (tabulated-list-get-id) annot-buf))
             (id (pdf-annot-print-property annot 'id))
             (page (pdf-annot-print-property annot 'page))
             (link (concat "pdf-annot:" pdf-file "::" id))
             (desc (format "%s (annot. on p. %s)" (file-name-nondirectory pdf-file) page)))
        (org-link-store-props
         :type "pdf-annot"
         :link link
         :description desc))))

  (defun krisb-pdf-annot-org-follow-link (path)
    "Open pdf-tools link."
    (let ((id (if (string-match "::\\(.+\\)" path)
                  (match-string 1 path)
                (error "[krisb-pdf-annot-org-follow-link] Not a valid id!")))
          (file-path (replace-regexp-in-string "::.+" "" path)))
      (find-file file-path)
      (pdf-annot-list-annotations)
      (with-current-buffer (format "*%s's annots*" (file-name-sans-extension (buffer-name)))
        (goto-char (point-min))
        (forward-line (save-excursion
                        (goto-char (point-min))
                        ;; Find line whose tabulated-list-id corresponds to
                        ;; annotation ID
                        (let ((row-id (get-text-property (point) 'tabulated-list-id)))
                          (while (not (or (eq row-id (intern id))
                                          (= (line-number-at-pos (point)) (line-number-at-pos (point-max)))))
                            (forward-line)
                            (setq row-id (get-text-property (point) 'tabulated-list-id))))
                        (1- (line-number-at-pos))))
        (pdf-annot-list-display-annotation-from-id id))))

  (with-eval-after-load 'ol
    (org-link-set-parameters
     "pdf-annot"
     :follow #'krisb-pdf-annot-org-follow-link
     :store #'krisb-pdf-annot-org-store-link))

  ;;; Modify PDF metadata
  ;; Emacs wrapper and convenience functions for changing package metadata using
  ;; `pdftk'. See https://unix.stackexchange.com/a/72457 for more information on
  ;; the CLI commands involved.
  ;;;###autoload
  (defun krisb-pdf-tools--metadata-bookmark-section ()
    "Insert bookmark metadata section."
    (interactive)
    (save-excursion
      (insert "BookmarkBegin\nBookmarkTitle: \nBookmarkLevel: 1\nBookmarkPageNumber: tk\n"))
    (move-end-of-line 2))

  (defvar-keymap krisb-pdf-tools-metadata-mode-map
    :doc "Mode map for `krisb-pdf-tools-metadata-mode'."
    (kbd "C-c C-b") #'krisb-pdf-tools--metadata-bookmark-section)

  (define-derived-mode krisb-pdf-tools-metadata-mode fundamental-mode "Metadata"
    "Major mode for altering and viewing PDF metadata."
    :interactive t
    (use-local-map krisb-pdf-tools-metadata-mode-map))

  ;;;###autoload
  (defun krisb-pdf-tools--metadata-modify (pdf-file)
    "Modify PDF-FILE metadata."
    (interactive (list (buffer-file-name)))
    (unless (string= "pdf" (file-name-extension pdf-file))
      (user-error "File is not a PDF!"))
    (unless (executable-find "pdftk")
      (error "System executable `pdftk' not found. Please install executable on filesystem to proceed"))
    (let* ((pdf-name (file-name-sans-extension (file-name-nondirectory pdf-file)))
           (buf-name (concat "*pdf-tools metadata: " pdf-name))
           (metadata-file (concat "/tmp/pdf-tools-metadata--" pdf-name))
           (temp-pdf (make-temp-file "/tmp/pdf-tools-metadata--temp-pdf"))
           (metadata-dump-command (concat "pdftk \"" pdf-file "\" dump_data"))
           (metadata-update-command
            (concat "pdftk \"" pdf-file "\" update_info \"" metadata-file "\" output \"" temp-pdf "\""))
           (commit-func (lambda ()
                          "Commit the changes to PDF metadata."
                          (interactive)
                          (with-current-buffer buf-name
                            (widen)
                            (write-region (point-min) (point-max) metadata-file))
                          (shell-command metadata-update-command "*pdf-tools metadata: CLI output")
                          (kill-buffer buf-name)
                          ;; Have to do it this way since `pdftk' does not allow
                          ;; having the output file be the input file
                          (rename-file temp-pdf pdf-file t)
                          (message "Updated metadata!"))))
      (save-buffer)
      (with-current-buffer (get-buffer-create buf-name)
        (insert (shell-command-to-string metadata-dump-command))
        (goto-char (point-min))
        (krisb-pdf-tools-metadata-mode))
      (pop-to-buffer buf-name)
      (define-key krisb-pdf-tools-metadata-mode-map (kbd "C-c C-c") commit-func)
      (set-buffer-modified-p nil)
      (message "Press `C-c C-c' when finished editing PDF metadata")))

  ;;; Provide
  (provide 'krisb-pdfs-ext)
  ;;; krisb-pdfs-ext.el ends here
#+end_src

** =krisb-mpv.el=
#+begin_src emacs-lisp :tangle "lisp/krisb-mpv.el"
  ;;; krisb-mpv.el --- Bespoke MPV extensions          -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: multimedia

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extending the functionality of mpv.el for my idiosyncratic note-taking
  ;; preferences.

  ;;; Code:
  (require 'mpv)

  ;;; Custom MPV notes
  ;;;; Functions
  (defun krisb-mpv-play ()
    "Call `mpv-start'.
  Prompts for file in `org-attach-directory' if existent.  Otherwise,
  prompts for file in `default-directory'.

  Behaves specially in Dired buffers.  In those cases case, marked files
  will be played as a playlist as chronologically displayed in the Dired
  buffer.  If no files are marked, just the file at point is played.  (It
  is useful to `dired-sort-toggle-or-edit' to control the ordering of
  files.  To reverse the order, pass the \"-r\" flag to the listing
  switches, done by calling `dired-sort-toggle-or-edit' with `C-u'.)"
    (interactive)
    (let* ((dir (if (org-attach-dir)
                    (file-name-as-directory (org-attach-dir))
                  default-directory))
           (files
            (or (cl-remove-if
                 (lambda (f)
                   "Ensure F is not a directory and is a video file."
                   (not (and (not (directory-name-p f))
                             (member (file-name-extension f)
                                     ;; OPTIMIZE 2024-03-31: I hard-code this,
                                     ;; but I don't know if there's a better way
                                     ;; to recognize video extensions
                                     (list "mp4" "avi" "mkv" "mov" "wmv" "flv" "webm" "mpeg" "m4v" "3gp")))))
                 ;; NOTE 2024-03-31: If no files are marked, the file at point
                 ;; is treated as marked
                 (dired-get-marked-files))
                (expand-file-name (read-file-name "Select video: " dir)))))
      (apply #'mpv-start files)))

  (defun krisb-mpv-jump-to-playback-position (time)
    "Prompt user for a TIME to jump to.
  Takes HH:MM:SS time format.  Uses `org-timer-hms-to-secs' to parse user
  input."
    (interactive "MJump to time (HH:MM:SS format): ")
    (let ((secs (org-timer-hms-to-secs time)))
      (mpv-seek secs)))

  ;;;; Keymap
  (defvar-keymap krisb-mpv-map
    :doc "Keymap for my mpv.el commands for use in `org-mode'.
  Commands that control MPV playback mimic MPV keybinds."
    :repeat (mpv-pause mpv-seek-backward mpv-seek-forward)
    "o" #'krisb-mpv-play
    "O" #'mpv-play-url
    "k" #'mpv-kill
    "p" #'mpv-pause
    "b" #'mpv-seek-backward
    "f" #'mpv-seek-forward
    "g" #'krisb-mpv-jump-to-playback-position
    "9" #'mpv-volume-decrease
    "0" #'mpv-volume-increase
    "[" #'mpv-speed-decrease
    "]" #'mpv-speed-increase
    "P" #'mpv-jump-to-playlist-entry
    "i" #'mpv-insert-playback-position)

  ;; Taken from https://github.com/kljohann/mpv.el/wiki
  (defun krisb-mpv-org-metareturn-insert-playback-position ()
    "When on an `org-timer' formatted list, insert playback position."
    (when-let ((item-beg (org-in-item-p)))
      (when (and (not (bound-and-true-p org-timer-start-time))
                 (mpv-live-p)
                 (save-excursion
                   (goto-char item-beg)
                   (and (not (org-invisible-p)) (org-at-item-timer-p))))
        (mpv-insert-playback-position t))))
  (with-eval-after-load 'org
    (add-hook 'org-metareturn-hook #'krisb-mpv-org-metareturn-insert-playback-position))

  ;; Go to timestamps with `org-open-at-point'
  (with-eval-after-load 'org
    (add-hook 'org-open-at-point-functions 'mpv-seek-to-position-at-point))

  ;;; Provide
  (provide 'krisb-mpv)
  ;;; krisb-mpv.el ends here
#+end_src

** =krisb-email-composition-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-email-composition-ext.el"
  ;;; krisb-email-composition-ext.el --- Email composition extensions  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona(require 'message) <krisbalintona@gmail.com>
  ;; Keywords: mail, lisp

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Extensions to composing email.

  ;;; Code:

  ;;; Custom signatures
  (defcustom krisb-signature-separator "--"
    "Separator between email body and its signature."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-open
    (concat (when message-signature-insert-empty-line "\n")
            "\n#+begin_signature\n")
    "String meant to begin email signatures."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-close "\n#+end_signature"
    "String meant to end email signatures."
    :type 'string
    :group 'message)

  (defcustom krisb-signature-alist
    '(("Take care" . "Take care,\nKristoffer")
      ("In gratitude" . "In gratitude,\nKristoffer")
      ("Best" . "Best,\nKristoffer")
      ("With appreciation" . "With appreciation,\nKristoffer")
      ("Professional" . "Best regards,\nKristoffer Balintona\nPhone: (773) 677-9699")
      ("Website" . "In gratitude,\nKristoffer Balintona\nhttps://kristofferbalintona.me"))
    "Alist of aliases and their corresponding email signatures."
    :type '(alist :key-type (string :tag "Signature name")
                  :value-type (string :tag "Signature content"))
    :group 'message)

  ;;;###autoload
  (defun krisb-signature-select (&optional alias)
    "Select one of the signatures from `krisb-signature-alist'.
  Meant to be the value of `message-signature'.

  If ALIAS is a key in `krisb-signature-alist', then the corresponding
  value will be returned. If it is not, then it will be treated as the
  content of a properly formatted signature.

  If no ALIAS is supplied, then the keys from `krisb-signature-alist' will
   be shown via the `completing-read' interface."
    (let* ((alias (or alias
                      (completing-read
                       "Insert signature: "
                       (cl-loop for (key . value) in krisb-signature-alist
                                collect key))))
           (content (or (alist-get alias krisb-signature-alist nil nil #'string=) alias)))
      (if (bound-and-true-p org-msg-mode)
          ;; If using `org-msg-mode' and a signature was manually typed rather
          ;; than an alias chosen, then format that manually-typed-signature.
          ;; Example: if "Test" is typed, the result will be:
          ;; "#+begin_signature  (`krisb-signature-open')
          ;; ⎼⎼⎼⎼⎼⎼⎼⎼⎼⎼  (`krisb-signature-separator')
          ;; Test,
          ;; Kristoffer
          ;; #+end_signature  (`krisb-signature-close')"
          (format "%s%s\n%s%s%s"
                  krisb-signature-open
                  krisb-signature-separator
                  content
                  ",\nKristoffer"
                  krisb-signature-close)
        content)))

  ;;;###autoload
  (defun krisb-signature-insert-mu4e ()
    "Insert a selection from `krisb-signature-alist'.

  Replaces existing signature if present in buffer. Relies on
  signatures being wrapped in `krisb-signature-open' and
  `krisb-signature-close'."
    (interactive)
    (save-excursion
      (let ((sig (funcall 'krisb-signature-select))
            (existing-sig-beg
             (save-excursion
               (save-match-data
                 (goto-char (point-min))
                 (when (search-forward krisb-signature-open nil t)
                   (match-beginning 0)))))
            (existing-sig-end
             (save-excursion
               (save-match-data
                 (goto-char (point-min))
                 (search-forward krisb-signature-close nil t)))))
        (if (and existing-sig-beg existing-sig-end)
            ;; Replace existing signature
            (progn
              (goto-char existing-sig-beg)
              (delete-region existing-sig-beg existing-sig-end)
              (insert sig))
          ;; Remove leading whitespace from sig if inserting
          (insert (string-trim-left sig)))))
    ;; Change email signature separator to the conventional "--" for text-only
    ;; emails
    (when (and (derived-mode-p 'org-msg-edit-mode)
               (equal (org-msg-get-prop "alternatives")
                      '(text)))
      (save-excursion
        (goto-char (point-min))
        (when (search-forward krisb-signature-separator nil t)
          (replace-match "--" 1)))))

  ;;; Provide
  (provide 'krisb-email-composition-ext)
  ;;; krisb-email-composition-ext.el ends here
#+end_src

** =krisb-notmuch-ext.el=

#+begin_src emacs-lisp :tangle "lisp/krisb-notmuch-ext.el"
  ;;; krisb-notmuch-ext.el --- Notmuch extensions      -*- lexical-binding: t; -*-

  ;; Copyright (C) 2024  Kristoffer Balintona

  ;; Author: Kristoffer Balintona <krisbalintona@gmail.com>
  ;; Keywords: lisp, mail

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; Bespoke extensions to Notmuch.

  ;;; Code:
  (require 'notmuch)

  ;;; Restore window configuration when closing notmuch-hello window
  (defvar krisb-notmuch-hello-pre-window-conf nil)

  (defun krisb-notmuch-hello-set-window-conf ()
    "Set the value of `krisb-notmuch-hello-pre-window-conf'."
    (unless (memq major-mode '(notmuch-show-mode
                               notmuch-tree-mode
                               notmuch-hello-mode
                               notmuch-search-mode
                               notmuch-message-mode))
      (setq krisb-notmuch-hello-pre-window-conf (current-window-configuration))))

  ;;;###autoload
  (defun krisb-notmuch--around (fn &rest args)
    "Set pre-window-configuration also."
    (interactive)
    (krisb-notmuch-hello-set-window-conf)
    (apply fn args)
    ;; We delete other windows afterward just in case `notmuch' is called with
    ;; e.g. `other-frame-prefix'
    (delete-other-windows))
  (advice-add 'notmuch :around #'krisb-notmuch--around)

  ;;;###autoload
  (defun krisb-notmuch-bury-or-kill-this-buffer--around (fn &rest args)
    "Restore window configuration if appropriate."
    (interactive)
    (if (and (equal major-mode 'notmuch-hello-mode)
             krisb-notmuch-hello-pre-window-conf
             (equal (selected-frame) (window-configuration-frame krisb-notmuch-hello-pre-window-conf)))
        (progn
          (apply fn args)
          (set-window-configuration krisb-notmuch-hello-pre-window-conf)
          (setq krisb-notmuch-hello-pre-window-conf nil))
      (apply fn args)))
  (advice-add 'notmuch-bury-or-kill-this-buffer :around #'krisb-notmuch-bury-or-kill-this-buffer--around)

  ;;; Show only unread emails in thread opened via in notmuch-show-mode
  ;;;###autoload
  (defun krisb-notmuch-show-expand-only-unread-h ()
    "The `+notmuch-show-expand-only-unread-h' taken from Doom Emacs.
  In `notmuch-show-mode', when showing a thread, keep read messages
  folded."
    (interactive)
    (let ((unread nil)
          (open (notmuch-show-get-message-ids-for-open-messages)))
      (notmuch-show-mapc (lambda ()
                           (when (member "unread" (notmuch-show-get-tags))
                             (setq unread t))))
      (when unread
        (let ((notmuch-show-hook (remove 'krisb-notmuch-show-expand-only-unread-h notmuch-show-hook)))
          (notmuch-show-filter-thread "tag:unread")))))

  ;;; Open MML part in browser
  ;; FIXME 2024-09-26: This is a workaround. For some reason
  ;; `notmuch-show-view-part' opens a non-existent HTML file in the browser...
  ;;;###autoload
  (defun krisb-notmuch-show-view-part ()
    "View part in browser."
    (notmuch-show-apply-to-current-part-handle
     (lambda (handle &optional mime-type)
       (let ((file (make-temp-file "kb-notmuch-part-" nil (when (string= mime-type "text/html") ".html")))
             (browse-url-generic-args (remove "--new-window" browse-url-generic-args))) ; This is ad-hoc: I prefer not to open in a new window
         (mm-save-part-to-file handle file)
         (browse-url file)))))
  (advice-add 'notmuch-show-view-part :override #'krisb-notmuch-show-view-part)

  ;;; Bespoke `notmuch-show-mode' commands
  ;;;###autoload
  (defun krisb-notmuch-show-trash-thread-then-next (&optional show)
    "\"Trash\" all messages in the current buffer, then exit thread.
  If SHOW is provided (interactively by prefix-arg), then also open that
  thread."
    (interactive "P")
    (notmuch-show-tag-all
     (notmuch-tag-change-list (append notmuch-archive-tags '("+trash"))))
    (notmuch-show-next-thread t show))

  ;;;###autoload
  (defun krisb-notmuch-show-tag-thread (&optional reverse)
    "Like `notmuch-show-archive-thread' put prompt "
    (interactive "P")
    (let (current-tags)
      (notmuch-show-mapc
       (lambda () (setq current-tags (append (notmuch-show-get-tags) current-tags))))
      (notmuch-show-tag-all
       (notmuch-tag-change-list
        (notmuch-read-tag-changes current-tags)
        reverse))))

  ;;;###autoload
  (defun krisb-notmuch-show-advance-and-tag ()
    "Like `notmuch-show-advance-and-archive' but prompt for tag instead.
  Tagging is done by `krisb-notmuch-show-tag-thread'."
    (interactive)
    (when (notmuch-show-advance)
      (krisb-notmuch-show-tag-thread)
      (notmuch-show-next-thread t)))

  ;; Sets the style of `message's citations before sending a reply
  ;; TODO 2024-10-07: Try setting this automatically. If I can't, then clean up
  ;; the prompting of this function
  (defun krisb-notmuch--set-message-citation-style (orig-func &rest args)
    "Prompt for which style of citations should be used for message reply."
    (let ((selection
           (completing-read "Citation style: "
                            '("default" "traditional" "gmail"))))
      (cond
       ((equal selection "traditional")
        (message "Setting citation style to \"traditional\"")
        (let ((message-cite-function 'message-cite-original)
              (message-citation-line-function 'message-insert-formatted-citation-line)
              (message-citation-line-format "On %a, %b %d %Y, %N wrote:\n")
              (message-cite-reply-position 'below)
              (message-yank-prefix "> ")
              (message-yank-cited-prefix ">")
              (message-yank-empty-prefix ">"))
          (apply orig-func args)))
       ((equal selection "gmail")
        (message "Setting citation style to \"gmail\"")
        ;; These settings set what is specified by `message-cite-style-gmail'. I
        ;; do this manually since not all packages seem to be affected by
        ;; `message-cite-style'
        (let ((message-cite-function 'message-cite-original)
              (message-citation-line-function 'message-insert-formatted-citation-line)
              (message-citation-line-format "On %a, %b %d, %Y at %-I:%M %p %f wrote:\n")
              (message-cite-reply-position 'above)
              (message-yank-prefix "    ")
              (message-yank-cited-prefix "    ")
              (message-yank-empty-prefix "    "))
          (apply orig-func args)))
       ((equal selection "default")
        (message "Using default citation style")
        (apply orig-func args)))))
  (advice-add 'notmuch-mua-new-reply :around #'krisb-notmuch--set-message-citation-style)

  ;;;; `notmuch-mua-reply' overide to obey `message-cite-reply-position'
  (defun krisb-notmuch-mua-reply (query-string &optional sender reply-all duplicate)
    "Like `notmuch-mua-reply' but positions citation based on `message-cite-reply-position'."
    (let* ((duparg (and duplicate (list (format "--duplicate=%d" duplicate))))
           (args `("reply" "--format=sexp" "--format-version=5" ,@duparg))
           (process-crypto notmuch-show-process-crypto)
           reply
           original)
      (when process-crypto
        (setq args (append args '("--decrypt=true"))))
      (if reply-all
          (setq args (append args '("--reply-to=all")))
        (setq args (append args '("--reply-to=sender"))))
      (setq args (append args (list query-string)))
      ;; Get the reply object as SEXP, and parse it into an elisp object.
      (setq reply (apply #'notmuch-call-notmuch-sexp args))
      ;; Extract the original message to simplify the following code.
      (setq original (plist-get reply :original))
      ;; Extract the headers of both the reply and the original message.
      (let* ((original-headers (plist-get original :headers))
             (reply-headers (plist-get reply :reply-headers)))
        ;; If sender is non-nil, set the From: header to its value.
        (when sender
          (plist-put reply-headers :From sender))
        (let
            ;; Overlay the composition window on that being used to read
            ;; the original message.
            ((same-window-regexps '("\\*mail .*")))
          ;; We modify message-header-format-alist to get around
          ;; a bug in message.el.  See the comment above on
          ;; notmuch-mua-insert-references.
          (let ((message-header-format-alist
                 (cl-loop for pair in message-header-format-alist
                          if (eq (car pair) 'References)
                          collect (cons 'References
                                        (apply-partially
                                         'notmuch-mua-insert-references
                                         (cdr pair)))
                          else
                          collect pair)))
            (notmuch-mua-mail (plist-get reply-headers :To)
                              (notmuch-sanitize (plist-get reply-headers :Subject))
                              (notmuch-headers-plist-to-alist reply-headers)
                              nil (notmuch-mua-get-switch-function))))
        ;; Create a buffer-local queue for tag changes triggered when
        ;; sending the reply.
        (when notmuch-message-replied-tags
          (setq notmuch-message-queued-tag-changes
                (list (cons query-string notmuch-message-replied-tags))))
        ;; Insert the message body - but put it in front of the signature
        ;; if one is present, and after any other content
        ;; message*setup-hooks may have added to the message body already.
        (save-restriction
          (message-goto-body)
          (narrow-to-region (point) (point-max))
          (goto-char (point-max))
          (if (re-search-backward message-signature-separator nil t)
              (when message-signature-insert-empty-line
                (forward-line -1))
            (goto-char (point-max))))
        ;; If `message-cite-reply-position' is `above', e.g., for Gmail-like
        ;; email replies, then before inserting the citation, put the point
        ;; after the signature and insert a newline for spacing. Also respects
        ;; if `message-cite-reply-position' is set via `message-cite-style'.
        (when (or (equal message-cite-reply-position 'above)
                  (and message-cite-style
                       (eq (eval (cadr
                                  (assoc 'message-cite-reply-position
                                         (if (symbolp message-cite-style)
                                             (eval message-cite-style)
                                           message-cite-style))))
                           'above)))
          (goto-char (point-max))
          (insert "\n"))
        (let ((from (plist-get original-headers :From))
              (date (plist-get original-headers :Date))
              (start (point)))
          ;; notmuch-mua-cite-function constructs a citation line based
          ;; on the From and Date headers of the original message, which
          ;; are assumed to be in the buffer.
          (insert "From: " from "\n")
          (insert "Date: " date "\n\n")
          (insert
           (with-temp-buffer
             (let
                 ;; Don't attempt to clean up messages, excerpt
                 ;; citations, etc. in the original message before
                 ;; quoting.
                 ((notmuch-show-insert-text/plain-hook nil)
                  ;; Don't omit long parts.
                  (notmuch-show-max-text-part-size 0)
                  ;; Insert headers for parts as appropriate for replying.
                  (notmuch-show-insert-header-p-function
                   notmuch-mua-reply-insert-header-p-function)
                  ;; Ensure that any encrypted parts are
                  ;; decrypted during the generation of the reply
                  ;; text.
                  (notmuch-show-process-crypto process-crypto)
                  ;; Don't indent multipart sub-parts.
                  (notmuch-show-indent-multipart nil)
                  ;; Stop certain mime types from being inlined
                  (mm-inline-override-types (notmuch--inline-override-types)))
               ;; We don't want sigstatus buttons (an information leak and usually wrong anyway).
               (cl-letf (((symbol-function 'notmuch-crypto-insert-sigstatus-button) #'ignore)
                         ((symbol-function 'notmuch-crypto-insert-encstatus-button) #'ignore))
                 (notmuch-show-insert-body original (plist-get original :body) 0)
                 (buffer-substring-no-properties (point-min) (point-max))))))
          (set-mark (point))
          (goto-char start)
          ;; Quote the original message according to the user's configured style.
          (funcall notmuch-mua-cite-function)))
      ;; Crypto processing based crypto content of the original message
      (when process-crypto
        (notmuch-mua-reply-crypto (plist-get original :body))))
    ;; Push mark right before signature, if any.
    (message-goto-signature)
    (unless (eobp)
      (end-of-line -1))
    (push-mark)
    (message-goto-body)
    (set-buffer-modified-p nil))
  (advice-add 'notmuch-mua-reply :override #'krisb-notmuch-mua-reply)

  ;;; Provide
  (provide 'krisb-notmuch-ext)
  ;;; krisb-notmuch-ext.el ends here
#+end_src

* COMMENT Removed
:PROPERTIES:
:VISIBILITY: folded
:END:

These are lines I've removed while porting to a literate config.
#+begin_src emacs-lisp :tangle no :results none
  ;; Kill child processes without confirm
  (custom-set-variables '(confirm-kill-processes nil))

  ;; Don't confirm when killing a process
  (setq confirm-kill-processes nil)

  ;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
  ;; Emacs to its own devices there.
  (unless krisb-system-win-p
    (setq selection-coding-system 'utf-8))
#+end_src

* LocalWords :noexport:
:PROPERTIES:
:VISIBILITY: folded
:END:

#  LocalWords:  Vertico Minibuffer Todos Notmuch

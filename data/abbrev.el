;;-*-coding: utf-8;-*-
(define-abbrev-table 'emacs-lisp-mode-abbrev-table
  '(
    ("canditates" "candidates" nil :count 0)
    ("completin" "completion" nil :count 0)
    ("conventient" "convenient" nil :count 0)
    ("debending" "depending" nil :count 0)
    ("disapper" "disappear" nil :count 0)
    ("imediately" "immediately" nil :count 0)
    ("inconvient" "inconvenient" nil :count 0)
    ("infrmatoion" "information" nil :count 0)
    ("inisializes" "initializes" nil :count 0)
    ("inovlved" "involved" nil :count 0)
    ("linebreaks" "line breaks" nil :count 0)
    ("priveleges" "privileges" nil :count 0)
    ("remembr" "remember" nil :count 0)
    ("situatoinally" "Situational" nil :count 0)
    ("thersuaruses" "thesaurus" nil :count 0)
   ))

(define-abbrev-table 'latex-mode-abbrev-table
  '(
    ("doublespacing" "Double-spacing" nil :count 0)
    ("revolutinoary" "Revolutionary" nil :count 0)
   ))

(define-abbrev-table 'mu4e-compose-mode-abbrev-table
  '(
    ("blazingly" "blazing" nil :count 0)
    ("hwo" "how" nil :count 0)
    ("protestand" "Protestant" nil :count 0)
   ))

(define-abbrev-table 'org-mode-abbrev-table
  '(
    ("aloing" "along" nil :count 0)
    ("anamolies" "anomalies" nil :count 0)
    ("anctients" "Ancients" nil :count 0)
    ("anothers" "anther's" nil :count 0)
    ("antiquaited" "antiquated" nil :count 0)
    ("applietd" "applied" nil :count 0)
    ("argu" "argue" nil :count 0)
    ("astrolgy" "astrology" nil :count 0)
    ("bieng" "being" nil :count 0)
    ("both" "Both" nil :count 0)
    ("bounadiers" "boundaries" nil :count 0)
    ("cameabout" "came about" nil :count 0)
    ("celectial" "celestial" nil :count 0)
    ("celectrial" "electoral" nil :count 0)
    ("celestrial" "celestial" nil :count 0)
    ("chrisianity" "Christianity" nil :count 0)
    ("clorse" "closer" nil :count 0)
    ("comared" "compared" nil :count 0)
    ("commomplace" "commonplace" nil :count 0)
    ("commonpeople" "common people" nil :count 0)
    ("comprehesive" "comprehensive" nil :count 0)
    ("conceptionsof" "conceptions of" nil :count 0)
    ("conceptoins" "conceptions" nil :count 0)
    ("conenect" "Connect" nil :count 0)
    ("connction" "connection" nil :count 0)
    ("contemplations" "contemplation" nil :count 0)
    ("contextualization's" "Contextualization" nil :count 0)
    ("contradice" "contradict" nil :count 0)
    ("convergedupon" "converged upon" nil :count 0)
    ("corrolary" "corollary" nil :count 0)
    ("corrolate" "correlate" nil :count 0)
    ("critiqing" "critiquing" nil :count 0)
    ("critiquied" "critiqued" nil :count 0)
    ("crystalized" "crystallized" nil :count 0)
    ("demonstratse" "demonstrates" nil :count 0)
    ("despte" "despite" nil :count 0)
    ("developming" "DEVELOPING" nil :count 0)
    ("diffrent" "different" nil :count 0)
    ("digitalized" "Digitized" nil :count 0)
    ("domenstrably" "Demonstrably" nil :count 0)
    ("earliers" "earliest" nil :count 0)
    ("echochamber" "echo-chamber" nil :count 0)
    ("econonomic" "economic" nil :count 0)
    ("emeerge" "emerge" nil :count 0)
    ("emipirical" "empirical" nil :count 0)
    ("empiricirm" "empiricism" nil :count 0)
    ("empiricisim" "empiricism" nil :count 0)
    ("emprciism" "empiricism" nil :count 0)
    ("empriicsim" "empiricism" nil :count 0)
    ("emripicism" "empiricism" nil :count 0)
    ("engrages" "engages" nil :count 0)
    ("errros" "errors" nil :count 0)
    ("everewhere" "everywhere" nil :count 0)
    ("exacct" "Exact" nil :count 0)
    ("exactidtude" "exactitude" nil :count 0)
    ("exmaple" "example" nil :count 0)
    ("extendind" "extending" nil :count 0)
    ("falsifiability" "save " nil :count 0)
    ("forsed" "forced" nil :count 0)
    ("geograchy" "geography" nil :count 0)
    ("heiarchies" "hierarchies" nil :count 0)
    ("heirarchy" "hierarchy" nil :count 0)
    ("helicentric" "heliocentric" nil :count 0)
    ("historica" "historical" nil :count 0)
    ("holisticlaly" "holistically" nil :count 0)
    ("hsitory" "history" nil :count 0)
    ("huanghe" "Huang-he" nil :count 0)
    ("humn" "human" nil :count 0)
    ("idaes" "ideas" nil :count 0)
    ("imporant" "important" nil :count 0)
    ("inadaqeacy" "inadequacy" nil :count 0)
    ("individuals" "Individuals" nil :count 0)
    ("insated" "instead" nil :count 0)
    ("interdisclinary" "interdisciplinary" nil :count 0)
    ("intracacies" "intricacies" nil :count 0)
    ("isntance" "instance" nil :count 0)
    ("iterable" "asave" nil :count 0)
    ("itreration" "iteration" nil :count 0)
    ("judgement" "judgment" nil :count 0)
    ("judgements" "judgments" nil :count 0)
    ("leveraginng" "leveraging" nil :count 0)
    ("limitid" "limited" nil :count 0)
    ("manifst" "manifest" nil :count 0)
    ("marke" "mark" nil :count 0)
    ("memroies" "memories" nil :count 0)
    ("menaing" "meaning" nil :count 0)
    ("metaphysic" "metaphysics" nil :count 0)
    ("meticulouis" "meticulous" nil :count 0)
    ("mindest" "mindset" nil :count 0)
    ("minimap" "mini-map" nil :count 0)
    ("moedl" "model" nil :count 0)
    ("momenum" "momentum" nil :count 0)
    ("mordern" "modern" nil :count 0)
    ("natureand" "nature and" nil :count 0)
    ("nicollo" "Niccolo" nil :count 0)
    ("nnever" "never" nil :count 0)
    ("ocurrs" "occurs" nil :count 0)
    ("ook" "look" nil :count 0)
    ("orta" "save" nil :count 0)
    ("oyu" "you" nil :count 0)
    ("pefect" "perfect" nil :count 0)
    ("pereira" "save" nil :count 0)
    ("populaized" "popularized" nil :count 0)
    ("pracice" "practice" nil :count 0)
    ("predecetorrs" "predecessors" nil :count 0)
    ("predecossors" "predecessors" nil :count 0)
    ("preliteare" "preliterate" nil :count 0)
    ("prelitearte" "preliterate" nil :count 0)
    ("prescrpitive" "prescriptive" nil :count 0)
    ("psche" "Psyche" nil :count 0)
    ("psuedoscience" "pseudoscience" nil :count 0)
    ("pursiuts" "pursuits" nil :count 0)
    ("pysche" "psyche" nil :count 0)
    ("qestions" "Questions" nil :count 0)
    ("questiond" "questioned" nil :count 0)
    ("ratinoality" "rationality" nil :count 0)
    ("recalibrated" "re-calibrated" nil :count 0)
    ("reckeoned" "reckoned" nil :count 0)
    ("reding" "Reading" nil :count 0)
    ("reformatoin" "Reformation" nil :count 0)
    ("religoins" "religions" nil :count 0)
    ("religoius" "religious" nil :count 0)
    ("retreive" "retrieve" nil :count 0)
    ("retrival" "retrieval" nil :count 0)
    ("revolutin" "Revolution" nil :count 0)
    ("riting" "writing" nil :count 0)
    ("scholrs" "scholars" nil :count 0)
    ("scrutized" "scrutinized" nil :count 0)
    ("shouild" "should" nil :count 0)
    ("similarly" "Similarly" nil :count 0)
    ("singlestudy" "single study" nil :count 0)
    ("singlular" "singular" nil :count 0)
    ("socities" "societies" nil :count 0)
    ("sparate" "separate" nil :count 0)
    ("speculationr" "speculation" nil :count 0)
    ("stlying" "Styling" nil :count 0)
    ("subseuently" "subsequently" nil :count 0)
    ("sudh" "sudo" nil :count 0)
    ("supercede" "supersede" nil :count 0)
    ("superceded" "superseded" nil :count 0)
    ("supercedes" "supersedes" nil :count 0)
    ("teathing" "teaching" nil :count 0)
    ("techonology" "technology" nil :count 0)
    ("teinterpret" "reinterpret" nil :count 0)
    ("theancients" "the Ancients" nil :count 0)
    ("themsevlse" "themselves" nil :count 0)
    ("theoligians" "Theologians" nil :count 0)
    ("thisshows" "This shows" nil :count 0)
    ("thougthts" "thoughts" nil :count 0)
    ("travelled" "traveled" nil :count 0)
    ("universiality" "universality" nil :count 0)
    ("unrelaible" "unreliable" nil :count 0)
    ("wer" "were" nil :count 0)
    ("wihtin" "within" nil :count 0)
    ("woiuld" "would" nil :count 0)
    ("woould" "would" nil :count 0)
    ("wouild" "would" nil :count 0)
    ("woulid" "would" nil :count 0)
    ("wrtiting" "writing" nil :count 0)
    ("you" "You" nil :count 0)
    ("yuo" "you" nil :count 0)
   ))

(define-abbrev-table 'sh-mode-abbrev-table
  '(
    ("existsing" "existing" nil :count 0)
   ))

(define-abbrev-table 'text-mode-abbrev-table
  '(
    ("maintanence" "maintenance" nil :count 0)
    ("reorded" "Reordered" nil :count 0)
   ))

